
L451YASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a88  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c104  0800c104  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800c104  0800c104  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c104  0800c104  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c104  0800c104  0001c104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c108  0800c108  0001c108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d330  20000094  0800c1a0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d3c4  0800c1a0  0002d3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228ce  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e7  00000000  00000000  00042992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00046a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00005c52  00000000  00000000  00048448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b890  00000000  00000000  0004e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ecfd1  00000000  00000000  0006992a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001568fb  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001808  00000000  00000000  00156950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007254  00000000  00000000  00158158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009664 	.word	0x08009664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08009664 	.word	0x08009664

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <ILI9163_writeCommand>:

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <ILI9163_writeCommand+0x44>)
 800089e:	f003 f90d 	bl	8003abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2102      	movs	r1, #2
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f003 f907 	bl	8003abc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80008ae:	1df9      	adds	r1, r7, #7
 80008b0:	2300      	movs	r3, #0
 80008b2:	2201      	movs	r2, #1
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <ILI9163_writeCommand+0x48>)
 80008b6:	f004 fb8e 	bl	8004fd6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <ILI9163_writeCommand+0x44>)
 80008c2:	f003 f8fb 	bl	8003abc <HAL_GPIO_WritePin>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	48000400 	.word	0x48000400
 80008d4:	2000d1c0 	.word	0x2000d1c0

080008d8 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <ILI9163_writeData+0x44>)
 80008ea:	f003 f8e7 	bl	8003abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2102      	movs	r1, #2
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f003 f8e1 	bl	8003abc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 80008fa:	1df9      	adds	r1, r7, #7
 80008fc:	2300      	movs	r3, #0
 80008fe:	2201      	movs	r2, #1
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <ILI9163_writeData+0x48>)
 8000902:	f004 fb68 	bl	8004fd6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <ILI9163_writeData+0x44>)
 800090e:	f003 f8d5 	bl	8003abc <HAL_GPIO_WritePin>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	48000400 	.word	0x48000400
 8000920:	2000d1c0 	.word	0x2000d1c0

08000924 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	4810      	ldr	r0, [pc, #64]	; (8000978 <ILI9163_writeData16+0x54>)
 8000936:	f003 f8c1 	bl	8003abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f003 f8bb 	bl	8003abc <HAL_GPIO_WritePin>

    uint8_t data[2] = { (word >> 8) & 0x00FF, word & 0x00FF };
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	733b      	strb	r3, [r7, #12]
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 8000956:	f107 010c 	add.w	r1, r7, #12
 800095a:	2300      	movs	r3, #0
 800095c:	2202      	movs	r2, #2
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <ILI9163_writeData16+0x58>)
 8000960:	f004 fb39 	bl	8004fd6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <ILI9163_writeData16+0x54>)
 800096c:	f003 f8a6 	bl	8003abc <HAL_GPIO_WritePin>
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	48000400 	.word	0x48000400
 800097c:	2000d1c0 	.word	0x2000d1c0

08000980 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4604      	mov	r4, r0
 8000988:	4608      	mov	r0, r1
 800098a:	4611      	mov	r1, r2
 800098c:	461a      	mov	r2, r3
 800098e:	4623      	mov	r3, r4
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	4603      	mov	r3, r0
 8000994:	80bb      	strh	r3, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	807b      	strh	r3, [r7, #2]
 800099a:	4613      	mov	r3, r2
 800099c:	803b      	strh	r3, [r7, #0]
    ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 800099e:	202a      	movs	r0, #42	; 0x2a
 80009a0:	f7ff ff74 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData16(x1);
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ffbc 	bl	8000924 <ILI9163_writeData16>
    ILI9163_writeData16(x2);
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffb8 	bl	8000924 <ILI9163_writeData16>

    ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80009b4:	202b      	movs	r0, #43	; 0x2b
 80009b6:	f7ff ff69 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData16(y1);
 80009ba:	88bb      	ldrh	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffb1 	bl	8000924 <ILI9163_writeData16>
    ILI9163_writeData16(y2);
 80009c2:	883b      	ldrh	r3, [r7, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ffad 	bl	8000924 <ILI9163_writeData16>

    ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80009ca:	202c      	movs	r0, #44	; 0x2c
 80009cc:	f7ff ff5e 	bl	800088c <ILI9163_writeCommand>
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}

080009d8 <ILI9163_reset>:

void ILI9163_reset(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2108      	movs	r1, #8
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f003 f86a 	bl	8003abc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80009e8:	2032      	movs	r0, #50	; 0x32
 80009ea:	f001 faf9 	bl	8001fe0 <HAL_Delay>

    HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2108      	movs	r1, #8
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f003 f861 	bl	8003abc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f001 faf0 	bl	8001fe0 <HAL_Delay>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <ILI9163_init>:
    ILI9163_writeCommand(0x29); // Display On
    ILI9163_writeCommand(0x2C);
}

void ILI9163_init(int rotation)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a12:	486e      	ldr	r0, [pc, #440]	; (8000bcc <ILI9163_init+0x1c8>)
 8000a14:	f003 f852 	bl	8003abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f003 f84c 	bl	8003abc <HAL_GPIO_WritePin>

    ILI9163_reset(); // Hardware reset the LCD
 8000a24:	f7ff ffd8 	bl	80009d8 <ILI9163_reset>

    ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8000a28:	2011      	movs	r0, #17
 8000a2a:	f7ff ff2f 	bl	800088c <ILI9163_writeCommand>
    HAL_Delay(5); // Wait for the screen to wake up
 8000a2e:	2005      	movs	r0, #5
 8000a30:	f001 fad6 	bl	8001fe0 <HAL_Delay>

    ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8000a34:	203a      	movs	r0, #58	; 0x3a
 8000a36:	f7ff ff29 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x05); // 16 bpp
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	f7ff ff4c 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000a40:	2026      	movs	r0, #38	; 0x26
 8000a42:	f7ff ff23 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x04); // Gamma curve 3
 8000a46:	2004      	movs	r0, #4
 8000a48:	f7ff ff46 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000a4c:	20f2      	movs	r0, #242	; 0xf2
 8000a4e:	f7ff ff1d 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x01); // Gamma curve enable
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff ff40 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8000a58:	20e0      	movs	r0, #224	; 0xe0
 8000a5a:	f7ff ff17 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x3f);
 8000a5e:	203f      	movs	r0, #63	; 0x3f
 8000a60:	f7ff ff3a 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x25);
 8000a64:	2025      	movs	r0, #37	; 0x25
 8000a66:	f7ff ff37 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x1c);
 8000a6a:	201c      	movs	r0, #28
 8000a6c:	f7ff ff34 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x1e);
 8000a70:	201e      	movs	r0, #30
 8000a72:	f7ff ff31 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x20);
 8000a76:	2020      	movs	r0, #32
 8000a78:	f7ff ff2e 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x12);
 8000a7c:	2012      	movs	r0, #18
 8000a7e:	f7ff ff2b 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x2a);
 8000a82:	202a      	movs	r0, #42	; 0x2a
 8000a84:	f7ff ff28 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x90);
 8000a88:	2090      	movs	r0, #144	; 0x90
 8000a8a:	f7ff ff25 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x24);
 8000a8e:	2024      	movs	r0, #36	; 0x24
 8000a90:	f7ff ff22 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x11);
 8000a94:	2011      	movs	r0, #17
 8000a96:	f7ff ff1f 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff ff1c 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff ff19 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff ff16 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff13 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff ff10 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8000ab8:	20e1      	movs	r0, #225	; 0xe1
 8000aba:	f7ff fee7 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x20);
 8000abe:	2020      	movs	r0, #32
 8000ac0:	f7ff ff0a 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x20);
 8000ac4:	2020      	movs	r0, #32
 8000ac6:	f7ff ff07 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x20);
 8000aca:	2020      	movs	r0, #32
 8000acc:	f7ff ff04 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x20);
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f7ff ff01 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x05);
 8000ad6:	2005      	movs	r0, #5
 8000ad8:	f7ff fefe 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fefb 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x15);
 8000ae2:	2015      	movs	r0, #21
 8000ae4:	f7ff fef8 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0xa7);
 8000ae8:	20a7      	movs	r0, #167	; 0xa7
 8000aea:	f7ff fef5 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x3d);
 8000aee:	203d      	movs	r0, #61	; 0x3d
 8000af0:	f7ff fef2 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x18);
 8000af4:	2018      	movs	r0, #24
 8000af6:	f7ff feef 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x25);
 8000afa:	2025      	movs	r0, #37	; 0x25
 8000afc:	f7ff feec 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x2a);
 8000b00:	202a      	movs	r0, #42	; 0x2a
 8000b02:	f7ff fee9 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x2b);
 8000b06:	202b      	movs	r0, #43	; 0x2b
 8000b08:	f7ff fee6 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x2b);
 8000b0c:	202b      	movs	r0, #43	; 0x2b
 8000b0e:	f7ff fee3 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x3a);
 8000b12:	203a      	movs	r0, #58	; 0x3a
 8000b14:	f7ff fee0 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 8000b18:	20b1      	movs	r0, #177	; 0xb1
 8000b1a:	f7ff feb7 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x08); // DIVA = 8
 8000b1e:	2008      	movs	r0, #8
 8000b20:	f7ff feda 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x02); // VPA = 8
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fed7 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8000b2a:	20b2      	movs	r0, #178	; 0xb2
 8000b2c:	f7ff feae 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x08); // DIVA = 8
 8000b30:	2008      	movs	r0, #8
 8000b32:	f7ff fed1 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x02); // VPA = 8
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff fece 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000b3c:	20b3      	movs	r0, #179	; 0xb3
 8000b3e:	f7ff fea5 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x08); // DIVA = 8
 8000b42:	2008      	movs	r0, #8
 8000b44:	f7ff fec8 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x02); // VPA = 8
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff fec5 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000b4e:	20b4      	movs	r0, #180	; 0xb4
 8000b50:	f7ff fe9c 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000b54:	2007      	movs	r0, #7
 8000b56:	f7ff febf 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
    ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
    */

    ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000b5a:	202a      	movs	r0, #42	; 0x2a
 8000b5c:	f7ff fe96 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x00); // XSH
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff feb9 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00); // XSL
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff feb6 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00); // XEH
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff feb3 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(ILI9163_HEIGHT - 1); // XEL (128 pixels x)
 8000b72:	207f      	movs	r0, #127	; 0x7f
 8000b74:	f7ff feb0 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000b78:	202b      	movs	r0, #43	; 0x2b
 8000b7a:	f7ff fe87 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeData(0x00);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff feaa 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff fea7 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(0x00);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fea4 	bl	80008d8 <ILI9163_writeData>
    ILI9163_writeData(ILI9163_WIDTH - 1); // 160 pixels y
 8000b90:	209f      	movs	r0, #159	; 0x9f
 8000b92:	f7ff fea1 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 8000b96:	2036      	movs	r0, #54	; 0x36
 8000b98:	f7ff fe78 	bl	800088c <ILI9163_writeCommand>
    if (rotation)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <ILI9163_init+0x1a6>
        ILI9163_writeData(0x80 | 0x20 | 0x08);
 8000ba2:	20a8      	movs	r0, #168	; 0xa8
 8000ba4:	f7ff fe98 	bl	80008d8 <ILI9163_writeData>
 8000ba8:	e002      	b.n	8000bb0 <ILI9163_init+0x1ac>
    else
        ILI9163_writeData(0x40 | 0x20 | 0x08);
 8000baa:	2068      	movs	r0, #104	; 0x68
 8000bac:	f7ff fe94 	bl	80008d8 <ILI9163_writeData>

    ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8000bb0:	2013      	movs	r0, #19
 8000bb2:	f7ff fe6b 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 8000bb6:	2029      	movs	r0, #41	; 0x29
 8000bb8:	f7ff fe68 	bl	800088c <ILI9163_writeCommand>
    ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8000bbc:	202c      	movs	r0, #44	; 0x2c
 8000bbe:	f7ff fe65 	bl	800088c <ILI9163_writeCommand>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < (ILI9163_WIDTH * ILI9163_HEIGHT); i++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	e008      	b.n	8000bee <ILI9163_newFrame+0x1e>
        frameBuffer[i] = 0xFFFF;
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <ILI9163_newFrame+0x34>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000be4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint32_t i = 0; i < (ILI9163_WIDTH * ILI9163_HEIGHT); i++)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000bf4:	d3f2      	bcc.n	8000bdc <ILI9163_newFrame+0xc>
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	200000b0 	.word	0x200000b0

08000c08 <ILI9163_render>:

void ILI9163_render()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	22a0      	movs	r2, #160	; 0xa0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff feb4 	bl	8000980 <ILI9163_setAddress>
    HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <ILI9163_render+0x4c>)
 8000c20:	f002 ff4c 	bl	8003abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2102      	movs	r1, #2
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f002 ff46 	bl	8003abc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE * 2);
 8000c30:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000c34:	4908      	ldr	r1, [pc, #32]	; (8000c58 <ILI9163_render+0x50>)
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <ILI9163_render+0x54>)
 8000c38:	f004 fb3c 	bl	80052b4 <HAL_SPI_Transmit_DMA>

    SPI_DMA_FL = 0;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <ILI9163_render+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
    while (!SPI_DMA_FL) {
 8000c42:	bf00      	nop
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <ILI9163_render+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0fb      	beq.n	8000c44 <ILI9163_render+0x3c>
    } // This can be commented out if your thread sends new frames slower than SPI
      // transmits them. Otherwise, memory havoc. See README.md

    //	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
    //	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	48000400 	.word	0x48000400
 8000c58:	200000b0 	.word	0x200000b0
 8000c5c:	2000d1c0 	.word	0x2000d1c0
 8000c60:	2000a0b0 	.word	0x2000a0b0

08000c64 <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	71bb      	strb	r3, [r7, #6]
 8000c72:	4613      	mov	r3, r2
 8000c74:	80bb      	strh	r3, [r7, #4]
    if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT))
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b9f      	cmp	r3, #159	; 0x9f
 8000c7a:	d80f      	bhi.n	8000c9c <ILI9163_drawPixel+0x38>
 8000c7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0b      	blt.n	8000c9c <ILI9163_drawPixel+0x38>
        return;
    frameBuffer[((x) + (y * ILI9163_WIDTH))] = color; // >> 8;
 8000c84:	79f9      	ldrb	r1, [r7, #7]
 8000c86:	79ba      	ldrb	r2, [r7, #6]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	015b      	lsls	r3, r3, #5
 8000c90:	440b      	add	r3, r1
 8000c92:	4905      	ldr	r1, [pc, #20]	; (8000ca8 <ILI9163_drawPixel+0x44>)
 8000c94:	88ba      	ldrh	r2, [r7, #4]
 8000c96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000c9a:	e000      	b.n	8000c9e <ILI9163_drawPixel+0x3a>
        return;
 8000c9c:	bf00      	nop
    // frameBuffer[((x*2)+(y*2*ILI9163_WIDTH))+1] = color & 0xFF;
}
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	200000b0 	.word	0x200000b0

08000cac <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4623      	mov	r3, r4
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	717b      	strb	r3, [r7, #5]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	713b      	strb	r3, [r7, #4]
    for (uint8_t x = x1; x < x2; x++)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e012      	b.n	8000cf6 <ILI9163_fillRect+0x4a>
        for (uint8_t y = y1; y < y2; y++)
 8000cd0:	79bb      	ldrb	r3, [r7, #6]
 8000cd2:	73bb      	strb	r3, [r7, #14]
 8000cd4:	e008      	b.n	8000ce8 <ILI9163_fillRect+0x3c>
            ILI9163_drawPixel(x, y, color);
 8000cd6:	8c3a      	ldrh	r2, [r7, #32]
 8000cd8:	7bb9      	ldrb	r1, [r7, #14]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ffc1 	bl	8000c64 <ILI9163_drawPixel>
        for (uint8_t y = y1; y < y2; y++)
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	73bb      	strb	r3, [r7, #14]
 8000ce8:	7bba      	ldrb	r2, [r7, #14]
 8000cea:	793b      	ldrb	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3f2      	bcc.n	8000cd6 <ILI9163_fillRect+0x2a>
    for (uint8_t x = x1; x < x2; x++)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfa      	ldrb	r2, [r7, #15]
 8000cf8:	797b      	ldrb	r3, [r7, #5]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3e8      	bcc.n	8000cd0 <ILI9163_fillRect+0x24>
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <ILI9163_drawRect>:

void ILI9163_drawRect(
    uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t thickness, uint16_t color)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4623      	mov	r3, r4
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	717b      	strb	r3, [r7, #5]
 8000d22:	4613      	mov	r3, r2
 8000d24:	713b      	strb	r3, [r7, #4]
    ILI9163_fillRect(x1, y1, x2, y1 + thickness, color);
 8000d26:	79ba      	ldrb	r2, [r7, #6]
 8000d28:	7e3b      	ldrb	r3, [r7, #24]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b2dc      	uxtb	r4, r3
 8000d2e:	797a      	ldrb	r2, [r7, #5]
 8000d30:	79b9      	ldrb	r1, [r7, #6]
 8000d32:	79f8      	ldrb	r0, [r7, #7]
 8000d34:	8bbb      	ldrh	r3, [r7, #28]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4623      	mov	r3, r4
 8000d3a:	f7ff ffb7 	bl	8000cac <ILI9163_fillRect>
    ILI9163_fillRect(x1, y2 - thickness, x2, y2, color);
 8000d3e:	793a      	ldrb	r2, [r7, #4]
 8000d40:	7e3b      	ldrb	r3, [r7, #24]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	b2d9      	uxtb	r1, r3
 8000d46:	793c      	ldrb	r4, [r7, #4]
 8000d48:	797a      	ldrb	r2, [r7, #5]
 8000d4a:	79f8      	ldrb	r0, [r7, #7]
 8000d4c:	8bbb      	ldrh	r3, [r7, #28]
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	4623      	mov	r3, r4
 8000d52:	f7ff ffab 	bl	8000cac <ILI9163_fillRect>

    ILI9163_fillRect(x1, y1, x1 + thickness, y2, color);
 8000d56:	79fa      	ldrb	r2, [r7, #7]
 8000d58:	7e3b      	ldrb	r3, [r7, #24]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	793c      	ldrb	r4, [r7, #4]
 8000d60:	79b9      	ldrb	r1, [r7, #6]
 8000d62:	79f8      	ldrb	r0, [r7, #7]
 8000d64:	8bbb      	ldrh	r3, [r7, #28]
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4623      	mov	r3, r4
 8000d6a:	f7ff ff9f 	bl	8000cac <ILI9163_fillRect>
    ILI9163_fillRect(x2 - thickness, y1, x2, y2, color);
 8000d6e:	797a      	ldrb	r2, [r7, #5]
 8000d70:	7e3b      	ldrb	r3, [r7, #24]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	793c      	ldrb	r4, [r7, #4]
 8000d78:	797a      	ldrb	r2, [r7, #5]
 8000d7a:	79b9      	ldrb	r1, [r7, #6]
 8000d7c:	8bbb      	ldrh	r3, [r7, #28]
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	4623      	mov	r3, r4
 8000d82:	f7ff ff93 	bl	8000cac <ILI9163_fillRect>
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}

08000d8e <ILI9163_drawChar>:
{
    ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color)
{
 8000d8e:	b082      	sub	sp, #8
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	71bb      	strb	r3, [r7, #6]
 8000da0:	4613      	mov	r3, r2
 8000da2:	717b      	strb	r3, [r7, #5]
    uint16_t i, b, j;
    for (i = 0; i < font.height; i++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	81fb      	strh	r3, [r7, #14]
 8000da8:	e02f      	b.n	8000e0a <ILI9163_drawChar+0x7c>
        b = font.data[(ch - 32) * font.height + i];
 8000daa:	6a3a      	ldr	r2, [r7, #32]
 8000dac:	797b      	ldrb	r3, [r7, #5]
 8000dae:	3b20      	subs	r3, #32
 8000db0:	7f79      	ldrb	r1, [r7, #29]
 8000db2:	fb01 f103 	mul.w	r1, r1, r3
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	440b      	add	r3, r1
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	817b      	strh	r3, [r7, #10]
        for (j = 0; j < font.width; j++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	81bb      	strh	r3, [r7, #12]
 8000dc6:	e018      	b.n	8000dfa <ILI9163_drawChar+0x6c>
            if ((b << j) & 0x8000) {
 8000dc8:	897a      	ldrh	r2, [r7, #10]
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00d      	beq.n	8000df4 <ILI9163_drawChar+0x66>
                ILI9163_drawPixel(x + j, y + i, color);
 8000dd8:	89bb      	ldrh	r3, [r7, #12]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4413      	add	r3, r2
 8000de0:	b2d8      	uxtb	r0, r3
 8000de2:	89fb      	ldrh	r3, [r7, #14]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	4413      	add	r3, r2
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	f7ff ff38 	bl	8000c64 <ILI9163_drawPixel>
        for (j = 0; j < font.width; j++) {
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	3301      	adds	r3, #1
 8000df8:	81bb      	strh	r3, [r7, #12]
 8000dfa:	7f3b      	ldrb	r3, [r7, #28]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	89ba      	ldrh	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3e1      	bcc.n	8000dc8 <ILI9163_drawChar+0x3a>
    for (i = 0; i < font.height; i++) {
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	3301      	adds	r3, #1
 8000e08:	81fb      	strh	r3, [r7, #14]
 8000e0a:	7f7b      	ldrb	r3, [r7, #29]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	89fa      	ldrh	r2, [r7, #14]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3ca      	bcc.n	8000daa <ILI9163_drawChar+0x1c>
            }
        }
    }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e20:	b002      	add	sp, #8
 8000e22:	4770      	bx	lr

08000e24 <ILI9163_drawString>:

void ILI9163_drawString(
    uint8_t x, uint8_t y, FontDef font, uint16_t color, const char* string)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	1d39      	adds	r1, r7, #4
 8000e30:	e881 000c 	stmia.w	r1, {r2, r3}
 8000e34:	4623      	mov	r3, r4
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73bb      	strb	r3, [r7, #14]
    while (*string) {
 8000e3c:	e029      	b.n	8000e92 <ILI9163_drawString+0x6e>
        if (x + font.width >= ILI9163_WIDTH) {
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	793a      	ldrb	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	2b9f      	cmp	r3, #159	; 0x9f
 8000e46:	dd12      	ble.n	8000e6e <ILI9163_drawString+0x4a>
            x = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
            y += font.height;
 8000e4c:	797a      	ldrb	r2, [r7, #5]
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	4413      	add	r3, r2
 8000e52:	73bb      	strb	r3, [r7, #14]
            if (y + font.height >= ILI9163_HEIGHT)
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	797a      	ldrb	r2, [r7, #5]
 8000e58:	4413      	add	r3, r2
 8000e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5c:	dc1e      	bgt.n	8000e9c <ILI9163_drawString+0x78>
                break;

            if (*string == ' ') {
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b20      	cmp	r3, #32
 8000e64:	d103      	bne.n	8000e6e <ILI9163_drawString+0x4a>
                // skip spaces in the beginning of the new line
                string++;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3301      	adds	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
                continue;
 8000e6c:	e011      	b.n	8000e92 <ILI9163_drawString+0x6e>
            }
        }

        ILI9163_drawChar(x, y, *string, font, color);
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	7bb9      	ldrb	r1, [r7, #14]
 8000e74:	7bf8      	ldrb	r0, [r7, #15]
 8000e76:	8c3b      	ldrh	r3, [r7, #32]
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f7ff ff85 	bl	8000d8e <ILI9163_drawChar>

        x += font.width;
 8000e84:	793a      	ldrb	r2, [r7, #4]
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	4413      	add	r3, r2
 8000e8a:	73fb      	strb	r3, [r7, #15]
        string++;
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	3301      	adds	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    while (*string) {
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1d1      	bne.n	8000e3e <ILI9163_drawString+0x1a>
    }
}
 8000e9a:	e000      	b.n	8000e9e <ILI9163_drawString+0x7a>
                break;
 8000e9c:	bf00      	nop
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}

08000ea6 <ILI9163_drawStringF>:

void ILI9163_drawStringF(
    uint8_t x, uint8_t y, FontDef font, uint16_t color, char* szFormat, ...)
{
 8000ea6:	b590      	push	{r4, r7, lr}
 8000ea8:	b099      	sub	sp, #100	; 0x64
 8000eaa:	af02      	add	r7, sp, #8
 8000eac:	4604      	mov	r4, r0
 8000eae:	4608      	mov	r0, r1
 8000eb0:	1d39      	adds	r1, r7, #4
 8000eb2:	e881 000c 	stmia.w	r1, {r2, r3}
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73bb      	strb	r3, [r7, #14]
    char szBuffer[64];
    va_list pArgs;
    va_start(pArgs, szFormat);
 8000ebe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ec2:	617b      	str	r3, [r7, #20]
    vsnprintf(szBuffer, 63, szFormat, pArgs);
 8000ec4:	f107 0018 	add.w	r0, r7, #24
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ecc:	213f      	movs	r1, #63	; 0x3f
 8000ece:	f008 f827 	bl	8008f20 <vsniprintf>
    va_end(pArgs);

    ILI9163_drawString(x, y, font, color, szBuffer);
 8000ed2:	7bb9      	ldrb	r1, [r7, #14]
 8000ed4:	7bf8      	ldrb	r0, [r7, #15]
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	cb0c      	ldmia	r3, {r2, r3}
 8000ee6:	f7ff ff9d 	bl	8000e24 <ILI9163_drawString>
}
 8000eea:	bf00      	nop
 8000eec:	375c      	adds	r7, #92	; 0x5c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}
	...

08000ef4 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi) // Your TxCpltCallback
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    SPI_DMA_CNT--;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_SPI_TxCpltCallback+0x34>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <HAL_SPI_TxCpltCallback+0x34>)
 8000f04:	6013      	str	r3, [r2, #0]
    if (SPI_DMA_CNT == 0) {
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_SPI_TxCpltCallback+0x34>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d108      	bne.n	8000f20 <HAL_SPI_TxCpltCallback+0x2c>
        HAL_SPI_DMAStop(&hspi2);
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <HAL_SPI_TxCpltCallback+0x38>)
 8000f10:	f004 fac4 	bl	800549c <HAL_SPI_DMAStop>
        SPI_DMA_CNT = 1;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_SPI_TxCpltCallback+0x34>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
        SPI_DMA_FL = 1;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_SPI_TxCpltCallback+0x3c>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
    }
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	2000d1c0 	.word	0x2000d1c0
 8000f30:	2000a0b0 	.word	0x2000a0b0

08000f34 <map>:


uint8_t map(uint8_t value, uint8_t max, uint8_t newMax) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	4613      	mov	r3, r2
 8000f44:	717b      	strb	r3, [r7, #5]
	return ((value * newMax) / max);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	797a      	ldrb	r2, [r7, #5]
 8000f4a:	fb02 f203 	mul.w	r2, r2, r3
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f54:	b2db      	uxtb	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	0000      	movs	r0, r0
 8000f64:	0000      	movs	r0, r0
	...

08000f68 <getTemp>:

uint16_t getTemp() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	return (uint16_t) ((float)currentTemp * 1000 / 1241) * 0.106 + 13;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <getTemp+0x68>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f78:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000fd4 <getTemp+0x6c>
 8000f7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f80:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000fd8 <getTemp+0x70>
 8000f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8c:	ee17 3a90 	vmov	r3, s15
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fbf0 	bl	8000778 <__aeabi_i2d>
 8000f98:	a30b      	add	r3, pc, #44	; (adr r3, 8000fc8 <getTemp+0x60>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff f96f 	bl	8000280 <__aeabi_dmul>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <getTemp+0x74>)
 8000fb0:	f7ff fa96 	bl	80004e0 <__adddf3>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fc46 	bl	800084c <__aeabi_d2uiz>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29b      	uxth	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	e5604189 	.word	0xe5604189
 8000fcc:	3fbb22d0 	.word	0x3fbb22d0
 8000fd0:	2000a0b4 	.word	0x2000a0b4
 8000fd4:	447a0000 	.word	0x447a0000
 8000fd8:	449b2000 	.word	0x449b2000
 8000fdc:	402a0000 	.word	0x402a0000

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f000 ffc3 	bl	8001f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f896 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000fec:	f000 f988 	bl	8001300 <MX_DMA_Init>
  MX_GPIO_Init();
 8000ff0:	f000 f9a4 	bl	800133c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ff4:	f000 f8e2 	bl	80011bc <MX_ADC1_Init>
  MX_SPI2_Init();
 8000ff8:	f000 f944 	bl	8001284 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */

  ILI9163_init(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fd01 	bl	8000a04 <ILI9163_init>

  PID_init(&ironPID);
 8001002:	482b      	ldr	r0, [pc, #172]	; (80010b0 <main+0xd0>)
 8001004:	f000 fc91 	bl	800192a <PID_init>

  ironPID.max = 100;
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <main+0xd0>)
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <main+0xd4>)
 800100c:	615a      	str	r2, [r3, #20]
  ironPID.min = 0;
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <main+0xd0>)
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  ironPID.Kp = PID_KP;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <main+0xd0>)
 8001018:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800101c:	601a      	str	r2, [r3, #0]
  ironPID.Ki = PID_KI;
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <main+0xd0>)
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <main+0xd8>)
 8001022:	605a      	str	r2, [r3, #4]
  ironPID.Kd = PID_KD;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <main+0xd0>)
 8001026:	4a25      	ldr	r2, [pc, #148]	; (80010bc <main+0xdc>)
 8001028:	609a      	str	r2, [r3, #8]
  ironPID.tau = PID_TAU;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <main+0xd0>)
 800102c:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <main+0xe0>)
 800102e:	60da      	str	r2, [r3, #12]
  ironPID.T = PID_SAMPLE_TIME;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <main+0xd0>)
 8001032:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <main+0xe4>)
 8001034:	619a      	str	r2, [r3, #24]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001036:	f004 ff3b 	bl	8005eb0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of zeroCrossingSemaphore */
  zeroCrossingSemaphoreHandle = osSemaphoreNew(1, 1, &zeroCrossingSemaphore_attributes);
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <main+0xe8>)
 800103c:	2101      	movs	r1, #1
 800103e:	2001      	movs	r0, #1
 8001040:	f005 f82d 	bl	800609e <osSemaphoreNew>
 8001044:	4603      	mov	r3, r0
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <main+0xec>)
 8001048:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tempMeasure */
  tempMeasureHandle = osThreadNew(tempMeas, NULL, &tempMeasure_attributes);
 800104a:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <main+0xf0>)
 800104c:	2100      	movs	r1, #0
 800104e:	4821      	ldr	r0, [pc, #132]	; (80010d4 <main+0xf4>)
 8001050:	f004 ff78 	bl	8005f44 <osThreadNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <main+0xf8>)
 8001058:	6013      	str	r3, [r2, #0]

  /* creation of ironControll */
  ironControllHandle = osThreadNew(ironControl, NULL, &ironControll_attributes);
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <main+0xfc>)
 800105c:	2100      	movs	r1, #0
 800105e:	4820      	ldr	r0, [pc, #128]	; (80010e0 <main+0x100>)
 8001060:	f004 ff70 	bl	8005f44 <osThreadNew>
 8001064:	4603      	mov	r3, r0
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <main+0x104>)
 8001068:	6013      	str	r3, [r2, #0]

  safetyCutoffHandle = osThreadNew(safetyCutoff, NULL, &safetyCutoff_attributes);
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <main+0x108>)
 800106c:	2100      	movs	r1, #0
 800106e:	481f      	ldr	r0, [pc, #124]	; (80010ec <main+0x10c>)
 8001070:	f004 ff68 	bl	8005f44 <osThreadNew>
 8001074:	4603      	mov	r3, r0
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <main+0x110>)
 8001078:	6013      	str	r3, [r2, #0]


  /* creation of screen */
  screenHandle = osThreadNew(screenTask, NULL, &screen_attributes);
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <main+0x114>)
 800107c:	2100      	movs	r1, #0
 800107e:	481e      	ldr	r0, [pc, #120]	; (80010f8 <main+0x118>)
 8001080:	f004 ff60 	bl	8005f44 <osThreadNew>
 8001084:	4603      	mov	r3, r0
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <main+0x11c>)
 8001088:	6013      	str	r3, [r2, #0]

  /* creation of controls */
  controlsHandle = osThreadNew(controlTask, NULL, &controls_attributes);
 800108a:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <main+0x120>)
 800108c:	2100      	movs	r1, #0
 800108e:	481d      	ldr	r0, [pc, #116]	; (8001104 <main+0x124>)
 8001090:	f004 ff58 	bl	8005f44 <osThreadNew>
 8001094:	4603      	mov	r3, r0
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <main+0x128>)
 8001098:	6013      	str	r3, [r2, #0]

  /* creation of zeroCrossingTas */
  zeroCrossingTasHandle = osThreadNew(zeroCrossing, NULL, &zeroCrossingTas_attributes);
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <main+0x12c>)
 800109c:	2100      	movs	r1, #0
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <main+0x130>)
 80010a0:	f004 ff50 	bl	8005f44 <osThreadNew>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <main+0x134>)
 80010a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010aa:	f004 ff25 	bl	8005ef8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <main+0xce>
 80010b0:	2000d2a8 	.word	0x2000d2a8
 80010b4:	42c80000 	.word	0x42c80000
 80010b8:	3d3851ec 	.word	0x3d3851ec
 80010bc:	3d428f5c 	.word	0x3d428f5c
 80010c0:	3ca3d70a 	.word	0x3ca3d70a
 80010c4:	3df5c28f 	.word	0x3df5c28f
 80010c8:	0800c018 	.word	0x0800c018
 80010cc:	2000d228 	.word	0x2000d228
 80010d0:	0800bf40 	.word	0x0800bf40
 80010d4:	08001475 	.word	0x08001475
 80010d8:	2000d29c 	.word	0x2000d29c
 80010dc:	0800bf64 	.word	0x0800bf64
 80010e0:	08001511 	.word	0x08001511
 80010e4:	2000d298 	.word	0x2000d298
 80010e8:	0800bf88 	.word	0x0800bf88
 80010ec:	0800163d 	.word	0x0800163d
 80010f0:	2000d2a0 	.word	0x2000d2a0
 80010f4:	0800bfac 	.word	0x0800bfac
 80010f8:	080016ed 	.word	0x080016ed
 80010fc:	2000d224 	.word	0x2000d224
 8001100:	0800bfd0 	.word	0x0800bfd0
 8001104:	080017e5 	.word	0x080017e5
 8001108:	2000d22c 	.word	0x2000d22c
 800110c:	0800bff4 	.word	0x0800bff4
 8001110:	080018c5 	.word	0x080018c5
 8001114:	2000d2a4 	.word	0x2000d2a4

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2244      	movs	r2, #68	; 0x44
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f007 fdf2 	bl	8008d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800113e:	f002 fce3 	bl	8003b08 <HAL_PWREx_ControlVoltageScaling>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001148:	f000 fbea 	bl	8001920 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	2340      	movs	r3, #64	; 0x40
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fd1a 	bl	8003bb4 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001186:	f000 fbcb 	bl	8001920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2104      	movs	r1, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f926 	bl	80043f4 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 fbb7 	bl	8001920 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3758      	adds	r7, #88	; 0x58
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011d4:	4a29      	ldr	r2, [pc, #164]	; (800127c <MX_ADC1_Init+0xc0>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_ADC1_Init+0xbc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_ADC1_Init+0xbc>)
 8001204:	2201      	movs	r2, #1
 8001206:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_ADC1_Init+0xbc>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_ADC1_Init+0xbc>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_ADC1_Init+0xbc>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_ADC1_Init+0xbc>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_ADC1_Init+0xbc>)
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_ADC1_Init+0xbc>)
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_ADC1_Init+0xbc>)
 8001234:	f001 f8d2 	bl	80023dc <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800123e:	f000 fb6f 	bl	8001920 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_ADC1_Init+0xc4>)
 8001244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2306      	movs	r3, #6
 8001248:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124e:	237f      	movs	r3, #127	; 0x7f
 8001250:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001252:	2304      	movs	r3, #4
 8001254:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC1_Init+0xbc>)
 8001260:	f001 fb08 	bl	8002874 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800126a:	f000 fb59 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000d230 	.word	0x2000d230
 800127c:	50040000 	.word	0x50040000
 8001280:	04300002 	.word	0x04300002

08001284 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_SPI2_Init+0x74>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <MX_SPI2_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_SPI2_Init+0x74>)
 8001290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_SPI2_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_SPI2_Init+0x74>)
 800129e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012ba:	2218      	movs	r2, #24
 80012bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012d2:	2207      	movs	r2, #7
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012de:	2208      	movs	r2, #8
 80012e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_SPI2_Init+0x74>)
 80012e4:	f003 fdd4 	bl	8004e90 <HAL_SPI_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 fb17 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000d1c0 	.word	0x2000d1c0
 80012fc:	40003800 	.word	0x40003800

08001300 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_DMA_Init+0x38>)
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <MX_DMA_Init+0x38>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6493      	str	r3, [r2, #72]	; 0x48
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_DMA_Init+0x38>)
 8001314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2105      	movs	r1, #5
 8001322:	200f      	movs	r0, #15
 8001324:	f001 ffd3 	bl	80032ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001328:	200f      	movs	r0, #15
 800132a:	f001 ffec 	bl	8003306 <HAL_NVIC_EnableIRQ>

}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <MX_GPIO_Init+0x128>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a43      	ldr	r2, [pc, #268]	; (8001464 <MX_GPIO_Init+0x128>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <MX_GPIO_Init+0x128>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <MX_GPIO_Init+0x128>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <MX_GPIO_Init+0x128>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <MX_GPIO_Init+0x128>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <MX_GPIO_Init+0x128>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a37      	ldr	r2, [pc, #220]	; (8001464 <MX_GPIO_Init+0x128>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <MX_GPIO_Init+0x128>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f002 fb8a 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80013ae:	482e      	ldr	r0, [pc, #184]	; (8001468 <MX_GPIO_Init+0x12c>)
 80013b0:	f002 fb84 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8;
 80013b4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80013b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f002 f9e2 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d4:	2304      	movs	r3, #4
 80013d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_GPIO_Init+0x130>)
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f002 f9d5 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
 80013ee:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	481b      	ldr	r0, [pc, #108]	; (8001470 <MX_GPIO_Init+0x134>)
 8001404:	f002 f9c8 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_GPIO_Init+0x12c>)
 800141e:	f002 f9bb 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8001422:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_GPIO_Init+0x12c>)
 800143c:	f002 f9ac 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_GPIO_Init+0x130>)
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_GPIO_Init+0x134>)
 8001456:	f002 f99f 	bl	8003798 <HAL_GPIO_Init>

}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400
 800146c:	10110000 	.word	0x10110000
 8001470:	48000800 	.word	0x48000800

08001474 <tempMeas>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tempMeas */
void tempMeas(void *argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  measuringTemp = true;
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <tempMeas+0x8c>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
	  osDelay(20);
 8001482:	2014      	movs	r0, #20
 8001484:	f004 fdf0 	bl	8006068 <osDelay>

	  if (heaterOn) {
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <tempMeas+0x90>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00d      	beq.n	80014ac <tempMeas+0x38>
		  osDelay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f004 fde9 	bl	8006068 <osDelay>
		  while (heaterOn) {
 8001496:	e005      	b.n	80014a4 <tempMeas+0x30>
			  measuringTemp = true;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <tempMeas+0x8c>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
			  osDelay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f004 fde2 	bl	8006068 <osDelay>
		  while (heaterOn) {
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <tempMeas+0x90>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f5      	bne.n	8001498 <tempMeas+0x24>
		  }
	  }

	  uint32_t sum = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
	  uint8_t avgCount = 10;
 80014b0:	230a      	movs	r3, #10
 80014b2:	73fb      	strb	r3, [r7, #15]

	  for (int i = 0; i < avgCount; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	e010      	b.n	80014dc <tempMeas+0x68>
		  HAL_ADC_Start(&hadc1);
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <tempMeas+0x94>)
 80014bc:	f001 f8da 	bl	8002674 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 80014c0:	2164      	movs	r1, #100	; 0x64
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <tempMeas+0x94>)
 80014c4:	f001 f939 	bl	800273a <HAL_ADC_PollForConversion>
		  sum += HAL_ADC_GetValue(&hadc1);
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <tempMeas+0x94>)
 80014ca:	f001 f9c5 	bl	8002858 <HAL_ADC_GetValue>
 80014ce:	4602      	mov	r2, r0
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]
	  for (int i = 0; i < avgCount; i++) {
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	3301      	adds	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbea      	blt.n	80014ba <tempMeas+0x46>
	  }



	  currentTemp = sum / avgCount;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <tempMeas+0x98>)
 80014f0:	801a      	strh	r2, [r3, #0]

	  measuringTemp = false;
 80014f2:	4b03      	ldr	r3, [pc, #12]	; (8001500 <tempMeas+0x8c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	  osDelay(100);
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f004 fdb5 	bl	8006068 <osDelay>
  {
 80014fe:	e7bd      	b.n	800147c <tempMeas+0x8>
 8001500:	2000a0b2 	.word	0x2000a0b2
 8001504:	2000a0b1 	.word	0x2000a0b1
 8001508:	2000d230 	.word	0x2000d230
 800150c:	2000a0b4 	.word	0x2000a0b4

08001510 <ironControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ironControl */
void ironControl(void *argument)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	ed2d 8b02 	vpush	{d8}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ironControl */

	// Add startup delay.
	osDelay(3000);
 800151c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001520:	f004 fda2 	bl	8006068 <osDelay>

	// If temperature not reading correctly, reboot
	if (getTemp() > 100) {
 8001524:	f7ff fd20 	bl	8000f68 <getTemp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <ironControl+0x22>
		HAL_NVIC_SystemReset();
 800152e:	f001 fef8 	bl	8003322 <HAL_NVIC_SystemReset>
	}
  /* Infinite loop */
	for (;;) {
		powerLevel = (uint16_t)PID_update(&ironPID, sleepMode ? SLEEP_TEMP : setTemp, getTemp());
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <ironControl+0x108>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <ironControl+0x30>
 800153a:	ed9f 8a38 	vldr	s16, [pc, #224]	; 800161c <ironControl+0x10c>
 800153e:	e005      	b.n	800154c <ironControl+0x3c>
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <ironControl+0x110>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800154c:	f7ff fd0c 	bl	8000f68 <getTemp>
 8001550:	4603      	mov	r3, r0
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155a:	eef0 0a67 	vmov.f32	s1, s15
 800155e:	eeb0 0a48 	vmov.f32	s0, s16
 8001562:	4830      	ldr	r0, [pc, #192]	; (8001624 <ironControl+0x114>)
 8001564:	f000 f9ff 	bl	8001966 <PID_update>
 8001568:	eef0 7a40 	vmov.f32	s15, s0
 800156c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001570:	ee17 3a90 	vmov	r3, s15
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <ironControl+0x118>)
 8001578:	801a      	strh	r2, [r3, #0]

		// Turn off heater if measuring temperature
		if (measuringTemp) {
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <ironControl+0x11c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <ironControl+0x8e>
			heaterOn = false;
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <ironControl+0x120>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f002 fa93 	bl	8003abc <HAL_GPIO_WritePin>
			osDelay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f004 fd66 	bl	8006068 <osDelay>
 800159c:	e7c9      	b.n	8001532 <ironControl+0x22>
		} else {

			// Wait for zero crossing
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) != GPIO_PIN_SET) {
 800159e:	bf00      	nop
 80015a0:	2120      	movs	r1, #32
 80015a2:	4824      	ldr	r0, [pc, #144]	; (8001634 <ironControl+0x124>)
 80015a4:	f002 fa72 	bl	8003a8c <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d1f8      	bne.n	80015a0 <ironControl+0x90>
				;
			}
			osDelay(8);
 80015ae:	2008      	movs	r0, #8
 80015b0:	f004 fd5a 	bl	8006068 <osDelay>

			heaterOn = true;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <ironControl+0x120>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
			uint16_t powerDelay = powerLevel / 10;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <ironControl+0x118>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <ironControl+0x128>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	81fb      	strh	r3, [r7, #14]

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f002 fa73 	bl	8003abc <HAL_GPIO_WritePin>
			osDelay(powerDelay* 10);
 80015d6:	89fa      	ldrh	r2, [r7, #14]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fd41 	bl	8006068 <osDelay>


			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) != GPIO_PIN_SET) {
 80015e6:	bf00      	nop
 80015e8:	2120      	movs	r1, #32
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <ironControl+0x124>)
 80015ec:	f002 fa4e 	bl	8003a8c <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d1f8      	bne.n	80015e8 <ironControl+0xd8>
				;
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f002 fa5c 	bl	8003abc <HAL_GPIO_WritePin>

			osDelay(100 - (powerDelay * 10));
 8001604:	89fb      	ldrh	r3, [r7, #14]
 8001606:	f06f 0209 	mvn.w	r2, #9
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	3364      	adds	r3, #100	; 0x64
 8001610:	4618      	mov	r0, r3
 8001612:	f004 fd29 	bl	8006068 <osDelay>
		powerLevel = (uint16_t)PID_update(&ironPID, sleepMode ? SLEEP_TEMP : setTemp, getTemp());
 8001616:	e78c      	b.n	8001532 <ironControl+0x22>
 8001618:	2000a0b3 	.word	0x2000a0b3
 800161c:	43160000 	.word	0x43160000
 8001620:	2000001c 	.word	0x2000001c
 8001624:	2000d2a8 	.word	0x2000d2a8
 8001628:	2000a0b8 	.word	0x2000a0b8
 800162c:	2000a0b2 	.word	0x2000a0b2
 8001630:	2000a0b1 	.word	0x2000a0b1
 8001634:	48000800 	.word	0x48000800
 8001638:	cccccccd 	.word	0xcccccccd

0800163c <safetyCutoff>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_safetyCutoff */
void safetyCutoff(void *argument)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	for (;;) {


		// If heater is on at full power for over a second without a temperature change....

		if (powerLevel < 90) { // full power >= 90
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <safetyCutoff+0xa0>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	2b59      	cmp	r3, #89	; 0x59
 800164a:	d803      	bhi.n	8001654 <safetyCutoff+0x18>
			osDelay(100);
 800164c:	2064      	movs	r0, #100	; 0x64
 800164e:	f004 fd0b 	bl	8006068 <osDelay>
			continue;
 8001652:	e041      	b.n	80016d8 <safetyCutoff+0x9c>
		}

		// Power level is over 90%
		lastTemp =  getTemp();
 8001654:	f7ff fc88 	bl	8000f68 <getTemp>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <safetyCutoff+0xa4>)
 800165e:	801a      	strh	r2, [r3, #0]
		osDelay(50);
 8001660:	2032      	movs	r0, #50	; 0x32
 8001662:	f004 fd01 	bl	8006068 <osDelay>

		// Check to make sure temp is changing
		uint8_t sameCounter = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]

		for (uint8_t i = 0; i < SAFETY_COUNTER; i++) {
 800166a:	2300      	movs	r3, #0
 800166c:	73bb      	strb	r3, [r7, #14]
 800166e:	e01e      	b.n	80016ae <safetyCutoff+0x72>

			if (abs(lastTemp - getTemp()) <= 1 && powerLevel >= 90) {
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <safetyCutoff+0xa4>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	461c      	mov	r4, r3
 8001676:	f7ff fc77 	bl	8000f68 <getTemp>
 800167a:	4603      	mov	r3, r0
 800167c:	1ae3      	subs	r3, r4, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	bfb8      	it	lt
 8001682:	425b      	neglt	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	dc06      	bgt.n	8001696 <safetyCutoff+0x5a>
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <safetyCutoff+0xa0>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	2b59      	cmp	r3, #89	; 0x59
 800168e:	d902      	bls.n	8001696 <safetyCutoff+0x5a>
				sameCounter++;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
			}

			lastTemp =  getTemp();
 8001696:	f7ff fc67 	bl	8000f68 <getTemp>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <safetyCutoff+0xa4>)
 80016a0:	801a      	strh	r2, [r3, #0]
			osDelay(100);
 80016a2:	2064      	movs	r0, #100	; 0x64
 80016a4:	f004 fce0 	bl	8006068 <osDelay>
		for (uint8_t i = 0; i < SAFETY_COUNTER; i++) {
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	3301      	adds	r3, #1
 80016ac:	73bb      	strb	r3, [r7, #14]
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d9dd      	bls.n	8001670 <safetyCutoff+0x34>
		}

		// reset the MCU if that is the case.
		if (sameCounter >= (SAFETY_COUNTER - 1)) {
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d9c4      	bls.n	8001644 <safetyCutoff+0x8>
			// turn off iron
			heaterOn = false;
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <safetyCutoff+0xa8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
			measuringTemp = true;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <safetyCutoff+0xac>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f002 f9f4 	bl	8003abc <HAL_GPIO_WritePin>

			// Shutdown
			HAL_NVIC_SystemReset();
 80016d4:	f001 fe25 	bl	8003322 <HAL_NVIC_SystemReset>
	for (;;) {
 80016d8:	e7b4      	b.n	8001644 <safetyCutoff+0x8>
 80016da:	bf00      	nop
 80016dc:	2000a0b8 	.word	0x2000a0b8
 80016e0:	2000a0b6 	.word	0x2000a0b6
 80016e4:	2000a0b1 	.word	0x2000a0b1
 80016e8:	2000a0b2 	.word	0x2000a0b2

080016ec <screenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_screenTask */
void screenTask(void *argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN screenTask */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_WritePin(RTP_CS_GPIO, RTP_PIN, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fa:	482f      	ldr	r0, [pc, #188]	; (80017b8 <screenTask+0xcc>)
 80016fc:	f002 f9de 	bl	8003abc <HAL_GPIO_WritePin>



	  ILI9163_newFrame();
 8001700:	f7ff fa66 	bl	8000bd0 <ILI9163_newFrame>
	  ILI9163_fillRect(0,  ILI9163_HEIGHT - 20, map(powerLevel, 100, ILI9163_WIDTH), ILI9163_HEIGHT, ORANGE);
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <screenTask+0xd0>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	22a0      	movs	r2, #160	; 0xa0
 800170c:	2164      	movs	r1, #100	; 0x64
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc10 	bl	8000f34 <map>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	f64f 0311 	movw	r3, #63505	; 0xf811
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	216c      	movs	r1, #108	; 0x6c
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fac2 	bl	8000cac <ILI9163_fillRect>
	  ILI9163_drawRect(0,  ILI9163_HEIGHT - 20, ILI9163_WIDTH, ILI9163_HEIGHT, 1, ORANGE);
 8001728:	f64f 0311 	movw	r3, #63505	; 0xf811
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2301      	movs	r3, #1
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	22a0      	movs	r2, #160	; 0xa0
 8001736:	216c      	movs	r1, #108	; 0x6c
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fae5 	bl	8000d08 <ILI9163_drawRect>


	  if (sleepMode) {
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <screenTask+0xd4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d014      	beq.n	8001770 <screenTask+0x84>
		  ILI9163_fillRect(0,  0, (4 * ILI9163_WIDTH) / 10, 28, GREEN);
 8001746:	230c      	movs	r3, #12
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	231c      	movs	r3, #28
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	2100      	movs	r1, #0
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff faab 	bl	8000cac <ILI9163_fillRect>
		  ILI9163_drawStringF(4, 5, Font_11x18, WHITE, "%s", "SLEEP");
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <screenTask+0xd8>)
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <screenTask+0xdc>)
 800175a:	9202      	str	r2, [sp, #8]
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <screenTask+0xe0>)
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001764:	9200      	str	r2, [sp, #0]
 8001766:	cb0c      	ldmia	r3, {r2, r3}
 8001768:	2105      	movs	r1, #5
 800176a:	2004      	movs	r0, #4
 800176c:	f7ff fb9b 	bl	8000ea6 <ILI9163_drawStringF>
	  }



	  ILI9163_drawStringF(ILI9163_WIDTH - 80, 10, Font_7x10, BLACK, "Set: %hu C", setTemp);
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <screenTask+0xe4>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <screenTask+0xe8>)
 8001778:	9202      	str	r2, [sp, #8]
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <screenTask+0xec>)
 800177c:	9201      	str	r2, [sp, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	9200      	str	r2, [sp, #0]
 8001782:	cb0c      	ldmia	r3, {r2, r3}
 8001784:	210a      	movs	r1, #10
 8001786:	2050      	movs	r0, #80	; 0x50
 8001788:	f7ff fb8d 	bl	8000ea6 <ILI9163_drawStringF>

//	  ILI9163_drawStringF(80, 80, Font_7x10, BLACK, "%humV", currentTemp * 1000 / 1241);
//	  ILI9163_drawStringF(80, 60, Font_7x10, BLACK, "%hu%", powerLevel);
//	  ILI9163_drawStringF(100, 60, Font_7x10, BLACK, "%hu%", (powerLevel / 10)*10);

	  ILI9163_drawStringF(45, 55, Font_16x26, BLACK, "%huC", getTemp());
 800178c:	f7ff fbec 	bl	8000f68 <getTemp>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <screenTask+0xf0>)
 8001796:	9202      	str	r2, [sp, #8]
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <screenTask+0xf4>)
 800179a:	9201      	str	r2, [sp, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	cb0c      	ldmia	r3, {r2, r3}
 80017a2:	2137      	movs	r1, #55	; 0x37
 80017a4:	202d      	movs	r0, #45	; 0x2d
 80017a6:	f7ff fb7e 	bl	8000ea6 <ILI9163_drawStringF>


	  ILI9163_render();
 80017aa:	f7ff fa2d 	bl	8000c08 <ILI9163_render>

	  osDelay(5);
 80017ae:	2005      	movs	r0, #5
 80017b0:	f004 fc5a 	bl	8006068 <osDelay>
	  HAL_GPIO_WritePin(RTP_CS_GPIO, RTP_PIN, 1);
 80017b4:	e79e      	b.n	80016f4 <screenTask+0x8>
 80017b6:	bf00      	nop
 80017b8:	48000400 	.word	0x48000400
 80017bc:	2000a0b8 	.word	0x2000a0b8
 80017c0:	2000a0b3 	.word	0x2000a0b3
 80017c4:	20000008 	.word	0x20000008
 80017c8:	080096f4 	.word	0x080096f4
 80017cc:	080096fc 	.word	0x080096fc
 80017d0:	2000001c 	.word	0x2000001c
 80017d4:	20000000 	.word	0x20000000
 80017d8:	08009700 	.word	0x08009700
 80017dc:	20000010 	.word	0x20000010
 80017e0:	0800970c 	.word	0x0800970c

080017e4 <controlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTask */
void controlTask(void *argument)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTask */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) {
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4832      	ldr	r0, [pc, #200]	; (80018bc <controlTask+0xd8>)
 80017f2:	f002 f94b 	bl	8003a8c <HAL_GPIO_ReadPin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d14a      	bne.n	8001892 <controlTask+0xae>
	  		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET) {
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	482f      	ldr	r0, [pc, #188]	; (80018bc <controlTask+0xd8>)
 8001800:	f002 f944 	bl	8003a8c <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11a      	bne.n	8001840 <controlTask+0x5c>
	  			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){};
 800180a:	bf00      	nop
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	482b      	ldr	r0, [pc, #172]	; (80018bc <controlTask+0xd8>)
 8001810:	f002 f93c 	bl	8003a8c <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f8      	beq.n	800180c <controlTask+0x28>
	  			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) {};
 800181a:	bf00      	nop
 800181c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001820:	4826      	ldr	r0, [pc, #152]	; (80018bc <controlTask+0xd8>)
 8001822:	f002 f933 	bl	8003a8c <HAL_GPIO_ReadPin>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f7      	beq.n	800181c <controlTask+0x38>

	  			setTemp -= 5;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <controlTask+0xdc>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	3b05      	subs	r3, #5
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <controlTask+0xdc>)
 8001836:	801a      	strh	r2, [r3, #0]
	  			osDelay(1);
 8001838:	2001      	movs	r0, #1
 800183a:	f004 fc15 	bl	8006068 <osDelay>
 800183e:	e028      	b.n	8001892 <controlTask+0xae>



	  		}
	  		else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) {
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	481e      	ldr	r0, [pc, #120]	; (80018bc <controlTask+0xd8>)
 8001844:	f002 f922 	bl	8003a8c <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	2b01      	cmp	r3, #1
 800184c:	d121      	bne.n	8001892 <controlTask+0xae>
	  			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) {};
 800184e:	bf00      	nop
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	481a      	ldr	r0, [pc, #104]	; (80018bc <controlTask+0xd8>)
 8001854:	f002 f91a 	bl	8003a8c <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d0f8      	beq.n	8001850 <controlTask+0x6c>
				while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) {};
 800185e:	bf00      	nop
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	4815      	ldr	r0, [pc, #84]	; (80018bc <controlTask+0xd8>)
 8001866:	f002 f911 	bl	8003a8c <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f7      	beq.n	8001860 <controlTask+0x7c>
				while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET) {};
 8001870:	bf00      	nop
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <controlTask+0xd8>)
 8001876:	f002 f909 	bl	8003a8c <HAL_GPIO_ReadPin>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f8      	beq.n	8001872 <controlTask+0x8e>

				setTemp += 5;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <controlTask+0xdc>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	3305      	adds	r3, #5
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <controlTask+0xdc>)
 800188a:	801a      	strh	r2, [r3, #0]



				osDelay(1);
 800188c:	2001      	movs	r0, #1
 800188e:	f004 fbeb 	bl	8006068 <osDelay>


			}
	  	}
	  if (setTemp >= 450) {
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <controlTask+0xdc>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800189a:	d304      	bcc.n	80018a6 <controlTask+0xc2>
		  setTemp = 450;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <controlTask+0xdc>)
 800189e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80018a2:	801a      	strh	r2, [r3, #0]
 80018a4:	e006      	b.n	80018b4 <controlTask+0xd0>
	  } else if (setTemp <= 0) {
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <controlTask+0xdc>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <controlTask+0xd0>
		  setTemp = 0;
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <controlTask+0xdc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
	  }

    osDelay(1);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f004 fbd7 	bl	8006068 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) {
 80018ba:	e797      	b.n	80017ec <controlTask+0x8>
 80018bc:	48000800 	.word	0x48000800
 80018c0:	2000001c 	.word	0x2000001c

080018c4 <zeroCrossing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_zeroCrossing */
void zeroCrossing(void *argument)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN zeroCrossing */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET) {
 80018cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <zeroCrossing+0x30>)
 80018d2:	f002 f8db 	bl	8003a8c <HAL_GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <zeroCrossing+0x20>
		  sleepMode = true;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <zeroCrossing+0x34>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e002      	b.n	80018ea <zeroCrossing+0x26>
	  } else {
		  sleepMode = false;
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <zeroCrossing+0x34>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
//		  canSwitch = false;
////		  osSemaphoreAcquire(zeroCrossingSemaphoreHandle, osWaitForever);
//		  b++;
//		  // Cannot switch here
//	  }
	  osDelay(5);
 80018ea:	2005      	movs	r0, #5
 80018ec:	f004 fbbc 	bl	8006068 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET) {
 80018f0:	e7ec      	b.n	80018cc <zeroCrossing+0x8>
 80018f2:	bf00      	nop
 80018f4:	48000400 	.word	0x48000400
 80018f8:	2000a0b3 	.word	0x2000a0b3

080018fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800190e:	f000 fb47 	bl	8001fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40001000 	.word	0x40001000

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	e7fe      	b.n	8001928 <Error_Handler+0x8>

0800192a <PID_init>:
 *      Author: Matt Gilpin
 */

#include "pid.h"

void PID_init(PIDController *pid) {
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	pid->integrator = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
	pid->prevErr = 0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	621a      	str	r2, [r3, #32]

	pid->differntiator = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeas = 0;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
	pid->out = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c

}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PID_update>:


float PID_update(PIDController *pid, float setpoint, float measurement) {
 8001966:	b480      	push	{r7}
 8001968:	b08b      	sub	sp, #44	; 0x2c
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001972:	edc7 0a01 	vstr	s1, [r7, #4]
	// Error
	float error = setpoint - measurement;
 8001976:	ed97 7a02 	vldr	s14, [r7, #8]
 800197a:	edd7 7a01 	vldr	s15, [r7, #4]
 800197e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001982:	edc7 7a07 	vstr	s15, [r7, #28]

	float proportional = pid->Kp * error;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	edc7 7a06 	vstr	s15, [r7, #24]

	pid->integrator = pid->integrator + (pid->Ki * pid->T / 2 ) * (error + pid->prevErr);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	ed93 7a07 	vldr	s14, [r3, #28]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80019b2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	ed93 6a08 	vldr	s12, [r3, #32]
 80019bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80019c0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80019c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edc3 7a07 	vstr	s15, [r3, #28]


	// Anti-windup
	float limMinInt, limMaxInt;

	if (pid->max > proportional) {
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80019dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	d509      	bpl.n	80019fa <PID_update+0x94>
		limMaxInt = pid->max - proportional;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	ed93 7a05 	vldr	s14, [r3, #20]
 80019ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80019f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f4:	edc7 7a08 	vstr	s15, [r7, #32]
 80019f8:	e002      	b.n	8001a00 <PID_update+0x9a>
	} else {
		limMaxInt = 0;
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
	}

	if (pid->min < proportional) {
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a06:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	dd09      	ble.n	8001a28 <PID_update+0xc2>
		limMinInt = pid->min - proportional;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001a26:	e002      	b.n	8001a2e <PID_update+0xc8>
	} else {
		limMinInt = 0;
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
	}


	// Clamp integrator

	if (pid->integrator > limMaxInt) {
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a34:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	d503      	bpl.n	8001a4a <PID_update+0xe4>
		pid->integrator = limMaxInt;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a3a      	ldr	r2, [r7, #32]
 8001a46:	61da      	str	r2, [r3, #28]
 8001a48:	e00c      	b.n	8001a64 <PID_update+0xfe>
	} else if (pid->integrator < limMinInt) {
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	dd02      	ble.n	8001a64 <PID_update+0xfe>
		pid->integrator = limMinInt;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	61da      	str	r2, [r3, #28]
	}



	float diffTerm1 = (2 * pid->tau - pid->T) / (2 * pid->tau + pid->T) * pid->differntiator;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a6a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a74:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9a:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->differntiator = 2 * pid->Kd * (measurement - pid->prevMeas) + diffTerm1;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aa4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aae:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ab2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	// Sum of terms
	pid->out = proportional + pid->integrator + pid->differntiator;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ace:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	if (pid->out > pid->max) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	edd3 7a05 	vldr	s15, [r3, #20]
 8001af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	dd04      	ble.n	8001b06 <PID_update+0x1a0>
		pid->out = pid->max;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b04:	e00e      	b.n	8001b24 <PID_update+0x1be>
	} else if (pid->out < pid->min) {
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d503      	bpl.n	8001b24 <PID_update+0x1be>
		pid->out = pid->min;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	pid->prevErr = error;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	621a      	str	r2, [r3, #32]
	pid->prevMeas = measurement;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28

	return pid->out;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	ee07 3a90 	vmov	s15, r3

}
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	372c      	adds	r7, #44	; 0x2c
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6593      	str	r3, [r2, #88]	; 0x58
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	210f      	movs	r1, #15
 8001b82:	f06f 0001 	mvn.w	r0, #1
 8001b86:	f001 fba2 	bl	80032ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0a2      	sub	sp, #136	; 0x88
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2264      	movs	r2, #100	; 0x64
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f007 f8a9 	bl	8008d10 <memset>
  if(hadc->Instance==ADC1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_ADC_MspInit+0xc0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d142      	bne.n	8001c4e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bcc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bd2:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001be0:	2307      	movs	r3, #7
 8001be2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fe1e 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001c02:	f7ff fe8d 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_ADC_MspInit+0xc4>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <HAL_ADC_MspInit+0xc4>)
 8001c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_ADC_MspInit+0xc4>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_ADC_MspInit+0xc4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_ADC_MspInit+0xc4>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_ADC_MspInit+0xc4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c36:	2301      	movs	r3, #1
 8001c38:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c3a:	230b      	movs	r3, #11
 8001c3c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_ADC_MspInit+0xc8>)
 8001c4a:	f001 fda5 	bl	8003798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3788      	adds	r7, #136	; 0x88
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	50040000 	.word	0x50040000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	48000800 	.word	0x48000800

08001c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2d      	ldr	r2, [pc, #180]	; (8001d38 <HAL_SPI_MspInit+0xd4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d153      	bne.n	8001d2e <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_SPI_MspInit+0xd8>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	4a2c      	ldr	r2, [pc, #176]	; (8001d3c <HAL_SPI_MspInit+0xd8>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6593      	str	r3, [r2, #88]	; 0x58
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_SPI_MspInit+0xd8>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_SPI_MspInit+0xd8>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <HAL_SPI_MspInit+0xd8>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_SPI_MspInit+0xd8>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc8:	2305      	movs	r3, #5
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481b      	ldr	r0, [pc, #108]	; (8001d40 <HAL_SPI_MspInit+0xdc>)
 8001cd4:	f001 fd60 	bl	8003798 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001cda:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_SPI_MspInit+0xe4>)
 8001cdc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001d08:	2220      	movs	r2, #32
 8001d0a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001d14:	f001 fb0a 	bl	800332c <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8001d1e:	f7ff fdff 	bl	8001920 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_SPI_MspInit+0xe0>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40003800 	.word	0x40003800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	48000400 	.word	0x48000400
 8001d44:	2000d2d8 	.word	0x2000d2d8
 8001d48:	40020058 	.word	0x40020058

08001d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	2036      	movs	r0, #54	; 0x36
 8001d62:	f001 fab4 	bl	80032ce <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d66:	2036      	movs	r0, #54	; 0x36
 8001d68:	f001 facd 	bl	8003306 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_InitTick+0x9c>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_InitTick+0x9c>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_InitTick+0x9c>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d84:	f107 0210 	add.w	r2, r7, #16
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fcc0 	bl	8004714 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d94:	f002 fca8 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8001d98:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <HAL_InitTick+0xa0>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9b      	lsrs	r3, r3, #18
 8001da4:	3b01      	subs	r3, #1
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_InitTick+0xa4>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_InitTick+0xa8>)
 8001dac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_InitTick+0xa4>)
 8001db0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001db4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_InitTick+0xa4>)
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_InitTick+0xa4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_InitTick+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001dc8:	4809      	ldr	r0, [pc, #36]	; (8001df0 <HAL_InitTick+0xa4>)
 8001dca:	f003 fd9b 	bl	8005904 <HAL_TIM_Base_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001dd4:	4806      	ldr	r0, [pc, #24]	; (8001df0 <HAL_InitTick+0xa4>)
 8001dd6:	f003 fdf7 	bl	80059c8 <HAL_TIM_Base_Start_IT>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3730      	adds	r7, #48	; 0x30
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	431bde83 	.word	0x431bde83
 8001df0:	2000d324 	.word	0x2000d324
 8001df4:	40001000 	.word	0x40001000

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <DMA1_Channel5_IRQHandler+0x10>)
 8001e2a:	f001 fbd5 	bl	80035d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000d2d8 	.word	0x2000d2d8

08001e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM6_DAC_IRQHandler+0x10>)
 8001e3e:	f003 fe1f 	bl	8005a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000d324 	.word	0x2000d324

08001e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <_sbrk+0x5c>)
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <_sbrk+0x60>)
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <_sbrk+0x64>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <_sbrk+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d207      	bcs.n	8001e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e7c:	f006 ff0e 	bl	8008c9c <__errno>
 8001e80:	4603      	mov	r3, r0
 8001e82:	220c      	movs	r2, #12
 8001e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	e009      	b.n	8001ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <_sbrk+0x64>)
 8001e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20020000 	.word	0x20020000
 8001eac:	00000400 	.word	0x00000400
 8001eb0:	2000a0bc 	.word	0x2000a0bc
 8001eb4:	2000d3c8 	.word	0x2000d3c8

08001eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <SystemInit+0x5c>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <SystemInit+0x5c>)
 8001ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <SystemInit+0x60>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <SystemInit+0x60>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <SystemInit+0x60>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <SystemInit+0x60>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <SystemInit+0x60>)
 8001ee4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ee8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001eec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <SystemInit+0x60>)
 8001ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <SystemInit+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <SystemInit+0x60>)
 8001efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SystemInit+0x60>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00
 8001f18:	40021000 	.word	0x40021000

08001f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f20:	f7ff ffca 	bl	8001eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f26:	e003      	b.n	8001f30 <LoopCopyDataInit>

08001f28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f2e:	3104      	adds	r1, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f38:	d3f6      	bcc.n	8001f28 <CopyDataInit>
	ldr	r2, =_sbss
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f3c:	e002      	b.n	8001f44 <LoopFillZerobss>

08001f3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f40:	f842 3b04 	str.w	r3, [r2], #4

08001f44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <LoopForever+0x16>)
	cmp	r2, r3
 8001f46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f48:	d3f9      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f006 fead 	bl	8008ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4e:	f7ff f847 	bl	8000fe0 <main>

08001f52 <LoopForever>:

LoopForever:
    b LoopForever
 8001f52:	e7fe      	b.n	8001f52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f54:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8001f58:	0800c10c 	.word	0x0800c10c
	ldr	r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f60:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8001f64:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 8001f68:	2000d3c4 	.word	0x2000d3c4

08001f6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_IRQHandler>

08001f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f001 f99d 	bl	80032b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f7ff fee4 	bl	8001d4c <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	71fb      	strb	r3, [r7, #7]
 8001f8e:	e001      	b.n	8001f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f90:	f7ff fdda 	bl	8001b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f94:	79fb      	ldrb	r3, [r7, #7]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000028 	.word	0x20000028
 8001fc4:	2000d370 	.word	0x2000d370

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000d370 	.word	0x2000d370

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000028 	.word	0x20000028

08002028 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3360      	adds	r3, #96	; 0x60
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <LL_ADC_SetOffset+0x44>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	4313      	orrs	r3, r2
 80020c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	03fff000 	.word	0x03fff000

080020d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	461a      	mov	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	431a      	orrs	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	615a      	str	r2, [r3, #20]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002186:	b480      	push	{r7}
 8002188:	b087      	sub	sp, #28
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3330      	adds	r3, #48	; 0x30
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	4413      	add	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	211f      	movs	r1, #31
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	401a      	ands	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	f003 011f 	and.w	r1, r3, #31
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	431a      	orrs	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021de:	b480      	push	{r7}
 80021e0:	b087      	sub	sp, #28
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3314      	adds	r3, #20
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	0e5b      	lsrs	r3, r3, #25
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	4413      	add	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	0d1b      	lsrs	r3, r3, #20
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2107      	movs	r1, #7
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	0d1b      	lsrs	r3, r3, #20
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	431a      	orrs	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002228:	bf00      	nop
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0318 	and.w	r3, r3, #24
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002258:	40d9      	lsrs	r1, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	400b      	ands	r3, r1
 800225e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002262:	431a      	orrs	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	0007ffff 	.word	0x0007ffff

0800227c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800228c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6093      	str	r3, [r2, #8]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b4:	d101      	bne.n	80022ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002304:	d101      	bne.n	800230a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <LL_ADC_IsEnabled+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_ADC_IsEnabled+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002376:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d101      	bne.n	80023a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d101      	bne.n	80023cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e12f      	b.n	8002656 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fbc7 	bl	8001b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff3f 	bl	80022a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff25 	bl	800227c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff5a 	bl	80022f0 <LL_ADC_IsInternalRegulatorEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff3e 	bl	80022c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244c:	4b84      	ldr	r3, [pc, #528]	; (8002660 <HAL_ADC_Init+0x284>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	4a84      	ldr	r2, [pc, #528]	; (8002664 <HAL_ADC_Init+0x288>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002460:	e002      	b.n	8002468 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff3c 	bl	80022f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff75 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80024a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80c8 	bne.w	8002644 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 80c4 	bne.w	8002644 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff35 	bl	8002340 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024dc:	4862      	ldr	r0, [pc, #392]	; (8002668 <HAL_ADC_Init+0x28c>)
 80024de:	f7ff ff2f 	bl	8002340 <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	485f      	ldr	r0, [pc, #380]	; (800266c <HAL_ADC_Init+0x290>)
 80024f0:	f7ff fd9a 	bl	8002028 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e5b      	ldrb	r3, [r3, #25]
 80024f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002504:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800250a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002512:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d106      	bne.n	8002530 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	3b01      	subs	r3, #1
 8002528:	045b      	lsls	r3, r3, #17
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_ADC_Init+0x294>)
 8002554:	4013      	ands	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	430b      	orrs	r3, r1
 800255e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff12 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 800256a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff1f 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 8002576:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d140      	bne.n	8002600 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13d      	bne.n	8002600 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7e1b      	ldrb	r3, [r3, #24]
 800258c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800258e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002596:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a6:	f023 0306 	bic.w	r3, r3, #6
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	69b9      	ldr	r1, [r7, #24]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d118      	bne.n	80025f0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025e0:	430a      	orrs	r2, r1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	611a      	str	r2, [r3, #16]
 80025ee:	e007      	b.n	8002600 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f023 010f 	bic.w	r1, r3, #15
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020f 	bic.w	r2, r2, #15
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	659a      	str	r2, [r3, #88]	; 0x58
 8002642:	e007      	b.n	8002654 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f043 0210 	orr.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002654:	7ffb      	ldrb	r3, [r7, #31]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000020 	.word	0x20000020
 8002664:	053e2d63 	.word	0x053e2d63
 8002668:	50040000 	.word	0x50040000
 800266c:	50040300 	.word	0x50040300
 8002670:	fff0c007 	.word	0xfff0c007

08002674 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe84 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d14f      	bne.n	800272c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADC_Start+0x26>
 8002696:	2302      	movs	r3, #2
 8002698:	e04b      	b.n	8002732 <HAL_ADC_Start+0xbe>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fce2 	bl	800306c <ADC_Enable>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d137      	bne.n	8002722 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	d106      	bne.n	80026e2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	f023 0206 	bic.w	r2, r3, #6
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c
 80026e0:	e002      	b.n	80026e8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	221c      	movs	r2, #28
 80026ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800270e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fe23 	bl	8002366 <LL_ADC_REG_StartConversion>
 8002720:	e006      	b.n	8002730 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800272a:	e001      	b.n	8002730 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800272c:	2302      	movs	r3, #2
 800272e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d102      	bne.n	8002752 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800274c:	2308      	movs	r3, #8
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	e010      	b.n	8002774 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e06f      	b.n	8002850 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002770:	2304      	movs	r3, #4
 8002772:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002774:	f7ff fc28 	bl	8001fc8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800277a:	e021      	b.n	80027c0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d01d      	beq.n	80027c0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002784:	f7ff fc20 	bl	8001fc8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d302      	bcc.n	800279a <HAL_ADC_PollForConversion+0x60>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d112      	bne.n	80027c0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10b      	bne.n	80027c0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e047      	b.n	8002850 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0d6      	beq.n	800277c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fcbe 	bl	8002160 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01c      	beq.n	8002824 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7e5b      	ldrb	r3, [r3, #25]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d111      	bne.n	8002824 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b08      	cmp	r3, #8
 8002830:	d104      	bne.n	800283c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2208      	movs	r2, #8
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e008      	b.n	800284e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d103      	bne.n	800284e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	220c      	movs	r2, #12
 800284c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b0b6      	sub	sp, #216	; 0xd8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x22>
 8002892:	2302      	movs	r3, #2
 8002894:	e3d5      	b.n	8003042 <HAL_ADC_ConfigChannel+0x7ce>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fd73 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 83ba 	bne.w	8003024 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d824      	bhi.n	8002902 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	3b02      	subs	r3, #2
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d81b      	bhi.n	80028fa <HAL_ADC_ConfigChannel+0x86>
 80028c2:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <HAL_ADC_ConfigChannel+0x54>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028e1 	.word	0x080028e1
 80028d0:	080028e9 	.word	0x080028e9
 80028d4:	080028f1 	.word	0x080028f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	220c      	movs	r2, #12
 80028dc:	605a      	str	r2, [r3, #4]
          break;
 80028de:	e011      	b.n	8002904 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2212      	movs	r2, #18
 80028e4:	605a      	str	r2, [r3, #4]
          break;
 80028e6:	e00d      	b.n	8002904 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2218      	movs	r2, #24
 80028ec:	605a      	str	r2, [r3, #4]
          break;
 80028ee:	e009      	b.n	8002904 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f6:	605a      	str	r2, [r3, #4]
          break;
 80028f8:	e004      	b.n	8002904 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2206      	movs	r2, #6
 80028fe:	605a      	str	r2, [r3, #4]
          break;
 8002900:	e000      	b.n	8002904 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002902:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	f7ff fc38 	bl	8002186 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fd37 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 8002920:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fd43 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 800292e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002932:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 81c1 	bne.w	8002cbe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800293c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 81bc 	bne.w	8002cbe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800294e:	d10f      	bne.n	8002970 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	4619      	mov	r1, r3
 800295c:	f7ff fc3f 	bl	80021de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fbe6 	bl	800213a <LL_ADC_SetSamplingTimeCommonConfig>
 800296e:	e00e      	b.n	800298e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	461a      	mov	r2, r3
 800297e:	f7ff fc2e 	bl	80021de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fbd6 	bl	800213a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d00a      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6919      	ldr	r1, [r3, #16]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029c0:	f7ff fb66 	bl	8002090 <LL_ADC_SetOffset>
 80029c4:	e17b      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fb83 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x17e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fb78 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	e01e      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1bc>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fb6d 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e004      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d4>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	e018      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x206>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e004      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d106      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fb3c 	bl	8002104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fb20 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x244>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fb15 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	f003 021f 	and.w	r2, r3, #31
 8002ab6:	e01e      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x282>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fb0a 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e004      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x29a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	e018      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x2cc>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e004      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fad9 	bl	8002104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fabd 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x30a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fab2 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	e01e      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x348>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2102      	movs	r1, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff faa7 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e004      	b.n	8002bba <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x360>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	e016      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x38e>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e004      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d106      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fa78 	bl	8002104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2103      	movs	r1, #3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fa5c 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x3cc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2103      	movs	r1, #3
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fa51 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	f003 021f 	and.w	r2, r3, #31
 8002c3e:	e017      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x3fc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2103      	movs	r1, #3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fa46 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c5a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002c62:	2320      	movs	r3, #32
 8002c64:	e003      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x414>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	e011      	b.n	8002cac <HAL_ADC_ConfigChannel+0x438>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e003      	b.n	8002cac <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2103      	movs	r1, #3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fa23 	bl	8002104 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fb3c 	bl	8002340 <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 8140 	bne.w	8002f50 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f7ff faa9 	bl	8002234 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4a8f      	ldr	r2, [pc, #572]	; (8002f24 <HAL_ADC_ConfigChannel+0x6b0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	f040 8131 	bne.w	8002f50 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x4a2>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	3301      	adds	r3, #1
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2b09      	cmp	r3, #9
 8002d0c:	bf94      	ite	ls
 8002d0e:	2301      	movls	r3, #1
 8002d10:	2300      	movhi	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	e019      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x4d6>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e003      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d079      	beq.n	8002e42 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x4f6>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	3301      	adds	r3, #1
 8002d62:	069b      	lsls	r3, r3, #26
 8002d64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d68:	e015      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x522>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002d82:	2320      	movs	r3, #32
 8002d84:	e003      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	069b      	lsls	r3, r3, #26
 8002d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x542>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	e017      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x572>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	e003      	b.n	8002dda <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	ea42 0103 	orr.w	r1, r2, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x598>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f003 021f 	and.w	r2, r3, #31
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	051b      	lsls	r3, r3, #20
 8002e0a:	e018      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x5ca>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e003      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f003 021f 	and.w	r2, r3, #31
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	e081      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x5ea>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0e9b      	lsrs	r3, r3, #26
 8002e54:	3301      	adds	r3, #1
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e5c:	e015      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x616>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e003      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	069b      	lsls	r3, r3, #26
 8002e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x636>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	e017      	b.n	8002eda <HAL_ADC_ConfigChannel+0x666>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e003      	b.n	8002ece <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	ea42 0103 	orr.w	r1, r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x692>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 021f 	and.w	r2, r3, #31
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	3b1e      	subs	r3, #30
 8002efe:	051b      	lsls	r3, r3, #20
 8002f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f04:	e01e      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x6d0>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	613b      	str	r3, [r7, #16]
  return result;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e006      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x6bc>
 8002f22:	bf00      	nop
 8002f24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 021f 	and.w	r2, r3, #31
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b1e      	subs	r3, #30
 8002f3e:	051b      	lsls	r3, r3, #20
 8002f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f44:	430b      	orrs	r3, r1
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7ff f947 	bl	80021de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_ADC_ConfigChannel+0x7d8>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d06c      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5c:	483c      	ldr	r0, [pc, #240]	; (8003050 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f5e:	f7ff f889 	bl	8002074 <LL_ADC_GetCommonPathInternalCh>
 8002f62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d127      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d121      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a35      	ldr	r2, [pc, #212]	; (8003058 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d157      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f8e:	4619      	mov	r1, r3
 8002f90:	482f      	ldr	r0, [pc, #188]	; (8003050 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f92:	f7ff f85c 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f96:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_ADC_ConfigChannel+0x7e8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fb0:	e002      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f9      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fbe:	e03a      	b.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_ADC_ConfigChannel+0x7f0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d113      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x77e>
 8002fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_ADC_ConfigChannel+0x7e4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d12a      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4819      	ldr	r0, [pc, #100]	; (8003050 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fec:	f7ff f82f 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff0:	e021      	b.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_ADC_ConfigChannel+0x7f4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d11c      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_ADC_ConfigChannel+0x7e4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d111      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800301a:	4619      	mov	r1, r3
 800301c:	480c      	ldr	r0, [pc, #48]	; (8003050 <HAL_ADC_ConfigChannel+0x7dc>)
 800301e:	f7ff f816 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
 8003022:	e008      	b.n	8003036 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800303e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003042:	4618      	mov	r0, r3
 8003044:	37d8      	adds	r7, #216	; 0xd8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	80080000 	.word	0x80080000
 8003050:	50040300 	.word	0x50040300
 8003054:	c7520000 	.word	0xc7520000
 8003058:	50040000 	.word	0x50040000
 800305c:	20000020 	.word	0x20000020
 8003060:	053e2d63 	.word	0x053e2d63
 8003064:	cb840000 	.word	0xcb840000
 8003068:	80000001 	.word	0x80000001

0800306c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f961 	bl	8002340 <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d14d      	bne.n	8003120 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <ADC_Enable+0xc0>)
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e039      	b.n	8003122 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f930 	bl	8002318 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030b8:	f7fe ff86 	bl	8001fc8 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030be:	e028      	b.n	8003112 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff f93b 	bl	8002340 <LL_ADC_IsEnabled>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f91f 	bl	8002318 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030da:	f7fe ff75 	bl	8001fc8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d914      	bls.n	8003112 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d00d      	beq.n	8003112 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e007      	b.n	8003122 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d1cf      	bne.n	80030c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	8000003f 	.word	0x8000003f

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003290:	f3bf 8f4f 	dsb	sy
}
 8003294:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <__NVIC_SystemReset+0x24>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800329e:	4904      	ldr	r1, [pc, #16]	; (80032b0 <__NVIC_SystemReset+0x24>)
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <__NVIC_SystemReset+0x28>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80032a6:	f3bf 8f4f 	dsb	sy
}
 80032aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <__NVIC_SystemReset+0x20>
 80032b0:	e000ed00 	.word	0xe000ed00
 80032b4:	05fa0004 	.word	0x05fa0004

080032b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff35 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032e0:	f7ff ff4a 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f7ff ff9a 	bl	8003224 <NVIC_EncodePriority>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff69 	bl	80031d0 <__NVIC_SetPriority>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff3d 	bl	8003194 <__NVIC_EnableIRQ>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003326:	f7ff ffb1 	bl	800328c <__NVIC_SystemReset>
	...

0800332c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e098      	b.n	8003470 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4b4d      	ldr	r3, [pc, #308]	; (800347c <HAL_DMA_Init+0x150>)
 8003346:	429a      	cmp	r2, r3
 8003348:	d80f      	bhi.n	800336a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_DMA_Init+0x154>)
 8003352:	4413      	add	r3, r2
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <HAL_DMA_Init+0x158>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	009a      	lsls	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a48      	ldr	r2, [pc, #288]	; (8003488 <HAL_DMA_Init+0x15c>)
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
 8003368:	e00e      	b.n	8003388 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_DMA_Init+0x160>)
 8003372:	4413      	add	r3, r2
 8003374:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_DMA_Init+0x158>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a42      	ldr	r2, [pc, #264]	; (8003490 <HAL_DMA_Init+0x164>)
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e2:	d039      	beq.n	8003458 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	4a27      	ldr	r2, [pc, #156]	; (8003488 <HAL_DMA_Init+0x15c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d11a      	bne.n	8003424 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <HAL_DMA_Init+0x168>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f003 031c 	and.w	r3, r3, #28
 80033fa:	210f      	movs	r1, #15
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	4924      	ldr	r1, [pc, #144]	; (8003494 <HAL_DMA_Init+0x168>)
 8003404:	4013      	ands	r3, r2
 8003406:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <HAL_DMA_Init+0x168>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f003 031c 	and.w	r3, r3, #28
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	491d      	ldr	r1, [pc, #116]	; (8003494 <HAL_DMA_Init+0x168>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
 8003422:	e019      	b.n	8003458 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003424:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_DMA_Init+0x16c>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f003 031c 	and.w	r3, r3, #28
 8003430:	210f      	movs	r1, #15
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	4917      	ldr	r1, [pc, #92]	; (8003498 <HAL_DMA_Init+0x16c>)
 800343a:	4013      	ands	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_DMA_Init+0x16c>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f003 031c 	and.w	r3, r3, #28
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	4911      	ldr	r1, [pc, #68]	; (8003498 <HAL_DMA_Init+0x16c>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40020407 	.word	0x40020407
 8003480:	bffdfff8 	.word	0xbffdfff8
 8003484:	cccccccd 	.word	0xcccccccd
 8003488:	40020000 	.word	0x40020000
 800348c:	bffdfbf8 	.word	0xbffdfbf8
 8003490:	40020400 	.word	0x40020400
 8003494:	400200a8 	.word	0x400200a8
 8003498:	400204a8 	.word	0x400204a8

0800349c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_DMA_Start_IT+0x20>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e04b      	b.n	8003554 <HAL_DMA_Start_IT+0xb8>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d13a      	bne.n	8003546 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f91e 	bl	8003736 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 020e 	orr.w	r2, r2, #14
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e00f      	b.n	8003534 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 020a 	orr.w	r2, r2, #10
 8003532:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e005      	b.n	8003552 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d008      	beq.n	8003586 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2204      	movs	r2, #4
 8003578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e022      	b.n	80035cc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 020e 	bic.w	r2, r2, #14
 8003594:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f003 021c 	and.w	r2, r3, #28
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2101      	movs	r1, #1
 80035b4:	fa01 f202 	lsl.w	r2, r1, r2
 80035b8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f4:	f003 031c 	and.w	r3, r3, #28
 80035f8:	2204      	movs	r2, #4
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d026      	beq.n	8003652 <HAL_DMA_IRQHandler+0x7a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d021      	beq.n	8003652 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f003 021c 	and.w	r2, r3, #28
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2104      	movs	r1, #4
 800363a:	fa01 f202 	lsl.w	r2, r1, r2
 800363e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	2b00      	cmp	r3, #0
 8003646:	d071      	beq.n	800372c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003650:	e06c      	b.n	800372c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f003 031c 	and.w	r3, r3, #28
 800365a:	2202      	movs	r2, #2
 800365c:	409a      	lsls	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0xec>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d029      	beq.n	80036c4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 020a 	bic.w	r2, r2, #10
 800368c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f003 021c 	and.w	r2, r3, #28
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2102      	movs	r1, #2
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d038      	beq.n	800372c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036c2:	e033      	b.n	800372c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f003 031c 	and.w	r3, r3, #28
 80036cc:	2208      	movs	r2, #8
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02a      	beq.n	800372e <HAL_DMA_IRQHandler+0x156>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d025      	beq.n	800372e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 020e 	bic.w	r2, r2, #14
 80036f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f003 021c 	and.w	r2, r3, #28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800372c:	bf00      	nop
 800372e:	bf00      	nop
}
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f003 021c 	and.w	r2, r3, #28
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d108      	bne.n	800377a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003778:	e007      	b.n	800378a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	60da      	str	r2, [r3, #12]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a6:	e154      	b.n	8003a52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8146 	beq.w	8003a4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d00b      	beq.n	80037e0 <HAL_GPIO_Init+0x48>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d007      	beq.n	80037e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037d4:	2b11      	cmp	r3, #17
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b12      	cmp	r3, #18
 80037de:	d130      	bne.n	8003842 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	2203      	movs	r2, #3
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003816:	2201      	movs	r2, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0201 	and.w	r2, r3, #1
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0xea>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b12      	cmp	r3, #18
 8003880:	d123      	bne.n	80038ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	08da      	lsrs	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3208      	adds	r2, #8
 800388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80a0 	beq.w	8003a4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390c:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <HAL_GPIO_Init+0x2d8>)
 800390e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_GPIO_Init+0x2d8>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6613      	str	r3, [r2, #96]	; 0x60
 8003918:	4b55      	ldr	r3, [pc, #340]	; (8003a70 <HAL_GPIO_Init+0x2d8>)
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003924:	4a53      	ldr	r2, [pc, #332]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800394e:	d019      	beq.n	8003984 <HAL_GPIO_Init+0x1ec>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a49      	ldr	r2, [pc, #292]	; (8003a78 <HAL_GPIO_Init+0x2e0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_GPIO_Init+0x1e8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a48      	ldr	r2, [pc, #288]	; (8003a7c <HAL_GPIO_Init+0x2e4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00d      	beq.n	800397c <HAL_GPIO_Init+0x1e4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a47      	ldr	r2, [pc, #284]	; (8003a80 <HAL_GPIO_Init+0x2e8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <HAL_GPIO_Init+0x1e0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <HAL_GPIO_Init+0x2ec>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_GPIO_Init+0x1dc>
 8003970:	2304      	movs	r3, #4
 8003972:	e008      	b.n	8003986 <HAL_GPIO_Init+0x1ee>
 8003974:	2307      	movs	r3, #7
 8003976:	e006      	b.n	8003986 <HAL_GPIO_Init+0x1ee>
 8003978:	2303      	movs	r3, #3
 800397a:	e004      	b.n	8003986 <HAL_GPIO_Init+0x1ee>
 800397c:	2302      	movs	r3, #2
 800397e:	e002      	b.n	8003986 <HAL_GPIO_Init+0x1ee>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_GPIO_Init+0x1ee>
 8003984:	2300      	movs	r3, #0
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	f002 0203 	and.w	r2, r2, #3
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	4093      	lsls	r3, r2
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003996:	4937      	ldr	r1, [pc, #220]	; (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3302      	adds	r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039a4:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039f2:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039f8:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a1c:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a46:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <HAL_GPIO_Init+0x2f0>)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f47f aea3 	bne.w	80037a8 <HAL_GPIO_Init+0x10>
  }
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40010000 	.word	0x40010000
 8003a78:	48000400 	.word	0x48000400
 8003a7c:	48000800 	.word	0x48000800
 8003a80:	48000c00 	.word	0x48000c00
 8003a84:	48001000 	.word	0x48001000
 8003a88:	40010400 	.word	0x40010400

08003a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e001      	b.n	8003aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003acc:	787b      	ldrb	r3, [r7, #1]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ad8:	e002      	b.n	8003ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40007000 	.word	0x40007000

08003b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b16:	d130      	bne.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b24:	d038      	beq.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2232      	movs	r2, #50	; 0x32
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0c9b      	lsrs	r3, r3, #18
 8003b48:	3301      	adds	r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b4c:	e002      	b.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b60:	d102      	bne.n	8003b68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f2      	bne.n	8003b4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b74:	d110      	bne.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e00f      	b.n	8003b9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b86:	d007      	beq.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b90:	4a05      	ldr	r2, [pc, #20]	; (8003ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	20000020 	.word	0x20000020
 8003bb0:	431bde83 	.word	0x431bde83

08003bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f000 bc11 	b.w	80043ea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc8:	4ba0      	ldr	r3, [pc, #640]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd2:	4b9e      	ldr	r3, [pc, #632]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80e4 	beq.w	8003db2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4c>
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	f040 808b 	bne.w	8003d0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	f040 8087 	bne.w	8003d0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c00:	4b92      	ldr	r3, [pc, #584]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_OscConfig+0x64>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e3e8      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	4b8b      	ldr	r3, [pc, #556]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <HAL_RCC_OscConfig+0x7e>
 8003c28:	4b88      	ldr	r3, [pc, #544]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	e005      	b.n	8003c3e <HAL_RCC_OscConfig+0x8a>
 8003c32:	4b86      	ldr	r3, [pc, #536]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d223      	bcs.n	8003c8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fd96 	bl	8004778 <RCC_SetFlashLatencyFromMSIRange>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e3c9      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c56:	4b7d      	ldr	r3, [pc, #500]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7c      	ldr	r2, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b7a      	ldr	r3, [pc, #488]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4977      	ldr	r1, [pc, #476]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c74:	4b75      	ldr	r3, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	4972      	ldr	r1, [pc, #456]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	e025      	b.n	8003cd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8a:	4b70      	ldr	r3, [pc, #448]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6f      	ldr	r2, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c90:	f043 0308 	orr.w	r3, r3, #8
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b6d      	ldr	r3, [pc, #436]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	496a      	ldr	r1, [pc, #424]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca8:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	4965      	ldr	r1, [pc, #404]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fd56 	bl	8004778 <RCC_SetFlashLatencyFromMSIRange>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e389      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cd6:	f000 fc6f 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4b5b      	ldr	r3, [pc, #364]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	495a      	ldr	r1, [pc, #360]	; (8003e50 <HAL_RCC_OscConfig+0x29c>)
 8003ce8:	5ccb      	ldrb	r3, [r1, r3]
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_OscConfig+0x2a0>)
 8003cf4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cf6:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <HAL_RCC_OscConfig+0x2a4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe f826 	bl	8001d4c <HAL_InitTick>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d052      	beq.n	8003db0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	e36d      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d032      	beq.n	8003d7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d16:	4b4d      	ldr	r3, [pc, #308]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a4c      	ldr	r2, [pc, #304]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d22:	f7fe f951 	bl	8001fc8 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d2a:	f7fe f94d 	bl	8001fc8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e356      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d3c:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d48:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d4e:	f043 0308 	orr.w	r3, r3, #8
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	493a      	ldr	r1, [pc, #232]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d66:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	4935      	ldr	r1, [pc, #212]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
 8003d7a:	e01a      	b.n	8003db2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a32      	ldr	r2, [pc, #200]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d88:	f7fe f91e 	bl	8001fc8 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d90:	f7fe f91a 	bl	8001fc8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e323      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1dc>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d073      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x21c>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d10e      	bne.n	8003de8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d10b      	bne.n	8003de8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d063      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x2f0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d15f      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e300      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x24c>
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e01d      	b.n	8003e3c <HAL_RCC_OscConfig+0x288>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x270>
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0x288>
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <HAL_RCC_OscConfig+0x298>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe f8c0 	bl	8001fc8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4a:	e010      	b.n	8003e6e <HAL_RCC_OscConfig+0x2ba>
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800c028 	.word	0x0800c028
 8003e54:	20000020 	.word	0x20000020
 8003e58:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe f8b4 	bl	8001fc8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e2bd      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e6e:	4baf      	ldr	r3, [pc, #700]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x2a8>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe f8a4 	bl	8001fc8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe f8a0 	bl	8001fc8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e2a9      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e96:	4ba5      	ldr	r3, [pc, #660]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2d0>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d060      	beq.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x310>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d119      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d116      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec4:	4b99      	ldr	r3, [pc, #612]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_OscConfig+0x328>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e286      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003edc:	4b93      	ldr	r3, [pc, #588]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	061b      	lsls	r3, r3, #24
 8003eea:	4990      	ldr	r1, [pc, #576]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef0:	e040      	b.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d023      	beq.n	8003f42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efa:	4b8c      	ldr	r3, [pc, #560]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a8b      	ldr	r2, [pc, #556]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fe f85f 	bl	8001fc8 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0e:	f7fe f85b 	bl	8001fc8 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e264      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f20:	4b82      	ldr	r3, [pc, #520]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2c:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	497c      	ldr	r1, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
 8003f40:	e018      	b.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f42:	4b7a      	ldr	r3, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a79      	ldr	r2, [pc, #484]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fe f83b 	bl	8001fc8 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f56:	f7fe f837 	bl	8001fc8 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e240      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f68:	4b70      	ldr	r3, [pc, #448]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03c      	beq.n	8003ffa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f88:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8e:	4a67      	ldr	r2, [pc, #412]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fe f816 	bl	8001fc8 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fe f812 	bl	8001fc8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e21b      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb2:	4b5e      	ldr	r3, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ef      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x3ec>
 8003fc0:	e01b      	b.n	8003ffa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd fff9 	bl	8001fc8 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fd fff5 	bl	8001fc8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1fe      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fec:	4b4f      	ldr	r3, [pc, #316]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1ef      	bne.n	8003fda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a6 	beq.w	8004154 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800400c:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_OscConfig+0x578>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10d      	bne.n	8004034 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCC_OscConfig+0x578>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	4a43      	ldr	r2, [pc, #268]	; (800412c <HAL_RCC_OscConfig+0x578>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004022:	6593      	str	r3, [r2, #88]	; 0x58
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004030:	2301      	movs	r3, #1
 8004032:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004034:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCC_OscConfig+0x57c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d118      	bne.n	8004072 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004040:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCC_OscConfig+0x57c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3a      	ldr	r2, [pc, #232]	; (8004130 <HAL_RCC_OscConfig+0x57c>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404c:	f7fd ffbc 	bl	8001fc8 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fd ffb8 	bl	8001fc8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1c1      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_RCC_OscConfig+0x57c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <HAL_RCC_OscConfig+0x4d8>
 800407a:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_RCC_OscConfig+0x578>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	4a2a      	ldr	r2, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408a:	e024      	b.n	80040d6 <HAL_RCC_OscConfig+0x522>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d110      	bne.n	80040b6 <HAL_RCC_OscConfig+0x502>
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <HAL_RCC_OscConfig+0x578>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x578>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x578>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a20      	ldr	r2, [pc, #128]	; (800412c <HAL_RCC_OscConfig+0x578>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040b4:	e00f      	b.n	80040d6 <HAL_RCC_OscConfig+0x522>
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCC_OscConfig+0x578>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x578>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040c6:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x578>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <HAL_RCC_OscConfig+0x578>)
 80040ce:	f023 0304 	bic.w	r3, r3, #4
 80040d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fd ff73 	bl	8001fc8 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fd ff6f 	bl	8001fc8 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e176      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_OscConfig+0x578>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ed      	beq.n	80040e6 <HAL_RCC_OscConfig+0x532>
 800410a:	e01a      	b.n	8004142 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd ff5c 	bl	8001fc8 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004112:	e00f      	b.n	8004134 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fd ff58 	bl	8001fc8 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d906      	bls.n	8004134 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e15f      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004134:	4baa      	ldr	r3, [pc, #680]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e8      	bne.n	8004114 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004142:	7ffb      	ldrb	r3, [r7, #31]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4ba5      	ldr	r3, [pc, #660]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	4aa4      	ldr	r2, [pc, #656]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004152:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03c      	beq.n	80041da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004168:	4b9d      	ldr	r3, [pc, #628]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800416a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800416e:	4a9c      	ldr	r2, [pc, #624]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd ff26 	bl	8001fc8 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004180:	f7fd ff22 	bl	8001fc8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e12b      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004192:	4b93      	ldr	r3, [pc, #588]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ef      	beq.n	8004180 <HAL_RCC_OscConfig+0x5cc>
 80041a0:	e01b      	b.n	80041da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041a2:	4b8f      	ldr	r3, [pc, #572]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80041a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a8:	4a8d      	ldr	r2, [pc, #564]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7fd ff09 	bl	8001fc8 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ba:	f7fd ff05 	bl	8001fc8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e10e      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041cc:	4b84      	ldr	r3, [pc, #528]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80041ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ef      	bne.n	80041ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8102 	beq.w	80043e8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	f040 80c5 	bne.w	8004378 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041ee:	4b7c      	ldr	r3, [pc, #496]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0203 	and.w	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d12c      	bne.n	800425c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	3b01      	subs	r3, #1
 800420e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d123      	bne.n	800425c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d11b      	bne.n	800425c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d113      	bne.n	800425c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	3b01      	subs	r3, #1
 8004242:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d109      	bne.n	800425c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	3b01      	subs	r3, #1
 8004256:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d067      	beq.n	800432c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d062      	beq.n	8004328 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004262:	4b5f      	ldr	r3, [pc, #380]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0bb      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5a      	ldr	r2, [pc, #360]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800427e:	f7fd fea3 	bl	8001fc8 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004286:	f7fd fe9f 	bl	8001fc8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0a8      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004298:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	4b4e      	ldr	r3, [pc, #312]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <HAL_RCC_OscConfig+0x830>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	4311      	orrs	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042be:	0212      	lsls	r2, r2, #8
 80042c0:	4311      	orrs	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042c6:	0852      	lsrs	r2, r2, #1
 80042c8:	3a01      	subs	r2, #1
 80042ca:	0552      	lsls	r2, r2, #21
 80042cc:	4311      	orrs	r1, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042d2:	0852      	lsrs	r2, r2, #1
 80042d4:	3a01      	subs	r2, #1
 80042d6:	0652      	lsls	r2, r2, #25
 80042d8:	4311      	orrs	r1, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042de:	06d2      	lsls	r2, r2, #27
 80042e0:	430a      	orrs	r2, r1
 80042e2:	493f      	ldr	r1, [pc, #252]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f4:	4b3a      	ldr	r3, [pc, #232]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a39      	ldr	r2, [pc, #228]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80042fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004300:	f7fd fe62 	bl	8001fc8 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fd fe5e 	bl	8001fc8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e067      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004326:	e05f      	b.n	80043e8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e05e      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d157      	bne.n	80043e8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004338:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004344:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004350:	f7fd fe3a 	bl	8001fc8 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fe36 	bl	8001fc8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e03f      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x7a4>
 8004376:	e037      	b.n	80043e8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d02d      	beq.n	80043da <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004388:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	4a0e      	ldr	r2, [pc, #56]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80043a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b2:	f7fd fe09 	bl	8001fc8 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ba:	f7fd fe05 	bl	8001fc8 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e00e      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <HAL_RCC_OscConfig+0x82c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f0      	bne.n	80043ba <HAL_RCC_OscConfig+0x806>
 80043d8:	e006      	b.n	80043e8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e005      	b.n	80043ea <HAL_RCC_OscConfig+0x836>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0c8      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d910      	bls.n	8004438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 0207 	bic.w	r2, r3, #7
 800441e:	4961      	ldr	r1, [pc, #388]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0b0      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d04c      	beq.n	80044de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d107      	bne.n	800445c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444c:	4b56      	ldr	r3, [pc, #344]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d121      	bne.n	800449c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e09e      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d107      	bne.n	8004474 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004464:	4b50      	ldr	r3, [pc, #320]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d115      	bne.n	800449c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e092      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800447c:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e086      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800448c:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e07e      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800449c:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 0203 	bic.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	493f      	ldr	r1, [pc, #252]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ae:	f7fd fd8b 	bl	8001fc8 <HAL_GetTick>
 80044b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b6:	f7fd fd87 	bl	8001fc8 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e066      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 020c 	and.w	r2, r3, #12
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	429a      	cmp	r2, r3
 80044dc:	d1eb      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ea:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	492c      	ldr	r1, [pc, #176]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d210      	bcs.n	800452c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 0207 	bic.w	r2, r3, #7
 8004512:	4924      	ldr	r1, [pc, #144]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <HAL_RCC_ClockConfig+0x1b0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e036      	b.n	800459a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4918      	ldr	r1, [pc, #96]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4910      	ldr	r1, [pc, #64]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800456a:	f000 f825 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 800456e:	4602      	mov	r2, r0
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	490c      	ldr	r1, [pc, #48]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	5ccb      	ldrb	r3, [r1, r3]
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	fa22 f303 	lsr.w	r3, r2, r3
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fbdc 	bl	8001d4c <HAL_InitTick>
 8004594:	4603      	mov	r3, r0
 8004596:	72fb      	strb	r3, [r7, #11]

  return status;
 8004598:	7afb      	ldrb	r3, [r7, #11]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40021000 	.word	0x40021000
 80045ac:	0800c028 	.word	0x0800c028
 80045b0:	20000020 	.word	0x20000020
 80045b4:	20000024 	.word	0x20000024

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c6:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d0:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x34>
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d121      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d11e      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045ec:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045f8:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e005      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004608:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004614:	4a2b      	ldr	r2, [pc, #172]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10d      	bne.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004628:	e00a      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d102      	bne.n	8004636 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	e004      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d101      	bne.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800463c:	4b23      	ldr	r3, [pc, #140]	; (80046cc <HAL_RCC_GetSysClockFreq+0x114>)
 800463e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d134      	bne.n	80046b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d003      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0xa6>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d003      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0xac>
 800465c:	e005      	b.n	800466a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800465e:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004660:	617b      	str	r3, [r7, #20]
      break;
 8004662:	e005      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004666:	617b      	str	r3, [r7, #20]
      break;
 8004668:	e002      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	617b      	str	r3, [r7, #20]
      break;
 800466e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	3301      	adds	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	fb02 f203 	mul.w	r2, r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	0e5b      	lsrs	r3, r3, #25
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	3301      	adds	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046b0:	69bb      	ldr	r3, [r7, #24]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	0800c040 	.word	0x0800c040
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000020 	.word	0x20000020

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4904      	ldr	r1, [pc, #16]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	0800c038 	.word	0x0800c038

08004714 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	220f      	movs	r2, #15
 8004722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0203 	and.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_RCC_GetClockConfig+0x60>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0207 	and.w	r2, r3, #7
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	40022000 	.word	0x40022000

08004778 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004784:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004790:	f7ff f9ac 	bl	8003aec <HAL_PWREx_GetVoltageRange>
 8004794:	6178      	str	r0, [r7, #20]
 8004796:	e014      	b.n	80047c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	4a24      	ldr	r2, [pc, #144]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6593      	str	r3, [r2, #88]	; 0x58
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047b0:	f7ff f99c 	bl	8003aec <HAL_PWREx_GetVoltageRange>
 80047b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c8:	d10b      	bne.n	80047e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d919      	bls.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2ba0      	cmp	r3, #160	; 0xa0
 80047d4:	d902      	bls.n	80047dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047d6:	2302      	movs	r3, #2
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e013      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047dc:	2301      	movs	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	e010      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d902      	bls.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047e8:	2303      	movs	r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e00a      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d102      	bne.n	80047fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047f4:	2302      	movs	r3, #2
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	e004      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b70      	cmp	r3, #112	; 0x70
 80047fe:	d101      	bne.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004800:	2301      	movs	r3, #1
 8004802:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f023 0207 	bic.w	r2, r3, #7
 800480c:	4909      	ldr	r1, [pc, #36]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	429a      	cmp	r2, r3
 8004820:	d001      	beq.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	40022000 	.word	0x40022000

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004840:	2300      	movs	r3, #0
 8004842:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004844:	2300      	movs	r3, #0
 8004846:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004850:	2b00      	cmp	r3, #0
 8004852:	d031      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004858:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800485c:	d01a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800485e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004862:	d814      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004868:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800486c:	d10f      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800486e:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4a5c      	ldr	r2, [pc, #368]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800487a:	e00c      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa12 	bl	8004cac <RCCEx_PLLSAI1_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	74fb      	strb	r3, [r7, #19]
      break;
 8004892:	e000      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800489c:	4b51      	ldr	r3, [pc, #324]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	494e      	ldr	r1, [pc, #312]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048b2:	e001      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 809e 	beq.w	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048ca:	4b46      	ldr	r3, [pc, #280]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00d      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	4b40      	ldr	r3, [pc, #256]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4a3f      	ldr	r2, [pc, #252]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
 80048ec:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f8:	2301      	movs	r3, #1
 80048fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048fc:	4b3a      	ldr	r3, [pc, #232]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a39      	ldr	r2, [pc, #228]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004908:	f7fd fb5e 	bl	8001fc8 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800490e:	e009      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004910:	f7fd fb5a 	bl	8001fc8 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	74fb      	strb	r3, [r7, #19]
        break;
 8004922:	e005      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004924:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ef      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d15a      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004936:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004940:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01e      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	429a      	cmp	r2, r3
 8004950:	d019      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004952:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800497e:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d016      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fd fb1a 	bl	8001fc8 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004996:	e00b      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004998:	f7fd fb16 	bl	8001fc8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d902      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	74fb      	strb	r3, [r7, #19]
            break;
 80049ae:	e006      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ec      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d2:	4904      	ldr	r1, [pc, #16]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049da:	e009      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	74bb      	strb	r3, [r7, #18]
 80049e0:	e006      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f0:	7c7b      	ldrb	r3, [r7, #17]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d105      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f6:	4bac      	ldr	r3, [pc, #688]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	4aab      	ldr	r2, [pc, #684]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80049fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a0e:	4ba6      	ldr	r3, [pc, #664]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f023 0203 	bic.w	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	49a2      	ldr	r1, [pc, #648]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a30:	4b9d      	ldr	r3, [pc, #628]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f023 020c 	bic.w	r2, r3, #12
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	499a      	ldr	r1, [pc, #616]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a52:	4b95      	ldr	r3, [pc, #596]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	4991      	ldr	r1, [pc, #580]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a74:	4b8c      	ldr	r3, [pc, #560]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	4989      	ldr	r1, [pc, #548]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a96:	4b84      	ldr	r3, [pc, #528]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	4980      	ldr	r1, [pc, #512]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ab8:	4b7b      	ldr	r3, [pc, #492]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	4978      	ldr	r1, [pc, #480]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ada:	4b73      	ldr	r3, [pc, #460]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae8:	496f      	ldr	r1, [pc, #444]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004afc:	4b6a      	ldr	r3, [pc, #424]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	4967      	ldr	r1, [pc, #412]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b1e:	4b62      	ldr	r3, [pc, #392]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	495e      	ldr	r1, [pc, #376]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b40:	4b59      	ldr	r3, [pc, #356]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	4956      	ldr	r1, [pc, #344]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b62:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b68:	f023 0203 	bic.w	r2, r3, #3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	494d      	ldr	r1, [pc, #308]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d028      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b84:	4b48      	ldr	r3, [pc, #288]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	4945      	ldr	r1, [pc, #276]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba4:	4b40      	ldr	r3, [pc, #256]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a3f      	ldr	r2, [pc, #252]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bae:	60d3      	str	r3, [r2, #12]
 8004bb0:	e011      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bba:	d10c      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f872 	bl	8004cac <RCCEx_PLLSAI1_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d028      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004be2:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	492d      	ldr	r1, [pc, #180]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c00:	d106      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0c:	60d3      	str	r3, [r2, #12]
 8004c0e:	e011      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2101      	movs	r1, #1
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f843 	bl	8004cac <RCCEx_PLLSAI1_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01c      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	4916      	ldr	r1, [pc, #88]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	2102      	movs	r1, #2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f820 	bl	8004cac <RCCEx_PLLSAI1_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	4904      	ldr	r1, [pc, #16]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000

08004cac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cba:	4b74      	ldr	r3, [pc, #464]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cc6:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0203 	and.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10d      	bne.n	8004cf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cde:	4b6b      	ldr	r3, [pc, #428]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
       ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d047      	beq.n	8004d82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	e044      	b.n	8004d82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d018      	beq.n	8004d32 <RCCEx_PLLSAI1_Config+0x86>
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d825      	bhi.n	8004d50 <RCCEx_PLLSAI1_Config+0xa4>
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d002      	beq.n	8004d0e <RCCEx_PLLSAI1_Config+0x62>
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d009      	beq.n	8004d20 <RCCEx_PLLSAI1_Config+0x74>
 8004d0c:	e020      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d11d      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d1e:	e01a      	b.n	8004d56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d20:	4b5a      	ldr	r3, [pc, #360]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d116      	bne.n	8004d5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e013      	b.n	8004d5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d32:	4b56      	ldr	r3, [pc, #344]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d3e:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d4e:	e006      	b.n	8004d5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
      break;
 8004d54:	e004      	b.n	8004d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d66:	4b49      	ldr	r3, [pc, #292]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	4943      	ldr	r1, [pc, #268]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d17c      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d88:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a3f      	ldr	r2, [pc, #252]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fd f918 	bl	8001fc8 <HAL_GetTick>
 8004d98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d9a:	e009      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d9c:	f7fd f914 	bl	8001fc8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d902      	bls.n	8004db0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	73fb      	strb	r3, [r7, #15]
        break;
 8004dae:	e005      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004db0:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ef      	bne.n	8004d9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d15f      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d110      	bne.n	8004dea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc8:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6892      	ldr	r2, [r2, #8]
 8004dd8:	0211      	lsls	r1, r2, #8
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	06d2      	lsls	r2, r2, #27
 8004de0:	430a      	orrs	r2, r1
 8004de2:	492a      	ldr	r1, [pc, #168]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	610b      	str	r3, [r1, #16]
 8004de8:	e027      	b.n	8004e3a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d112      	bne.n	8004e16 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df0:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004df8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	0211      	lsls	r1, r2, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6912      	ldr	r2, [r2, #16]
 8004e06:	0852      	lsrs	r2, r2, #1
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	0552      	lsls	r2, r2, #21
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	491f      	ldr	r1, [pc, #124]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	610b      	str	r3, [r1, #16]
 8004e14:	e011      	b.n	8004e3a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6892      	ldr	r2, [r2, #8]
 8004e26:	0211      	lsls	r1, r2, #8
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6952      	ldr	r2, [r2, #20]
 8004e2c:	0852      	lsrs	r2, r2, #1
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	0652      	lsls	r2, r2, #25
 8004e32:	430a      	orrs	r2, r1
 8004e34:	4915      	ldr	r1, [pc, #84]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fd f8bf 	bl	8001fc8 <HAL_GetTick>
 8004e4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e4c:	e009      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e4e:	f7fd f8bb 	bl	8001fc8 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d902      	bls.n	8004e62 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	73fb      	strb	r3, [r7, #15]
          break;
 8004e60:	e005      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0ef      	beq.n	8004e4e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4903      	ldr	r1, [pc, #12]	; (8004e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000

08004e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e095      	b.n	8004fce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb2:	d009      	beq.n	8004ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61da      	str	r2, [r3, #28]
 8004eba:	e005      	b.n	8004ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc febe 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f08:	d902      	bls.n	8004f10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e002      	b.n	8004f16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f1e:	d007      	beq.n	8004f30 <HAL_SPI_Init+0xa0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f28:	d002      	beq.n	8004f30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	ea42 0103 	orr.w	r1, r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	f003 0204 	and.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fac:	ea42 0103 	orr.w	r1, r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b088      	sub	sp, #32
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_SPI_Transmit+0x22>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e158      	b.n	80052aa <HAL_SPI_Transmit+0x2d4>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005000:	f7fc ffe2 	bl	8001fc8 <HAL_GetTick>
 8005004:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d002      	beq.n	800501c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005016:	2302      	movs	r3, #2
 8005018:	77fb      	strb	r3, [r7, #31]
    goto error;
 800501a:	e13d      	b.n	8005298 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_SPI_Transmit+0x52>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800502c:	e134      	b.n	8005298 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2203      	movs	r2, #3
 8005032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d10f      	bne.n	800509a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005088:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005098:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d007      	beq.n	80050b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050c0:	d94b      	bls.n	800515a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_Transmit+0xfa>
 80050ca:	8afb      	ldrh	r3, [r7, #22]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d13e      	bne.n	800514e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050f4:	e02b      	b.n	800514e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b02      	cmp	r3, #2
 8005102:	d112      	bne.n	800512a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	881a      	ldrh	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	1c9a      	adds	r2, r3, #2
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005128:	e011      	b.n	800514e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800512a:	f7fc ff4d 	bl	8001fc8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d803      	bhi.n	8005142 <HAL_SPI_Transmit+0x16c>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d102      	bne.n	8005148 <HAL_SPI_Transmit+0x172>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800514c:	e0a4      	b.n	8005298 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ce      	bne.n	80050f6 <HAL_SPI_Transmit+0x120>
 8005158:	e07c      	b.n	8005254 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_SPI_Transmit+0x192>
 8005162:	8afb      	ldrh	r3, [r7, #22]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d170      	bne.n	800524a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d912      	bls.n	8005198 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	881a      	ldrh	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b02      	subs	r3, #2
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005196:	e058      	b.n	800524a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	7812      	ldrb	r2, [r2, #0]
 80051a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051be:	e044      	b.n	800524a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d12b      	bne.n	8005226 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d912      	bls.n	80051fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	881a      	ldrh	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b02      	subs	r3, #2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051fc:	e025      	b.n	800524a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005224:	e011      	b.n	800524a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005226:	f7fc fecf 	bl	8001fc8 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d803      	bhi.n	800523e <HAL_SPI_Transmit+0x268>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d102      	bne.n	8005244 <HAL_SPI_Transmit+0x26e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005248:	e026      	b.n	8005298 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1b5      	bne.n	80051c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fb0d 	bl	8005878 <SPI_EndRxTxTransaction>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e000      	b.n	8005298 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005296:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_SPI_Transmit_DMA+0x20>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e0d8      	b.n	8005486 <HAL_SPI_Transmit_DMA+0x1d2>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d002      	beq.n	80052ee <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80052e8:	2302      	movs	r3, #2
 80052ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052ec:	e0c6      	b.n	800547c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_SPI_Transmit_DMA+0x46>
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052fe:	e0bd      	b.n	800547c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2203      	movs	r2, #3
 8005304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534a:	d10f      	bne.n	800536c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800536a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	4a47      	ldr	r2, [pc, #284]	; (8005490 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005372:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	4a46      	ldr	r2, [pc, #280]	; (8005494 <HAL_SPI_Transmit_DMA+0x1e0>)
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	4a45      	ldr	r2, [pc, #276]	; (8005498 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	2200      	movs	r2, #0
 800538a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800539a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a4:	d82d      	bhi.n	8005402 <HAL_SPI_Transmit_DMA+0x14e>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b0:	d127      	bne.n	8005402 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10f      	bne.n	80053e0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053ce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053de:	e010      	b.n	8005402 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3301      	adds	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	4619      	mov	r1, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800541a:	f7fe f83f 	bl	800349c <HAL_DMA_Start_IT>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005428:	f043 0210 	orr.w	r2, r3, #16
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800543c:	e01e      	b.n	800547c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d007      	beq.n	800545c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0220 	orr.w	r2, r2, #32
 800546a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0202 	orr.w	r2, r2, #2
 800547a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	080055e9 	.word	0x080055e9
 8005494:	08005543 	.word	0x08005543
 8005498:	08005605 	.word	0x08005605

0800549c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00f      	beq.n	80054d0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe f851 	bl	800355c <HAL_DMA_Abort>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c4:	f043 0210 	orr.w	r2, r3, #16
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00f      	beq.n	80054f8 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe f83d 	bl	800355c <HAL_DMA_Abort>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	f043 0210 	orr.w	r2, r3, #16
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0203 	bic.w	r2, r2, #3
 8005506:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005550:	f7fc fd3a 	bl	8001fc8 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b20      	cmp	r3, #32
 8005562:	d03b      	beq.n	80055dc <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0220 	bic.w	r2, r2, #32
 8005572:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0202 	bic.w	r2, r2, #2
 8005582:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	2164      	movs	r1, #100	; 0x64
 8005588:	6978      	ldr	r0, [r7, #20]
 800558a:	f000 f975 	bl	8005878 <SPI_EndRxTxTransaction>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	f043 0220 	orr.w	r2, r3, #32
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2200      	movs	r2, #0
 80055c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055d4:	6978      	ldr	r0, [r7, #20]
 80055d6:	f7ff ffaa 	bl	800552e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055da:	e002      	b.n	80055e2 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80055dc:	6978      	ldr	r0, [r7, #20]
 80055de:	f7fb fc89 	bl	8000ef4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff ff8f 	bl	800551a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0203 	bic.w	r2, r2, #3
 8005620:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff ff79 	bl	800552e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005654:	f7fc fcb8 	bl	8001fc8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	4413      	add	r3, r2
 8005662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005664:	f7fc fcb0 	bl	8001fc8 <HAL_GetTick>
 8005668:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800566a:	4b39      	ldr	r3, [pc, #228]	; (8005750 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	015b      	lsls	r3, r3, #5
 8005670:	0d1b      	lsrs	r3, r3, #20
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	fb02 f303 	mul.w	r3, r2, r3
 8005678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800567a:	e054      	b.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d050      	beq.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005684:	f7fc fca0 	bl	8001fc8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	429a      	cmp	r2, r3
 8005692:	d902      	bls.n	800569a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d13d      	bne.n	8005716 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b2:	d111      	bne.n	80056d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056bc:	d004      	beq.n	80056c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c6:	d107      	bne.n	80056d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e0:	d10f      	bne.n	8005702 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e017      	b.n	8005746 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	3b01      	subs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	429a      	cmp	r2, r3
 8005742:	d19b      	bne.n	800567c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000020 	.word	0x20000020

08005754 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005762:	f7fc fc31 	bl	8001fc8 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	4413      	add	r3, r2
 8005770:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005772:	f7fc fc29 	bl	8001fc8 <HAL_GetTick>
 8005776:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005778:	4b3e      	ldr	r3, [pc, #248]	; (8005874 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	00da      	lsls	r2, r3, #3
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	0d1b      	lsrs	r3, r3, #20
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005790:	e062      	b.n	8005858 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005798:	d109      	bne.n	80057ae <SPI_WaitFifoStateUntilTimeout+0x5a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80057ac:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d050      	beq.n	8005858 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b6:	f7fc fc07 	bl	8001fc8 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d902      	bls.n	80057cc <SPI_WaitFifoStateUntilTimeout+0x78>
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d13d      	bne.n	8005848 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e4:	d111      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout+0xb6>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ee:	d004      	beq.n	80057fa <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f8:	d107      	bne.n	800580a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	d10f      	bne.n	8005834 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e010      	b.n	800586a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	3b01      	subs	r3, #1
 8005856:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d194      	bne.n	8005792 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000020 	.word	0x20000020

08005878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7ff ff5f 	bl	8005754 <SPI_WaitFifoStateUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e027      	b.n	80058fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff fec4 	bl	8005644 <SPI_WaitFlagStateUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e014      	b.n	80058fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff ff38 	bl	8005754 <SPI_WaitFifoStateUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e000      	b.n	80058fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e049      	b.n	80059aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f841 	bl	80059b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f000 f9e4 	bl	8005d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d001      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e040      	b.n	8005a62 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <HAL_TIM_Base_Start_IT+0xa8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x58>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d009      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x58>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <HAL_TIM_Base_Start_IT+0xac>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x58>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d115      	bne.n	8005a4c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <HAL_TIM_Base_Start_IT+0xb4>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b06      	cmp	r3, #6
 8005a30:	d015      	beq.n	8005a5e <HAL_TIM_Base_Start_IT+0x96>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d011      	beq.n	8005a5e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0201 	orr.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4a:	e008      	b.n	8005a5e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e000      	b.n	8005a60 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40000400 	.word	0x40000400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	00010007 	.word	0x00010007

08005a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0202 	mvn.w	r2, #2
 8005aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f905 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8f7 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f908 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0204 	mvn.w	r2, #4
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8db 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8cd 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8de 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d122      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d11b      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0208 	mvn.w	r2, #8
 8005b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8b1 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8a3 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8b4 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d122      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0210 	mvn.w	r2, #16
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2208      	movs	r2, #8
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f887 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f879 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f88a 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10e      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0201 	mvn.w	r2, #1
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fb fe7c 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d10e      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b80      	cmp	r3, #128	; 0x80
 8005c1e:	d107      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8e8 	bl	8005e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3e:	d10e      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d107      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f8db 	bl	8005e14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d10e      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d107      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f838 	bl	8005cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d10e      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f06f 0220 	mvn.w	r2, #32
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f89b 	bl	8005dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a2e      	ldr	r2, [pc, #184]	; (8005ddc <TIM_Base_SetConfig+0xcc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0x28>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0x28>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a2b      	ldr	r2, [pc, #172]	; (8005de0 <TIM_Base_SetConfig+0xd0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <TIM_Base_SetConfig+0xcc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00f      	beq.n	8005d72 <TIM_Base_SetConfig+0x62>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d00b      	beq.n	8005d72 <TIM_Base_SetConfig+0x62>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_Base_SetConfig+0xd0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <TIM_Base_SetConfig+0x62>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1f      	ldr	r2, [pc, #124]	; (8005de4 <TIM_Base_SetConfig+0xd4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_Base_SetConfig+0x62>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <TIM_Base_SetConfig+0xd8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d108      	bne.n	8005d84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <TIM_Base_SetConfig+0xcc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_Base_SetConfig+0xb0>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <TIM_Base_SetConfig+0xd4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_Base_SetConfig+0xb0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <TIM_Base_SetConfig+0xd8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d103      	bne.n	8005dc8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	615a      	str	r2, [r3, #20]
}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400

08005dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <__NVIC_SetPriority>:
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	6039      	str	r1, [r7, #0]
 8005e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db0a      	blt.n	8005e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	490c      	ldr	r1, [pc, #48]	; (8005e74 <__NVIC_SetPriority+0x4c>)
 8005e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e46:	0112      	lsls	r2, r2, #4
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e50:	e00a      	b.n	8005e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	4908      	ldr	r1, [pc, #32]	; (8005e78 <__NVIC_SetPriority+0x50>)
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	3b04      	subs	r3, #4
 8005e60:	0112      	lsls	r2, r2, #4
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	440b      	add	r3, r1
 8005e66:	761a      	strb	r2, [r3, #24]
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	e000e100 	.word	0xe000e100
 8005e78:	e000ed00 	.word	0xe000ed00

08005e7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <SysTick_Handler+0x1c>)
 8005e82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e84:	f001 fea2 	bl	8007bcc <xTaskGetSchedulerState>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d001      	beq.n	8005e92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005e8e:	f002 fc8b 	bl	80087a8 <xPortSysTickHandler>
  }
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	e000e010 	.word	0xe000e010

08005e9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	f06f 0004 	mvn.w	r0, #4
 8005ea6:	f7ff ffbf 	bl	8005e28 <__NVIC_SetPriority>
#endif
}
 8005eaa:	bf00      	nop
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb6:	f3ef 8305 	mrs	r3, IPSR
 8005eba:	603b      	str	r3, [r7, #0]
  return(result);
 8005ebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ec2:	f06f 0305 	mvn.w	r3, #5
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e00c      	b.n	8005ee4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005eca:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <osKernelInitialize+0x44>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d105      	bne.n	8005ede <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ed2:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <osKernelInitialize+0x44>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	e002      	b.n	8005ee4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ede:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ee4:	687b      	ldr	r3, [r7, #4]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	2000a0c0 	.word	0x2000a0c0

08005ef8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005efe:	f3ef 8305 	mrs	r3, IPSR
 8005f02:	603b      	str	r3, [r7, #0]
  return(result);
 8005f04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f0a:	f06f 0305 	mvn.w	r3, #5
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	e010      	b.n	8005f34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <osKernelStart+0x48>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d109      	bne.n	8005f2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f1a:	f7ff ffbf 	bl	8005e9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f1e:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <osKernelStart+0x48>)
 8005f20:	2202      	movs	r2, #2
 8005f22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f24:	f001 f9f6 	bl	8007314 <vTaskStartScheduler>
      stat = osOK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	e002      	b.n	8005f34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f34:	687b      	ldr	r3, [r7, #4]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000a0c0 	.word	0x2000a0c0

08005f44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08e      	sub	sp, #56	; 0x38
 8005f48:	af04      	add	r7, sp, #16
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f54:	f3ef 8305 	mrs	r3, IPSR
 8005f58:	617b      	str	r3, [r7, #20]
  return(result);
 8005f5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d17e      	bne.n	800605e <osThreadNew+0x11a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d07b      	beq.n	800605e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f6a:	2318      	movs	r3, #24
 8005f6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d045      	beq.n	800600a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <osThreadNew+0x48>
        name = attr->name;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <osThreadNew+0x6e>
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b38      	cmp	r3, #56	; 0x38
 8005fa4:	d805      	bhi.n	8005fb2 <osThreadNew+0x6e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <osThreadNew+0x72>
        return (NULL);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e054      	b.n	8006060 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00e      	beq.n	8005fec <osThreadNew+0xa8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2bbb      	cmp	r3, #187	; 0xbb
 8005fd4:	d90a      	bls.n	8005fec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <osThreadNew+0xa8>
        mem = 1;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e010      	b.n	800600e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10c      	bne.n	800600e <osThreadNew+0xca>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <osThreadNew+0xca>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <osThreadNew+0xca>
          mem = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e001      	b.n	800600e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d110      	bne.n	8006036 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800601c:	9202      	str	r2, [sp, #8]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 ff86 	bl	8006f3c <xTaskCreateStatic>
 8006030:	4603      	mov	r3, r0
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e013      	b.n	800605e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d110      	bne.n	800605e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	b29a      	uxth	r2, r3
 8006040:	f107 0310 	add.w	r3, r7, #16
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 ffd1 	bl	8006ff6 <xTaskCreate>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d001      	beq.n	800605e <osThreadNew+0x11a>
            hTask = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800605e:	693b      	ldr	r3, [r7, #16]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3728      	adds	r7, #40	; 0x28
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006070:	f3ef 8305 	mrs	r3, IPSR
 8006074:	60bb      	str	r3, [r7, #8]
  return(result);
 8006076:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <osDelay+0x1c>
    stat = osErrorISR;
 800607c:	f06f 0305 	mvn.w	r3, #5
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e007      	b.n	8006094 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <osDelay+0x2c>
      vTaskDelay(ticks);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 f90c 	bl	80072ac <vTaskDelay>
    }
  }

  return (stat);
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800609e:	b580      	push	{r7, lr}
 80060a0:	b08a      	sub	sp, #40	; 0x28
 80060a2:	af02      	add	r7, sp, #8
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ae:	f3ef 8305 	mrs	r3, IPSR
 80060b2:	613b      	str	r3, [r7, #16]
  return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d175      	bne.n	80061a6 <osSemaphoreNew+0x108>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d072      	beq.n	80061a6 <osSemaphoreNew+0x108>
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d86e      	bhi.n	80061a6 <osSemaphoreNew+0x108>
    mem = -1;
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295
 80060cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d015      	beq.n	8006100 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d006      	beq.n	80060ea <osSemaphoreNew+0x4c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b4f      	cmp	r3, #79	; 0x4f
 80060e2:	d902      	bls.n	80060ea <osSemaphoreNew+0x4c>
        mem = 1;
 80060e4:	2301      	movs	r3, #1
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e00c      	b.n	8006104 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <osSemaphoreNew+0x66>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <osSemaphoreNew+0x66>
          mem = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e001      	b.n	8006104 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d04c      	beq.n	80061a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d128      	bne.n	8006164 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d10a      	bne.n	800612e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2203      	movs	r2, #3
 800611e:	9200      	str	r2, [sp, #0]
 8006120:	2200      	movs	r2, #0
 8006122:	2100      	movs	r1, #0
 8006124:	2001      	movs	r0, #1
 8006126:	f000 f993 	bl	8006450 <xQueueGenericCreateStatic>
 800612a:	61f8      	str	r0, [r7, #28]
 800612c:	e005      	b.n	800613a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800612e:	2203      	movs	r2, #3
 8006130:	2100      	movs	r1, #0
 8006132:	2001      	movs	r0, #1
 8006134:	f000 fa04 	bl	8006540 <xQueueGenericCreate>
 8006138:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d022      	beq.n	8006186 <osSemaphoreNew+0xe8>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01f      	beq.n	8006186 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006146:	2300      	movs	r3, #0
 8006148:	2200      	movs	r2, #0
 800614a:	2100      	movs	r1, #0
 800614c:	69f8      	ldr	r0, [r7, #28]
 800614e:	f000 fabf 	bl	80066d0 <xQueueGenericSend>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d016      	beq.n	8006186 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006158:	69f8      	ldr	r0, [r7, #28]
 800615a:	f000 fd33 	bl	8006bc4 <vQueueDelete>
            hSemaphore = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	e010      	b.n	8006186 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d108      	bne.n	800617c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	461a      	mov	r2, r3
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fa41 	bl	80065fa <xQueueCreateCountingSemaphoreStatic>
 8006178:	61f8      	str	r0, [r7, #28]
 800617a:	e004      	b.n	8006186 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fa72 	bl	8006668 <xQueueCreateCountingSemaphore>
 8006184:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e001      	b.n	800619e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800619e:	6979      	ldr	r1, [r7, #20]
 80061a0:	69f8      	ldr	r0, [r7, #28]
 80061a2:	f000 fe43 	bl	8006e2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80061a6:	69fb      	ldr	r3, [r7, #28]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4a07      	ldr	r2, [pc, #28]	; (80061dc <vApplicationGetIdleTaskMemory+0x2c>)
 80061c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4a06      	ldr	r2, [pc, #24]	; (80061e0 <vApplicationGetIdleTaskMemory+0x30>)
 80061c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2280      	movs	r2, #128	; 0x80
 80061cc:	601a      	str	r2, [r3, #0]
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	2000a0c4 	.word	0x2000a0c4
 80061e0:	2000a180 	.word	0x2000a180

080061e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a07      	ldr	r2, [pc, #28]	; (8006210 <vApplicationGetTimerTaskMemory+0x2c>)
 80061f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4a06      	ldr	r2, [pc, #24]	; (8006214 <vApplicationGetTimerTaskMemory+0x30>)
 80061fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006202:	601a      	str	r2, [r3, #0]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	2000a380 	.word	0x2000a380
 8006214:	2000a43c 	.word	0x2000a43c

08006218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f103 0208 	add.w	r2, r3, #8
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f04f 32ff 	mov.w	r2, #4294967295
 8006230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f103 0208 	add.w	r2, r3, #8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f103 0208 	add.w	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d103      	bne.n	80062da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e00c      	b.n	80062f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3308      	adds	r3, #8
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e002      	b.n	80062e8 <vListInsert+0x2e>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d2f6      	bcs.n	80062e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6892      	ldr	r2, [r2, #8]
 8006342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6852      	ldr	r2, [r2, #4]
 800634c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	429a      	cmp	r2, r3
 8006356:	d103      	bne.n	8006360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80063aa:	f002 f96b 	bl	8008684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	441a      	add	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063da:	3b01      	subs	r3, #1
 80063dc:	68f9      	ldr	r1, [r7, #12]
 80063de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	22ff      	movs	r2, #255	; 0xff
 80063ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	22ff      	movs	r2, #255	; 0xff
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d114      	bne.n	800642a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01a      	beq.n	800643e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3310      	adds	r3, #16
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fa1b 	bl	8007848 <xTaskRemoveFromEventList>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d012      	beq.n	800643e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006418:	4b0c      	ldr	r3, [pc, #48]	; (800644c <xQueueGenericReset+0xcc>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	e009      	b.n	800643e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3310      	adds	r3, #16
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fef2 	bl	8006218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff feed 	bl	8006218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800643e:	f002 f951 	bl	80086e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006442:	2301      	movs	r3, #1
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08e      	sub	sp, #56	; 0x38
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <xQueueGenericCreateStatic+0x52>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <xQueueGenericCreateStatic+0x56>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <xQueueGenericCreateStatic+0x58>
 80064a6:	2300      	movs	r3, #0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	623b      	str	r3, [r7, #32]
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <xQueueGenericCreateStatic+0x7e>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <xQueueGenericCreateStatic+0x82>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <xQueueGenericCreateStatic+0x84>
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61fb      	str	r3, [r7, #28]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064ee:	2350      	movs	r3, #80	; 0x50
 80064f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b50      	cmp	r3, #80	; 0x50
 80064f6:	d00a      	beq.n	800650e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	61bb      	str	r3, [r7, #24]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800650e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f83f 	bl	80065b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006538:	4618      	mov	r0, r3
 800653a:	3730      	adds	r7, #48	; 0x30
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	613b      	str	r3, [r7, #16]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	fb02 f303 	mul.w	r3, r2, r3
 8006572:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	3350      	adds	r3, #80	; 0x50
 8006578:	4618      	mov	r0, r3
 800657a:	f002 f9a5 	bl	80088c8 <pvPortMalloc>
 800657e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d011      	beq.n	80065aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	3350      	adds	r3, #80	; 0x50
 800658e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006598:	79fa      	ldrb	r2, [r7, #7]
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4613      	mov	r3, r2
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f805 	bl	80065b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065aa:	69bb      	ldr	r3, [r7, #24]
	}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3720      	adds	r7, #32
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e002      	b.n	80065d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065e2:	2101      	movs	r1, #1
 80065e4:	69b8      	ldr	r0, [r7, #24]
 80065e6:	f7ff fecb 	bl	8006380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	78fa      	ldrb	r2, [r7, #3]
 80065ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b08a      	sub	sp, #40	; 0x28
 80065fe:	af02      	add	r7, sp, #8
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	61bb      	str	r3, [r7, #24]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	429a      	cmp	r2, r3
 8006628:	d90a      	bls.n	8006640 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	617b      	str	r3, [r7, #20]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006640:	2302      	movs	r3, #2
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	2100      	movs	r1, #0
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff ff00 	bl	8006450 <xQueueGenericCreateStatic>
 8006650:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800665e:	69fb      	ldr	r3, [r7, #28]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	613b      	str	r3, [r7, #16]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	429a      	cmp	r2, r3
 8006694:	d90a      	bls.n	80066ac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60fb      	str	r3, [r7, #12]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066ac:	2202      	movs	r2, #2
 80066ae:	2100      	movs	r1, #0
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff45 	bl	8006540 <xQueueGenericCreate>
 80066b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066c4:	697b      	ldr	r3, [r7, #20]
	}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08e      	sub	sp, #56	; 0x38
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066de:	2300      	movs	r3, #0
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xQueueGenericSend+0x32>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <xQueueGenericSend+0x40>
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <xQueueGenericSend+0x44>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <xQueueGenericSend+0x46>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <xQueueGenericSend+0x60>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d103      	bne.n	800673e <xQueueGenericSend+0x6e>
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <xQueueGenericSend+0x72>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <xQueueGenericSend+0x74>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericSend+0x8e>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	623b      	str	r3, [r7, #32]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800675e:	f001 fa35 	bl	8007bcc <xTaskGetSchedulerState>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <xQueueGenericSend+0x9e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <xQueueGenericSend+0xa2>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueGenericSend+0xa4>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <xQueueGenericSend+0xbe>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	61fb      	str	r3, [r7, #28]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800678e:	f001 ff79 	bl	8008684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	429a      	cmp	r2, r3
 800679c:	d302      	bcc.n	80067a4 <xQueueGenericSend+0xd4>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d129      	bne.n	80067f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067aa:	f000 fa2e 	bl	8006c0a <prvCopyDataToQueue>
 80067ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d010      	beq.n	80067da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	3324      	adds	r3, #36	; 0x24
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 f843 	bl	8007848 <xTaskRemoveFromEventList>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d013      	beq.n	80067f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067c8:	4b3f      	ldr	r3, [pc, #252]	; (80068c8 <xQueueGenericSend+0x1f8>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	e00a      	b.n	80067f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067e0:	4b39      	ldr	r3, [pc, #228]	; (80068c8 <xQueueGenericSend+0x1f8>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067f0:	f001 ff78 	bl	80086e4 <vPortExitCritical>
				return pdPASS;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e063      	b.n	80068c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067fe:	f001 ff71 	bl	80086e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006802:	2300      	movs	r3, #0
 8006804:	e05c      	b.n	80068c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800680c:	f107 0314 	add.w	r3, r7, #20
 8006810:	4618      	mov	r0, r3
 8006812:	f001 f87d 	bl	8007910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800681a:	f001 ff63 	bl	80086e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800681e:	f000 fde9 	bl	80073f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006822:	f001 ff2f 	bl	8008684 <vPortEnterCritical>
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800682c:	b25b      	sxtb	r3, r3
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d103      	bne.n	800683c <xQueueGenericSend+0x16c>
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006842:	b25b      	sxtb	r3, r3
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d103      	bne.n	8006852 <xQueueGenericSend+0x182>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006852:	f001 ff47 	bl	80086e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006856:	1d3a      	adds	r2, r7, #4
 8006858:	f107 0314 	add.w	r3, r7, #20
 800685c:	4611      	mov	r1, r2
 800685e:	4618      	mov	r0, r3
 8006860:	f001 f86c 	bl	800793c <xTaskCheckForTimeOut>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d124      	bne.n	80068b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800686a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686c:	f000 fac5 	bl	8006dfa <prvIsQueueFull>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d018      	beq.n	80068a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	3310      	adds	r3, #16
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4611      	mov	r1, r2
 800687e:	4618      	mov	r0, r3
 8006880:	f000 ff92 	bl	80077a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006886:	f000 fa50 	bl	8006d2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800688a:	f000 fdc1 	bl	8007410 <xTaskResumeAll>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	f47f af7c 	bne.w	800678e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <xQueueGenericSend+0x1f8>)
 8006898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	e772      	b.n	800678e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068aa:	f000 fa3e 	bl	8006d2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068ae:	f000 fdaf 	bl	8007410 <xTaskResumeAll>
 80068b2:	e76c      	b.n	800678e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068b6:	f000 fa38 	bl	8006d2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068ba:	f000 fda9 	bl	8007410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3738      	adds	r7, #56	; 0x38
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b090      	sub	sp, #64	; 0x40
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d103      	bne.n	8006908 <xQueueGenericSendFromISR+0x3c>
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <xQueueGenericSendFromISR+0x40>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <xQueueGenericSendFromISR+0x42>
 800690c:	2300      	movs	r3, #0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d103      	bne.n	8006936 <xQueueGenericSendFromISR+0x6a>
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <xQueueGenericSendFromISR+0x6e>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueGenericSendFromISR+0x70>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	623b      	str	r3, [r7, #32]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006956:	f001 ff77 	bl	8008848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800695a:	f3ef 8211 	mrs	r2, BASEPRI
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	61fa      	str	r2, [r7, #28]
 8006970:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006972:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697e:	429a      	cmp	r2, r3
 8006980:	d302      	bcc.n	8006988 <xQueueGenericSendFromISR+0xbc>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d12f      	bne.n	80069e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800698e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800699e:	f000 f934 	bl	8006c0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d112      	bne.n	80069d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d016      	beq.n	80069e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	3324      	adds	r3, #36	; 0x24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 ff45 	bl	8007848 <xTaskRemoveFromEventList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e007      	b.n	80069e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069d6:	3301      	adds	r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	b25a      	sxtb	r2, r3
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069e2:	2301      	movs	r3, #1
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80069e6:	e001      	b.n	80069ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3740      	adds	r7, #64	; 0x40
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08c      	sub	sp, #48	; 0x30
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <xQueueReceive+0x30>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	623b      	str	r3, [r7, #32]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <xQueueReceive+0x3e>
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <xQueueReceive+0x42>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <xQueueReceive+0x44>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <xQueueReceive+0x5e>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61fb      	str	r3, [r7, #28]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a62:	f001 f8b3 	bl	8007bcc <xTaskGetSchedulerState>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <xQueueReceive+0x6e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <xQueueReceive+0x72>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <xQueueReceive+0x74>
 8006a76:	2300      	movs	r3, #0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <xQueueReceive+0x8e>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61bb      	str	r3, [r7, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a92:	f001 fdf7 	bl	8008684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01f      	beq.n	8006ae2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa6:	f000 f91a 	bl	8006cde <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	1e5a      	subs	r2, r3, #1
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00f      	beq.n	8006ada <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	3310      	adds	r3, #16
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fec2 	bl	8007848 <xTaskRemoveFromEventList>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aca:	4b3d      	ldr	r3, [pc, #244]	; (8006bc0 <xQueueReceive+0x1bc>)
 8006acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ada:	f001 fe03 	bl	80086e4 <vPortExitCritical>
				return pdPASS;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e069      	b.n	8006bb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ae8:	f001 fdfc 	bl	80086e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e062      	b.n	8006bb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006af6:	f107 0310 	add.w	r3, r7, #16
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 ff08 	bl	8007910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b04:	f001 fdee 	bl	80086e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b08:	f000 fc74 	bl	80073f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b0c:	f001 fdba 	bl	8008684 <vPortEnterCritical>
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b16:	b25b      	sxtb	r3, r3
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d103      	bne.n	8006b26 <xQueueReceive+0x122>
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b2c:	b25b      	sxtb	r3, r3
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d103      	bne.n	8006b3c <xQueueReceive+0x138>
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b3c:	f001 fdd2 	bl	80086e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b40:	1d3a      	adds	r2, r7, #4
 8006b42:	f107 0310 	add.w	r3, r7, #16
 8006b46:	4611      	mov	r1, r2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fef7 	bl	800793c <xTaskCheckForTimeOut>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d123      	bne.n	8006b9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b56:	f000 f93a 	bl	8006dce <prvIsQueueEmpty>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d017      	beq.n	8006b90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	3324      	adds	r3, #36	; 0x24
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fe1d 	bl	80077a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b70:	f000 f8db 	bl	8006d2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b74:	f000 fc4c 	bl	8007410 <xTaskResumeAll>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d189      	bne.n	8006a92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b7e:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <xQueueReceive+0x1bc>)
 8006b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	e780      	b.n	8006a92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b92:	f000 f8ca 	bl	8006d2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b96:	f000 fc3b 	bl	8007410 <xTaskResumeAll>
 8006b9a:	e77a      	b.n	8006a92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b9e:	f000 f8c4 	bl	8006d2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ba2:	f000 fc35 	bl	8007410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba8:	f000 f911 	bl	8006dce <prvIsQueueEmpty>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f43f af6f 	beq.w	8006a92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3730      	adds	r7, #48	; 0x30
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <vQueueDelete+0x28>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	60bb      	str	r3, [r7, #8]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f947 	bl	8006e80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f001 ff2f 	bl	8008a60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10d      	bne.n	8006c44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d14d      	bne.n	8006ccc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 ffe7 	bl	8007c08 <xTaskPriorityDisinherit>
 8006c3a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
 8006c42:	e043      	b.n	8006ccc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d119      	bne.n	8006c7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6858      	ldr	r0, [r3, #4]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	461a      	mov	r2, r3
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	f002 f84d 	bl	8008cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d32b      	bcc.n	8006ccc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	605a      	str	r2, [r3, #4]
 8006c7c:	e026      	b.n	8006ccc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	68d8      	ldr	r0, [r3, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	461a      	mov	r2, r3
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	f002 f833 	bl	8008cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	425b      	negs	r3, r3
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d207      	bcs.n	8006cba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	425b      	negs	r3, r3
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d105      	bne.n	8006ccc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006cd4:	697b      	ldr	r3, [r7, #20]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d018      	beq.n	8006d22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d303      	bcc.n	8006d12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68d9      	ldr	r1, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6838      	ldr	r0, [r7, #0]
 8006d1e:	f001 ffe9 	bl	8008cf4 <memcpy>
	}
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d32:	f001 fca7 	bl	8008684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d3e:	e011      	b.n	8006d64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d012      	beq.n	8006d6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fd7b 	bl	8007848 <xTaskRemoveFromEventList>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d58:	f000 fe52 	bl	8007a00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dce9      	bgt.n	8006d40 <prvUnlockQueue+0x16>
 8006d6c:	e000      	b.n	8006d70 <prvUnlockQueue+0x46>
					break;
 8006d6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	22ff      	movs	r2, #255	; 0xff
 8006d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d78:	f001 fcb4 	bl	80086e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d7c:	f001 fc82 	bl	8008684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d88:	e011      	b.n	8006dae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d012      	beq.n	8006db8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3310      	adds	r3, #16
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fd56 	bl	8007848 <xTaskRemoveFromEventList>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006da2:	f000 fe2d 	bl	8007a00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dce9      	bgt.n	8006d8a <prvUnlockQueue+0x60>
 8006db6:	e000      	b.n	8006dba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006db8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006dc2:	f001 fc8f 	bl	80086e4 <vPortExitCritical>
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dd6:	f001 fc55 	bl	8008684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e001      	b.n	8006dec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dec:	f001 fc7a 	bl	80086e4 <vPortExitCritical>

	return xReturn;
 8006df0:	68fb      	ldr	r3, [r7, #12]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e02:	f001 fc3f 	bl	8008684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d102      	bne.n	8006e18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e001      	b.n	8006e1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e1c:	f001 fc62 	bl	80086e4 <vPortExitCritical>

	return xReturn;
 8006e20:	68fb      	ldr	r3, [r7, #12]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e014      	b.n	8006e66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e3c:	4a0f      	ldr	r2, [pc, #60]	; (8006e7c <vQueueAddToRegistry+0x50>)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e48:	490c      	ldr	r1, [pc, #48]	; (8006e7c <vQueueAddToRegistry+0x50>)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e52:	4a0a      	ldr	r2, [pc, #40]	; (8006e7c <vQueueAddToRegistry+0x50>)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	4413      	add	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e5e:	e006      	b.n	8006e6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	d9e7      	bls.n	8006e3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	2000d374 	.word	0x2000d374

08006e80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e016      	b.n	8006ebc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006e8e:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <vQueueUnregisterQueue+0x50>)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4413      	add	r3, r2
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d10b      	bne.n	8006eb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006e9e:	4a0c      	ldr	r2, [pc, #48]	; (8006ed0 <vQueueUnregisterQueue+0x50>)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <vQueueUnregisterQueue+0x50>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4413      	add	r3, r2
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	605a      	str	r2, [r3, #4]
				break;
 8006eb4:	e006      	b.n	8006ec4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b07      	cmp	r3, #7
 8006ec0:	d9e5      	bls.n	8006e8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	2000d374 	.word	0x2000d374

08006ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ee4:	f001 fbce 	bl	8008684 <vPortEnterCritical>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eee:	b25b      	sxtb	r3, r3
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d103      	bne.n	8006efe <vQueueWaitForMessageRestricted+0x2a>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f04:	b25b      	sxtb	r3, r3
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d103      	bne.n	8006f14 <vQueueWaitForMessageRestricted+0x40>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f14:	f001 fbe6 	bl	80086e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	3324      	adds	r3, #36	; 0x24
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fc61 	bl	80077f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f2e:	6978      	ldr	r0, [r7, #20]
 8006f30:	f7ff fefb 	bl	8006d2a <prvUnlockQueue>
	}
 8006f34:	bf00      	nop
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08e      	sub	sp, #56	; 0x38
 8006f40:	af04      	add	r7, sp, #16
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	623b      	str	r3, [r7, #32]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	61fb      	str	r3, [r7, #28]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f82:	23bc      	movs	r3, #188	; 0xbc
 8006f84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2bbc      	cmp	r3, #188	; 0xbc
 8006f8a:	d00a      	beq.n	8006fa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61bb      	str	r3, [r7, #24]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01e      	beq.n	8006fe8 <xTaskCreateStatic+0xac>
 8006faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01b      	beq.n	8006fe8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9303      	str	r3, [sp, #12]
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	9302      	str	r3, [sp, #8]
 8006fca:	f107 0314 	add.w	r3, r7, #20
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f850 	bl	8007080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fe2:	f000 f8f3 	bl	80071cc <prvAddNewTaskToReadyList>
 8006fe6:	e001      	b.n	8006fec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fec:	697b      	ldr	r3, [r7, #20]
	}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	; 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b08c      	sub	sp, #48	; 0x30
 8006ffa:	af04      	add	r7, sp, #16
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	603b      	str	r3, [r7, #0]
 8007002:	4613      	mov	r3, r2
 8007004:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f001 fc5c 	bl	80088c8 <pvPortMalloc>
 8007010:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00e      	beq.n	8007036 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007018:	20bc      	movs	r0, #188	; 0xbc
 800701a:	f001 fc55 	bl	80088c8 <pvPortMalloc>
 800701e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
 800702c:	e005      	b.n	800703a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800702e:	6978      	ldr	r0, [r7, #20]
 8007030:	f001 fd16 	bl	8008a60 <vPortFree>
 8007034:	e001      	b.n	800703a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d017      	beq.n	8007070 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007048:	88fa      	ldrh	r2, [r7, #6]
 800704a:	2300      	movs	r3, #0
 800704c:	9303      	str	r3, [sp, #12]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	9302      	str	r3, [sp, #8]
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f80e 	bl	8007080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007064:	69f8      	ldr	r0, [r7, #28]
 8007066:	f000 f8b1 	bl	80071cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800706a:	2301      	movs	r3, #1
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	e002      	b.n	8007076 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007070:	f04f 33ff 	mov.w	r3, #4294967295
 8007074:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007076:	69bb      	ldr	r3, [r7, #24]
	}
 8007078:	4618      	mov	r0, r3
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	461a      	mov	r2, r3
 8007098:	21a5      	movs	r1, #165	; 0xa5
 800709a:	f001 fe39 	bl	8008d10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070a8:	3b01      	subs	r3, #1
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f023 0307 	bic.w	r3, r3, #7
 80070b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	617b      	str	r3, [r7, #20]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01f      	beq.n	800711e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070de:	2300      	movs	r3, #0
 80070e0:	61fb      	str	r3, [r7, #28]
 80070e2:	e012      	b.n	800710a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	7819      	ldrb	r1, [r3, #0]
 80070ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4413      	add	r3, r2
 80070f2:	3334      	adds	r3, #52	; 0x34
 80070f4:	460a      	mov	r2, r1
 80070f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	3301      	adds	r3, #1
 8007108:	61fb      	str	r3, [r7, #28]
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	2b0f      	cmp	r3, #15
 800710e:	d9e9      	bls.n	80070e4 <prvInitialiseNewTask+0x64>
 8007110:	e000      	b.n	8007114 <prvInitialiseNewTask+0x94>
			{
				break;
 8007112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800711c:	e003      	b.n	8007126 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	2b37      	cmp	r3, #55	; 0x37
 800712a:	d901      	bls.n	8007130 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800712c:	2337      	movs	r3, #55	; 0x37
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800713a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	2200      	movs	r2, #0
 8007140:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	3304      	adds	r3, #4
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff f886 	bl	8006258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	3318      	adds	r3, #24
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff f881 	bl	8006258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	2200      	movs	r2, #0
 8007178:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	3354      	adds	r3, #84	; 0x54
 8007180:	2260      	movs	r2, #96	; 0x60
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fdc3 	bl	8008d10 <memset>
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <prvInitialiseNewTask+0x140>)
 800718e:	659a      	str	r2, [r3, #88]	; 0x58
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <prvInitialiseNewTask+0x144>)
 8007194:	65da      	str	r2, [r3, #92]	; 0x5c
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	4a0b      	ldr	r2, [pc, #44]	; (80071c8 <prvInitialiseNewTask+0x148>)
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	69b8      	ldr	r0, [r7, #24]
 80071a2:	f001 f941 	bl	8008428 <pxPortInitialiseStack>
 80071a6:	4602      	mov	r2, r0
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b8:	bf00      	nop
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	0800c090 	.word	0x0800c090
 80071c4:	0800c0b0 	.word	0x0800c0b0
 80071c8:	0800c070 	.word	0x0800c070

080071cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071d4:	f001 fa56 	bl	8008684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071d8:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071e2:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ea:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071f0:	4b27      	ldr	r3, [pc, #156]	; (8007290 <prvAddNewTaskToReadyList+0xc4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d110      	bne.n	800721a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071f8:	f000 fc26 	bl	8007a48 <prvInitialiseTaskLists>
 80071fc:	e00d      	b.n	800721a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071fe:	4b26      	ldr	r3, [pc, #152]	; (8007298 <prvAddNewTaskToReadyList+0xcc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007206:	4b23      	ldr	r3, [pc, #140]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	429a      	cmp	r2, r3
 8007212:	d802      	bhi.n	800721a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007214:	4a1f      	ldr	r2, [pc, #124]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800721a:	4b20      	ldr	r3, [pc, #128]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3301      	adds	r3, #1
 8007220:	4a1e      	ldr	r2, [pc, #120]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 8007222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007224:	4b1d      	ldr	r3, [pc, #116]	; (800729c <prvAddNewTaskToReadyList+0xd0>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <prvAddNewTaskToReadyList+0xd4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d903      	bls.n	8007240 <prvAddNewTaskToReadyList+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <prvAddNewTaskToReadyList+0xd4>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <prvAddNewTaskToReadyList+0xd8>)
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7ff f80b 	bl	8006272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800725c:	f001 fa42 	bl	80086e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <prvAddNewTaskToReadyList+0xcc>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00e      	beq.n	8007286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <prvAddNewTaskToReadyList+0xc8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	429a      	cmp	r2, r3
 8007274:	d207      	bcs.n	8007286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <prvAddNewTaskToReadyList+0xdc>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	2000ad10 	.word	0x2000ad10
 8007294:	2000a83c 	.word	0x2000a83c
 8007298:	2000ad1c 	.word	0x2000ad1c
 800729c:	2000ad2c 	.word	0x2000ad2c
 80072a0:	2000ad18 	.word	0x2000ad18
 80072a4:	2000a840 	.word	0x2000a840
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d017      	beq.n	80072ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <vTaskDelay+0x60>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <vTaskDelay+0x30>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	60bb      	str	r3, [r7, #8]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072dc:	f000 f88a 	bl	80073f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fcfe 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072e8:	f000 f892 	bl	8007410 <xTaskResumeAll>
 80072ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d107      	bne.n	8007304 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072f4:	4b06      	ldr	r3, [pc, #24]	; (8007310 <vTaskDelay+0x64>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	2000ad38 	.word	0x2000ad38
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007322:	463a      	mov	r2, r7
 8007324:	1d39      	adds	r1, r7, #4
 8007326:	f107 0308 	add.w	r3, r7, #8
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe ff40 	bl	80061b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	9202      	str	r2, [sp, #8]
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	460a      	mov	r2, r1
 8007342:	4924      	ldr	r1, [pc, #144]	; (80073d4 <vTaskStartScheduler+0xc0>)
 8007344:	4824      	ldr	r0, [pc, #144]	; (80073d8 <vTaskStartScheduler+0xc4>)
 8007346:	f7ff fdf9 	bl	8006f3c <xTaskCreateStatic>
 800734a:	4603      	mov	r3, r0
 800734c:	4a23      	ldr	r2, [pc, #140]	; (80073dc <vTaskStartScheduler+0xc8>)
 800734e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007350:	4b22      	ldr	r3, [pc, #136]	; (80073dc <vTaskStartScheduler+0xc8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007358:	2301      	movs	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e001      	b.n	8007362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d102      	bne.n	800736e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007368:	f000 fd10 	bl	8007d8c <xTimerCreateTimerTask>
 800736c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d11b      	bne.n	80073ac <vTaskStartScheduler+0x98>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	613b      	str	r3, [r7, #16]
}
 8007386:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <vTaskStartScheduler+0xcc>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3354      	adds	r3, #84	; 0x54
 800738e:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <vTaskStartScheduler+0xd0>)
 8007390:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <vTaskStartScheduler+0xd4>)
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800739a:	4b14      	ldr	r3, [pc, #80]	; (80073ec <vTaskStartScheduler+0xd8>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <vTaskStartScheduler+0xdc>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073a6:	f001 f8cb 	bl	8008540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073aa:	e00e      	b.n	80073ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d10a      	bne.n	80073ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <vTaskStartScheduler+0xb4>
}
 80073ca:	bf00      	nop
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	08009714 	.word	0x08009714
 80073d8:	08007a19 	.word	0x08007a19
 80073dc:	2000ad34 	.word	0x2000ad34
 80073e0:	2000a83c 	.word	0x2000a83c
 80073e4:	20000030 	.word	0x20000030
 80073e8:	2000ad30 	.word	0x2000ad30
 80073ec:	2000ad1c 	.word	0x2000ad1c
 80073f0:	2000ad14 	.word	0x2000ad14

080073f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <vTaskSuspendAll+0x18>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3301      	adds	r3, #1
 80073fe:	4a03      	ldr	r2, [pc, #12]	; (800740c <vTaskSuspendAll+0x18>)
 8007400:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007402:	bf00      	nop
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	2000ad38 	.word	0x2000ad38

08007410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800741a:	2300      	movs	r3, #0
 800741c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800741e:	4b42      	ldr	r3, [pc, #264]	; (8007528 <xTaskResumeAll+0x118>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <xTaskResumeAll+0x2c>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	603b      	str	r3, [r7, #0]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800743c:	f001 f922 	bl	8008684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007440:	4b39      	ldr	r3, [pc, #228]	; (8007528 <xTaskResumeAll+0x118>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3b01      	subs	r3, #1
 8007446:	4a38      	ldr	r2, [pc, #224]	; (8007528 <xTaskResumeAll+0x118>)
 8007448:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <xTaskResumeAll+0x118>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d162      	bne.n	8007518 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007452:	4b36      	ldr	r3, [pc, #216]	; (800752c <xTaskResumeAll+0x11c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d05e      	beq.n	8007518 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800745a:	e02f      	b.n	80074bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800745c:	4b34      	ldr	r3, [pc, #208]	; (8007530 <xTaskResumeAll+0x120>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3318      	adds	r3, #24
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe ff5f 	bl	800632c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3304      	adds	r3, #4
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe ff5a 	bl	800632c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4b2d      	ldr	r3, [pc, #180]	; (8007534 <xTaskResumeAll+0x124>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <xTaskResumeAll+0x7c>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <xTaskResumeAll+0x124>)
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4a27      	ldr	r2, [pc, #156]	; (8007538 <xTaskResumeAll+0x128>)
 800749a:	441a      	add	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7fe fee5 	bl	8006272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	4b23      	ldr	r3, [pc, #140]	; (800753c <xTaskResumeAll+0x12c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d302      	bcc.n	80074bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074b6:	4b22      	ldr	r3, [pc, #136]	; (8007540 <xTaskResumeAll+0x130>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074bc:	4b1c      	ldr	r3, [pc, #112]	; (8007530 <xTaskResumeAll+0x120>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1cb      	bne.n	800745c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074ca:	f000 fb5f 	bl	8007b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074ce:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <xTaskResumeAll+0x134>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d010      	beq.n	80074fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074da:	f000 f847 	bl	800756c <xTaskIncrementTick>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80074e4:	4b16      	ldr	r3, [pc, #88]	; (8007540 <xTaskResumeAll+0x130>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1f1      	bne.n	80074da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <xTaskResumeAll+0x134>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xTaskResumeAll+0x130>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <xTaskResumeAll+0x138>)
 800750a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007518:	f001 f8e4 	bl	80086e4 <vPortExitCritical>

	return xAlreadyYielded;
 800751c:	68bb      	ldr	r3, [r7, #8]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	2000ad38 	.word	0x2000ad38
 800752c:	2000ad10 	.word	0x2000ad10
 8007530:	2000acd0 	.word	0x2000acd0
 8007534:	2000ad18 	.word	0x2000ad18
 8007538:	2000a840 	.word	0x2000a840
 800753c:	2000a83c 	.word	0x2000a83c
 8007540:	2000ad24 	.word	0x2000ad24
 8007544:	2000ad20 	.word	0x2000ad20
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <xTaskGetTickCount+0x1c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007558:	687b      	ldr	r3, [r7, #4]
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	2000ad14 	.word	0x2000ad14

0800756c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007576:	4b4f      	ldr	r3, [pc, #316]	; (80076b4 <xTaskIncrementTick+0x148>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 808f 	bne.w	800769e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007580:	4b4d      	ldr	r3, [pc, #308]	; (80076b8 <xTaskIncrementTick+0x14c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007588:	4a4b      	ldr	r2, [pc, #300]	; (80076b8 <xTaskIncrementTick+0x14c>)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d120      	bne.n	80075d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007594:	4b49      	ldr	r3, [pc, #292]	; (80076bc <xTaskIncrementTick+0x150>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	603b      	str	r3, [r7, #0]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <xTaskIncrementTick+0x46>
 80075b4:	4b41      	ldr	r3, [pc, #260]	; (80076bc <xTaskIncrementTick+0x150>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <xTaskIncrementTick+0x154>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a3f      	ldr	r2, [pc, #252]	; (80076bc <xTaskIncrementTick+0x150>)
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	4a3f      	ldr	r2, [pc, #252]	; (80076c0 <xTaskIncrementTick+0x154>)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	4b3e      	ldr	r3, [pc, #248]	; (80076c4 <xTaskIncrementTick+0x158>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3301      	adds	r3, #1
 80075ce:	4a3d      	ldr	r2, [pc, #244]	; (80076c4 <xTaskIncrementTick+0x158>)
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	f000 fadb 	bl	8007b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075d6:	4b3c      	ldr	r3, [pc, #240]	; (80076c8 <xTaskIncrementTick+0x15c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d349      	bcc.n	8007674 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e0:	4b36      	ldr	r3, [pc, #216]	; (80076bc <xTaskIncrementTick+0x150>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ea:	4b37      	ldr	r3, [pc, #220]	; (80076c8 <xTaskIncrementTick+0x15c>)
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	601a      	str	r2, [r3, #0]
					break;
 80075f2:	e03f      	b.n	8007674 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f4:	4b31      	ldr	r3, [pc, #196]	; (80076bc <xTaskIncrementTick+0x150>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d203      	bcs.n	8007614 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800760c:	4a2e      	ldr	r2, [pc, #184]	; (80076c8 <xTaskIncrementTick+0x15c>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007612:	e02f      	b.n	8007674 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	3304      	adds	r3, #4
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fe87 	bl	800632c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d004      	beq.n	8007630 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	3318      	adds	r3, #24
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fe7e 	bl	800632c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	4b25      	ldr	r3, [pc, #148]	; (80076cc <xTaskIncrementTick+0x160>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d903      	bls.n	8007644 <xTaskIncrementTick+0xd8>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	4a22      	ldr	r2, [pc, #136]	; (80076cc <xTaskIncrementTick+0x160>)
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <xTaskIncrementTick+0x164>)
 8007652:	441a      	add	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3304      	adds	r3, #4
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7fe fe09 	bl	8006272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <xTaskIncrementTick+0x168>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	429a      	cmp	r2, r3
 800766c:	d3b8      	bcc.n	80075e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800766e:	2301      	movs	r3, #1
 8007670:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007672:	e7b5      	b.n	80075e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007674:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <xTaskIncrementTick+0x168>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767a:	4915      	ldr	r1, [pc, #84]	; (80076d0 <xTaskIncrementTick+0x164>)
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d901      	bls.n	8007690 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <xTaskIncrementTick+0x16c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d007      	beq.n	80076a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007698:	2301      	movs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	e004      	b.n	80076a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <xTaskIncrementTick+0x170>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	4a0d      	ldr	r2, [pc, #52]	; (80076dc <xTaskIncrementTick+0x170>)
 80076a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076a8:	697b      	ldr	r3, [r7, #20]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	2000ad38 	.word	0x2000ad38
 80076b8:	2000ad14 	.word	0x2000ad14
 80076bc:	2000acc8 	.word	0x2000acc8
 80076c0:	2000accc 	.word	0x2000accc
 80076c4:	2000ad28 	.word	0x2000ad28
 80076c8:	2000ad30 	.word	0x2000ad30
 80076cc:	2000ad18 	.word	0x2000ad18
 80076d0:	2000a840 	.word	0x2000a840
 80076d4:	2000a83c 	.word	0x2000a83c
 80076d8:	2000ad24 	.word	0x2000ad24
 80076dc:	2000ad20 	.word	0x2000ad20

080076e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076e6:	4b2a      	ldr	r3, [pc, #168]	; (8007790 <vTaskSwitchContext+0xb0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076ee:	4b29      	ldr	r3, [pc, #164]	; (8007794 <vTaskSwitchContext+0xb4>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076f4:	e046      	b.n	8007784 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80076f6:	4b27      	ldr	r3, [pc, #156]	; (8007794 <vTaskSwitchContext+0xb4>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fc:	4b26      	ldr	r3, [pc, #152]	; (8007798 <vTaskSwitchContext+0xb8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	e010      	b.n	8007726 <vTaskSwitchContext+0x46>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <vTaskSwitchContext+0x40>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	607b      	str	r3, [r7, #4]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <vTaskSwitchContext+0x3e>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3b01      	subs	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	491d      	ldr	r1, [pc, #116]	; (800779c <vTaskSwitchContext+0xbc>)
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0e4      	beq.n	8007704 <vTaskSwitchContext+0x24>
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4a15      	ldr	r2, [pc, #84]	; (800779c <vTaskSwitchContext+0xbc>)
 8007746:	4413      	add	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	605a      	str	r2, [r3, #4]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3308      	adds	r3, #8
 800775c:	429a      	cmp	r2, r3
 800775e:	d104      	bne.n	800776a <vTaskSwitchContext+0x8a>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	605a      	str	r2, [r3, #4]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4a0b      	ldr	r2, [pc, #44]	; (80077a0 <vTaskSwitchContext+0xc0>)
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	4a08      	ldr	r2, [pc, #32]	; (8007798 <vTaskSwitchContext+0xb8>)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <vTaskSwitchContext+0xc0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3354      	adds	r3, #84	; 0x54
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <vTaskSwitchContext+0xc4>)
 8007782:	6013      	str	r3, [r2, #0]
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	2000ad38 	.word	0x2000ad38
 8007794:	2000ad24 	.word	0x2000ad24
 8007798:	2000ad18 	.word	0x2000ad18
 800779c:	2000a840 	.word	0x2000a840
 80077a0:	2000a83c 	.word	0x2000a83c
 80077a4:	20000030 	.word	0x20000030

080077a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077ce:	4b07      	ldr	r3, [pc, #28]	; (80077ec <vTaskPlaceOnEventList+0x44>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3318      	adds	r3, #24
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fe fd6f 	bl	80062ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077dc:	2101      	movs	r1, #1
 80077de:	6838      	ldr	r0, [r7, #0]
 80077e0:	f000 fa80 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	2000a83c 	.word	0x2000a83c

080077f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	617b      	str	r3, [r7, #20]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007818:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <vTaskPlaceOnEventListRestricted+0x54>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3318      	adds	r3, #24
 800781e:	4619      	mov	r1, r3
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7fe fd26 	bl	8006272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800782c:	f04f 33ff 	mov.w	r3, #4294967295
 8007830:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	68b8      	ldr	r0, [r7, #8]
 8007836:	f000 fa55 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
	}
 800783a:	bf00      	nop
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	2000a83c 	.word	0x2000a83c

08007848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60fb      	str	r3, [r7, #12]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	3318      	adds	r3, #24
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fd57 	bl	800632c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800787e:	4b1e      	ldr	r3, [pc, #120]	; (80078f8 <xTaskRemoveFromEventList+0xb0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d11d      	bne.n	80078c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	3304      	adds	r3, #4
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe fd4e 	bl	800632c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	4b19      	ldr	r3, [pc, #100]	; (80078fc <xTaskRemoveFromEventList+0xb4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d903      	bls.n	80078a4 <xTaskRemoveFromEventList+0x5c>
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a16      	ldr	r2, [pc, #88]	; (80078fc <xTaskRemoveFromEventList+0xb4>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a13      	ldr	r2, [pc, #76]	; (8007900 <xTaskRemoveFromEventList+0xb8>)
 80078b2:	441a      	add	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe fcd9 	bl	8006272 <vListInsertEnd>
 80078c0:	e005      	b.n	80078ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3318      	adds	r3, #24
 80078c6:	4619      	mov	r1, r3
 80078c8:	480e      	ldr	r0, [pc, #56]	; (8007904 <xTaskRemoveFromEventList+0xbc>)
 80078ca:	f7fe fcd2 	bl	8006272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <xTaskRemoveFromEventList+0xc0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	429a      	cmp	r2, r3
 80078da:	d905      	bls.n	80078e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078dc:	2301      	movs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078e0:	4b0a      	ldr	r3, [pc, #40]	; (800790c <xTaskRemoveFromEventList+0xc4>)
 80078e2:	2201      	movs	r2, #1
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e001      	b.n	80078ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078ec:	697b      	ldr	r3, [r7, #20]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	2000ad38 	.word	0x2000ad38
 80078fc:	2000ad18 	.word	0x2000ad18
 8007900:	2000a840 	.word	0x2000a840
 8007904:	2000acd0 	.word	0x2000acd0
 8007908:	2000a83c 	.word	0x2000a83c
 800790c:	2000ad24 	.word	0x2000ad24

08007910 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <vTaskInternalSetTimeOutState+0x24>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <vTaskInternalSetTimeOutState+0x28>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	605a      	str	r2, [r3, #4]
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	2000ad28 	.word	0x2000ad28
 8007938:	2000ad14 	.word	0x2000ad14

0800793c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	613b      	str	r3, [r7, #16]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60fb      	str	r3, [r7, #12]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800797e:	f000 fe81 	bl	8008684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007982:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <xTaskCheckForTimeOut+0xbc>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d102      	bne.n	80079a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e023      	b.n	80079ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4b15      	ldr	r3, [pc, #84]	; (80079fc <xTaskCheckForTimeOut+0xc0>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d007      	beq.n	80079be <xTaskCheckForTimeOut+0x82>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d302      	bcc.n	80079be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	e015      	b.n	80079ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d20b      	bcs.n	80079e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff9b 	bl	8007910 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	e004      	b.n	80079ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079e6:	2301      	movs	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079ea:	f000 fe7b 	bl	80086e4 <vPortExitCritical>

	return xReturn;
 80079ee:	69fb      	ldr	r3, [r7, #28]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	2000ad14 	.word	0x2000ad14
 80079fc:	2000ad28 	.word	0x2000ad28

08007a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a04:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <vTaskMissedYield+0x14>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	601a      	str	r2, [r3, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	2000ad24 	.word	0x2000ad24

08007a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a20:	f000 f852 	bl	8007ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a24:	4b06      	ldr	r3, [pc, #24]	; (8007a40 <prvIdleTask+0x28>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d9f9      	bls.n	8007a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <prvIdleTask+0x2c>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a3c:	e7f0      	b.n	8007a20 <prvIdleTask+0x8>
 8007a3e:	bf00      	nop
 8007a40:	2000a840 	.word	0x2000a840
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a4e:	2300      	movs	r3, #0
 8007a50:	607b      	str	r3, [r7, #4]
 8007a52:	e00c      	b.n	8007a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <prvInitialiseTaskLists+0x60>)
 8007a60:	4413      	add	r3, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fbd8 	bl	8006218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	607b      	str	r3, [r7, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b37      	cmp	r3, #55	; 0x37
 8007a72:	d9ef      	bls.n	8007a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a74:	480d      	ldr	r0, [pc, #52]	; (8007aac <prvInitialiseTaskLists+0x64>)
 8007a76:	f7fe fbcf 	bl	8006218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a7a:	480d      	ldr	r0, [pc, #52]	; (8007ab0 <prvInitialiseTaskLists+0x68>)
 8007a7c:	f7fe fbcc 	bl	8006218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a80:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <prvInitialiseTaskLists+0x6c>)
 8007a82:	f7fe fbc9 	bl	8006218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a86:	480c      	ldr	r0, [pc, #48]	; (8007ab8 <prvInitialiseTaskLists+0x70>)
 8007a88:	f7fe fbc6 	bl	8006218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a8c:	480b      	ldr	r0, [pc, #44]	; (8007abc <prvInitialiseTaskLists+0x74>)
 8007a8e:	f7fe fbc3 	bl	8006218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <prvInitialiseTaskLists+0x78>)
 8007a94:	4a05      	ldr	r2, [pc, #20]	; (8007aac <prvInitialiseTaskLists+0x64>)
 8007a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <prvInitialiseTaskLists+0x7c>)
 8007a9a:	4a05      	ldr	r2, [pc, #20]	; (8007ab0 <prvInitialiseTaskLists+0x68>)
 8007a9c:	601a      	str	r2, [r3, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	2000a840 	.word	0x2000a840
 8007aac:	2000aca0 	.word	0x2000aca0
 8007ab0:	2000acb4 	.word	0x2000acb4
 8007ab4:	2000acd0 	.word	0x2000acd0
 8007ab8:	2000ace4 	.word	0x2000ace4
 8007abc:	2000acfc 	.word	0x2000acfc
 8007ac0:	2000acc8 	.word	0x2000acc8
 8007ac4:	2000accc 	.word	0x2000accc

08007ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ace:	e019      	b.n	8007b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ad0:	f000 fdd8 	bl	8008684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <prvCheckTasksWaitingTermination+0x50>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe fc23 	bl	800632c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <prvCheckTasksWaitingTermination+0x54>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <prvCheckTasksWaitingTermination+0x54>)
 8007aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <prvCheckTasksWaitingTermination+0x58>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <prvCheckTasksWaitingTermination+0x58>)
 8007af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007afa:	f000 fdf3 	bl	80086e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f810 	bl	8007b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b04:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <prvCheckTasksWaitingTermination+0x58>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e1      	bne.n	8007ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	2000ace4 	.word	0x2000ace4
 8007b1c:	2000ad10 	.word	0x2000ad10
 8007b20:	2000acf8 	.word	0x2000acf8

08007b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3354      	adds	r3, #84	; 0x54
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 f95d 	bl	8008df0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d108      	bne.n	8007b52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 ff8b 	bl	8008a60 <vPortFree>
				vPortFree( pxTCB );
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 ff88 	bl	8008a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b50:	e018      	b.n	8007b84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d103      	bne.n	8007b64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 ff7f 	bl	8008a60 <vPortFree>
	}
 8007b62:	e00f      	b.n	8007b84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d00a      	beq.n	8007b84 <prvDeleteTCB+0x60>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	60fb      	str	r3, [r7, #12]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <prvDeleteTCB+0x5e>
	}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <prvResetNextTaskUnblockTime+0x38>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8007b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ba4:	e008      	b.n	8007bb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba6:	4b07      	ldr	r3, [pc, #28]	; (8007bc4 <prvResetNextTaskUnblockTime+0x38>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	4a04      	ldr	r2, [pc, #16]	; (8007bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8007bb6:	6013      	str	r3, [r2, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	2000acc8 	.word	0x2000acc8
 8007bc8:	2000ad30 	.word	0x2000ad30

08007bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <xTaskGetSchedulerState+0x34>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d102      	bne.n	8007be0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	607b      	str	r3, [r7, #4]
 8007bde:	e008      	b.n	8007bf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be0:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <xTaskGetSchedulerState+0x38>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007be8:	2302      	movs	r3, #2
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	e001      	b.n	8007bf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bf2:	687b      	ldr	r3, [r7, #4]
	}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	2000ad1c 	.word	0x2000ad1c
 8007c04:	2000ad38 	.word	0x2000ad38

08007c08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d056      	beq.n	8007ccc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c1e:	4b2e      	ldr	r3, [pc, #184]	; (8007cd8 <xTaskPriorityDisinherit+0xd0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d00a      	beq.n	8007c3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	60fb      	str	r3, [r7, #12]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60bb      	str	r3, [r7, #8]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c60:	1e5a      	subs	r2, r3, #1
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d02c      	beq.n	8007ccc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d128      	bne.n	8007ccc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fb54 	bl	800632c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <xTaskPriorityDisinherit+0xd4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d903      	bls.n	8007cac <xTaskPriorityDisinherit+0xa4>
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4a0c      	ldr	r2, [pc, #48]	; (8007cdc <xTaskPriorityDisinherit+0xd4>)
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <xTaskPriorityDisinherit+0xd8>)
 8007cba:	441a      	add	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	f7fe fad5 	bl	8006272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ccc:	697b      	ldr	r3, [r7, #20]
	}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000a83c 	.word	0x2000a83c
 8007cdc:	2000ad18 	.word	0x2000ad18
 8007ce0:	2000a840 	.word	0x2000a840

08007ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf4:	4b20      	ldr	r3, [pc, #128]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fb16 	bl	800632c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d10a      	bne.n	8007d1e <prvAddCurrentTaskToDelayedList+0x3a>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d0e:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4819      	ldr	r0, [pc, #100]	; (8007d7c <prvAddCurrentTaskToDelayedList+0x98>)
 8007d18:	f7fe faab 	bl	8006272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d1c:	e026      	b.n	8007d6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d209      	bcs.n	8007d4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f7fe fab9 	bl	80062ba <vListInsert>
}
 8007d48:	e010      	b.n	8007d6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe faaf 	bl	80062ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d202      	bcs.n	8007d6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d66:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6013      	str	r3, [r2, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	2000ad14 	.word	0x2000ad14
 8007d78:	2000a83c 	.word	0x2000a83c
 8007d7c:	2000acfc 	.word	0x2000acfc
 8007d80:	2000accc 	.word	0x2000accc
 8007d84:	2000acc8 	.word	0x2000acc8
 8007d88:	2000ad30 	.word	0x2000ad30

08007d8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d96:	f000 fb07 	bl	80083a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <xTimerCreateTimerTask+0x80>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d021      	beq.n	8007de6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007daa:	1d3a      	adds	r2, r7, #4
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	f107 030c 	add.w	r3, r7, #12
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fa15 	bl	80061e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	9202      	str	r2, [sp, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	460a      	mov	r2, r1
 8007dcc:	4910      	ldr	r1, [pc, #64]	; (8007e10 <xTimerCreateTimerTask+0x84>)
 8007dce:	4811      	ldr	r0, [pc, #68]	; (8007e14 <xTimerCreateTimerTask+0x88>)
 8007dd0:	f7ff f8b4 	bl	8006f3c <xTaskCreateStatic>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4a10      	ldr	r2, [pc, #64]	; (8007e18 <xTimerCreateTimerTask+0x8c>)
 8007dd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dda:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <xTimerCreateTimerTask+0x8c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007de2:	2301      	movs	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	613b      	str	r3, [r7, #16]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e02:	697b      	ldr	r3, [r7, #20]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	2000ad6c 	.word	0x2000ad6c
 8007e10:	0800971c 	.word	0x0800971c
 8007e14:	08007f51 	.word	0x08007f51
 8007e18:	2000ad70 	.word	0x2000ad70

08007e1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	623b      	str	r3, [r7, #32]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e4a:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d02a      	beq.n	8007ea8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	dc18      	bgt.n	8007e96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e64:	f7ff feb2 	bl	8007bcc <xTaskGetSchedulerState>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d109      	bne.n	8007e82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e6e:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	f107 0110 	add.w	r1, r7, #16
 8007e76:	2300      	movs	r3, #0
 8007e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7a:	f7fe fc29 	bl	80066d0 <xQueueGenericSend>
 8007e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8007e80:	e012      	b.n	8007ea8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	f107 0110 	add.w	r1, r7, #16
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f7fe fc1f 	bl	80066d0 <xQueueGenericSend>
 8007e92:	6278      	str	r0, [r7, #36]	; 0x24
 8007e94:	e008      	b.n	8007ea8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	f107 0110 	add.w	r1, r7, #16
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	f7fe fd13 	bl	80068cc <xQueueGenericSendFromISR>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3728      	adds	r7, #40	; 0x28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	2000ad6c 	.word	0x2000ad6c

08007eb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec2:	4b22      	ldr	r3, [pc, #136]	; (8007f4c <prvProcessExpiredTimer+0x94>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fa2b 	bl	800632c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d022      	beq.n	8007f2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	18d1      	adds	r1, r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	6978      	ldr	r0, [r7, #20]
 8007ef2:	f000 f8d1 	bl	8008098 <prvInsertTimerInActiveList>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01f      	beq.n	8007f3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007efc:	2300      	movs	r3, #0
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	2300      	movs	r3, #0
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	2100      	movs	r1, #0
 8007f06:	6978      	ldr	r0, [r7, #20]
 8007f08:	f7ff ff88 	bl	8007e1c <xTimerGenericCommand>
 8007f0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d113      	bne.n	8007f3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f30:	f023 0301 	bic.w	r3, r3, #1
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	6978      	ldr	r0, [r7, #20]
 8007f42:	4798      	blx	r3
}
 8007f44:	bf00      	nop
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	2000ad64 	.word	0x2000ad64

08007f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f58:	f107 0308 	add.w	r3, r7, #8
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f857 	bl	8008010 <prvGetNextExpireTime>
 8007f62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4619      	mov	r1, r3
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f803 	bl	8007f74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f6e:	f000 f8d5 	bl	800811c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f72:	e7f1      	b.n	8007f58 <prvTimerTask+0x8>

08007f74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f7e:	f7ff fa39 	bl	80073f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f82:	f107 0308 	add.w	r3, r7, #8
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f866 	bl	8008058 <prvSampleTimeNow>
 8007f8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d130      	bne.n	8007ff6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <prvProcessTimerOrBlockTask+0x3c>
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d806      	bhi.n	8007fb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fa2:	f7ff fa35 	bl	8007410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ff85 	bl	8007eb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fae:	e024      	b.n	8007ffa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fb6:	4b13      	ldr	r3, [pc, #76]	; (8008004 <prvProcessTimerOrBlockTask+0x90>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <prvProcessTimerOrBlockTask+0x50>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <prvProcessTimerOrBlockTask+0x52>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fc8:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <prvProcessTimerOrBlockTask+0x94>)
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	f7fe ff7d 	bl	8006ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fda:	f7ff fa19 	bl	8007410 <xTaskResumeAll>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <prvProcessTimerOrBlockTask+0x98>)
 8007fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	f3bf 8f6f 	isb	sy
}
 8007ff4:	e001      	b.n	8007ffa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ff6:	f7ff fa0b 	bl	8007410 <xTaskResumeAll>
}
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	2000ad68 	.word	0x2000ad68
 8008008:	2000ad6c 	.word	0x2000ad6c
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008018:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <prvGetNextExpireTime+0x44>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <prvGetNextExpireTime+0x16>
 8008022:	2201      	movs	r2, #1
 8008024:	e000      	b.n	8008028 <prvGetNextExpireTime+0x18>
 8008026:	2200      	movs	r2, #0
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d105      	bne.n	8008040 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008034:	4b07      	ldr	r3, [pc, #28]	; (8008054 <prvGetNextExpireTime+0x44>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	e001      	b.n	8008044 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008044:	68fb      	ldr	r3, [r7, #12]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	2000ad64 	.word	0x2000ad64

08008058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008060:	f7ff fa74 	bl	800754c <xTaskGetTickCount>
 8008064:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008066:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <prvSampleTimeNow+0x3c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	429a      	cmp	r2, r3
 800806e:	d205      	bcs.n	800807c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008070:	f000 f936 	bl	80082e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e002      	b.n	8008082 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008082:	4a04      	ldr	r2, [pc, #16]	; (8008094 <prvSampleTimeNow+0x3c>)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	2000ad74 	.word	0x2000ad74

08008098 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d812      	bhi.n	80080e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	1ad2      	subs	r2, r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e01b      	b.n	800810a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080d2:	4b10      	ldr	r3, [pc, #64]	; (8008114 <prvInsertTimerInActiveList+0x7c>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7fe f8ec 	bl	80062ba <vListInsert>
 80080e2:	e012      	b.n	800810a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d206      	bcs.n	80080fa <prvInsertTimerInActiveList+0x62>
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d302      	bcc.n	80080fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	e007      	b.n	800810a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <prvInsertTimerInActiveList+0x80>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3304      	adds	r3, #4
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7fe f8d8 	bl	80062ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800810a:	697b      	ldr	r3, [r7, #20]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	2000ad68 	.word	0x2000ad68
 8008118:	2000ad64 	.word	0x2000ad64

0800811c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08e      	sub	sp, #56	; 0x38
 8008120:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008122:	e0ca      	b.n	80082ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	da18      	bge.n	800815c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800812a:	1d3b      	adds	r3, r7, #4
 800812c:	3304      	adds	r3, #4
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	61fb      	str	r3, [r7, #28]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008152:	6850      	ldr	r0, [r2, #4]
 8008154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008156:	6892      	ldr	r2, [r2, #8]
 8008158:	4611      	mov	r1, r2
 800815a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f2c0 80aa 	blt.w	80082b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	3304      	adds	r3, #4
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe f8d9 	bl	800632c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800817a:	463b      	mov	r3, r7
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ff6b 	bl	8008058 <prvSampleTimeNow>
 8008182:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b09      	cmp	r3, #9
 8008188:	f200 8097 	bhi.w	80082ba <prvProcessReceivedCommands+0x19e>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <prvProcessReceivedCommands+0x78>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081bd 	.word	0x080081bd
 8008198:	080081bd 	.word	0x080081bd
 800819c:	080081bd 	.word	0x080081bd
 80081a0:	08008231 	.word	0x08008231
 80081a4:	08008245 	.word	0x08008245
 80081a8:	0800828f 	.word	0x0800828f
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081bd 	.word	0x080081bd
 80081b4:	08008231 	.word	0x08008231
 80081b8:	08008245 	.word	0x08008245
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	18d1      	adds	r1, r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081dc:	f7ff ff5c 	bl	8008098 <prvInsertTimerInActiveList>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d069      	beq.n	80082ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d05e      	beq.n	80082ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	441a      	add	r2, r3
 8008204:	2300      	movs	r3, #0
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	2100      	movs	r1, #0
 800820c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800820e:	f7ff fe05 	bl	8007e1c <xTimerGenericCommand>
 8008212:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d14f      	bne.n	80082ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	61bb      	str	r3, [r7, #24]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008236:	f023 0301 	bic.w	r3, r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008242:	e03a      	b.n	80082ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	617b      	str	r3, [r7, #20]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	18d1      	adds	r1, r2, r3
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008288:	f7ff ff06 	bl	8008098 <prvInsertTimerInActiveList>
					break;
 800828c:	e015      	b.n	80082ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800829c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800829e:	f000 fbdf 	bl	8008a60 <vPortFree>
 80082a2:	e00a      	b.n	80082ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082aa:	f023 0301 	bic.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082b6:	e000      	b.n	80082ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082ba:	4b08      	ldr	r3, [pc, #32]	; (80082dc <prvProcessReceivedCommands+0x1c0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	1d39      	adds	r1, r7, #4
 80082c0:	2200      	movs	r2, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fb9e 	bl	8006a04 <xQueueReceive>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f47f af2a 	bne.w	8008124 <prvProcessReceivedCommands+0x8>
	}
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	3730      	adds	r7, #48	; 0x30
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	2000ad6c 	.word	0x2000ad6c

080082e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082e6:	e048      	b.n	800837a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082e8:	4b2d      	ldr	r3, [pc, #180]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f2:	4b2b      	ldr	r3, [pc, #172]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3304      	adds	r3, #4
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe f813 	bl	800632c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d02e      	beq.n	800837a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4413      	add	r3, r2
 8008324:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	d90e      	bls.n	800834c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800833a:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f7fd ffb8 	bl	80062ba <vListInsert>
 800834a:	e016      	b.n	800837a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800834c:	2300      	movs	r3, #0
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	2300      	movs	r3, #0
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	2100      	movs	r1, #0
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fd60 	bl	8007e1c <xTimerGenericCommand>
 800835c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	603b      	str	r3, [r7, #0]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1b1      	bne.n	80082e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008384:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800838a:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <prvSwitchTimerLists+0xc4>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a04      	ldr	r2, [pc, #16]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 8008390:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008392:	4a04      	ldr	r2, [pc, #16]	; (80083a4 <prvSwitchTimerLists+0xc4>)
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	6013      	str	r3, [r2, #0]
}
 8008398:	bf00      	nop
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	2000ad64 	.word	0x2000ad64
 80083a4:	2000ad68 	.word	0x2000ad68

080083a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083ae:	f000 f969 	bl	8008684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d120      	bne.n	80083fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083ba:	4814      	ldr	r0, [pc, #80]	; (800840c <prvCheckForValidListAndQueue+0x64>)
 80083bc:	f7fd ff2c 	bl	8006218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083c0:	4813      	ldr	r0, [pc, #76]	; (8008410 <prvCheckForValidListAndQueue+0x68>)
 80083c2:	f7fd ff29 	bl	8006218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083c6:	4b13      	ldr	r3, [pc, #76]	; (8008414 <prvCheckForValidListAndQueue+0x6c>)
 80083c8:	4a10      	ldr	r2, [pc, #64]	; (800840c <prvCheckForValidListAndQueue+0x64>)
 80083ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <prvCheckForValidListAndQueue+0x70>)
 80083ce:	4a10      	ldr	r2, [pc, #64]	; (8008410 <prvCheckForValidListAndQueue+0x68>)
 80083d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083d2:	2300      	movs	r3, #0
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <prvCheckForValidListAndQueue+0x74>)
 80083d8:	4a11      	ldr	r2, [pc, #68]	; (8008420 <prvCheckForValidListAndQueue+0x78>)
 80083da:	2110      	movs	r1, #16
 80083dc:	200a      	movs	r0, #10
 80083de:	f7fe f837 	bl	8006450 <xQueueGenericCreateStatic>
 80083e2:	4603      	mov	r3, r0
 80083e4:	4a08      	ldr	r2, [pc, #32]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083e8:	4b07      	ldr	r3, [pc, #28]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	490b      	ldr	r1, [pc, #44]	; (8008424 <prvCheckForValidListAndQueue+0x7c>)
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fd18 	bl	8006e2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083fc:	f000 f972 	bl	80086e4 <vPortExitCritical>
}
 8008400:	bf00      	nop
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	2000ad6c 	.word	0x2000ad6c
 800840c:	2000ad3c 	.word	0x2000ad3c
 8008410:	2000ad50 	.word	0x2000ad50
 8008414:	2000ad64 	.word	0x2000ad64
 8008418:	2000ad68 	.word	0x2000ad68
 800841c:	2000ae18 	.word	0x2000ae18
 8008420:	2000ad78 	.word	0x2000ad78
 8008424:	08009724 	.word	0x08009724

08008428 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3b04      	subs	r3, #4
 8008438:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b04      	subs	r3, #4
 8008446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0201 	bic.w	r2, r3, #1
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3b04      	subs	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008458:	4a0c      	ldr	r2, [pc, #48]	; (800848c <pxPortInitialiseStack+0x64>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3b14      	subs	r3, #20
 8008462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3b04      	subs	r3, #4
 800846e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f06f 0202 	mvn.w	r2, #2
 8008476:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3b20      	subs	r3, #32
 800847c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	08008491 	.word	0x08008491

08008490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <prvTaskExitError+0x54>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d00a      	beq.n	80084ba <prvTaskExitError+0x2a>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <prvTaskExitError+0x28>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60bb      	str	r3, [r7, #8]
}
 80084cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ce:	bf00      	nop
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0fc      	beq.n	80084d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	2000002c 	.word	0x2000002c
	...

080084f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084f0:	4b07      	ldr	r3, [pc, #28]	; (8008510 <pxCurrentTCBConst2>)
 80084f2:	6819      	ldr	r1, [r3, #0]
 80084f4:	6808      	ldr	r0, [r1, #0]
 80084f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	f380 8809 	msr	PSP, r0
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f380 8811 	msr	BASEPRI, r0
 800850a:	4770      	bx	lr
 800850c:	f3af 8000 	nop.w

08008510 <pxCurrentTCBConst2>:
 8008510:	2000a83c 	.word	0x2000a83c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop

08008518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008518:	4808      	ldr	r0, [pc, #32]	; (800853c <prvPortStartFirstTask+0x24>)
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	6800      	ldr	r0, [r0, #0]
 800851e:	f380 8808 	msr	MSP, r0
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8814 	msr	CONTROL, r0
 800852a:	b662      	cpsie	i
 800852c:	b661      	cpsie	f
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	df00      	svc	0
 8008538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800853a:	bf00      	nop
 800853c:	e000ed08 	.word	0xe000ed08

08008540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008546:	4b46      	ldr	r3, [pc, #280]	; (8008660 <xPortStartScheduler+0x120>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a46      	ldr	r2, [pc, #280]	; (8008664 <xPortStartScheduler+0x124>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d10a      	bne.n	8008566 <xPortStartScheduler+0x26>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	613b      	str	r3, [r7, #16]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008566:	4b3e      	ldr	r3, [pc, #248]	; (8008660 <xPortStartScheduler+0x120>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a3f      	ldr	r2, [pc, #252]	; (8008668 <xPortStartScheduler+0x128>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d10a      	bne.n	8008586 <xPortStartScheduler+0x46>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60fb      	str	r3, [r7, #12]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008586:	4b39      	ldr	r3, [pc, #228]	; (800866c <xPortStartScheduler+0x12c>)
 8008588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	22ff      	movs	r2, #255	; 0xff
 8008596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	4b31      	ldr	r3, [pc, #196]	; (8008670 <xPortStartScheduler+0x130>)
 80085ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085ae:	4b31      	ldr	r3, [pc, #196]	; (8008674 <xPortStartScheduler+0x134>)
 80085b0:	2207      	movs	r2, #7
 80085b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085b4:	e009      	b.n	80085ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085b6:	4b2f      	ldr	r3, [pc, #188]	; (8008674 <xPortStartScheduler+0x134>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	4a2d      	ldr	r2, [pc, #180]	; (8008674 <xPortStartScheduler+0x134>)
 80085be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b80      	cmp	r3, #128	; 0x80
 80085d4:	d0ef      	beq.n	80085b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085d6:	4b27      	ldr	r3, [pc, #156]	; (8008674 <xPortStartScheduler+0x134>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f1c3 0307 	rsb	r3, r3, #7
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d00a      	beq.n	80085f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	60bb      	str	r3, [r7, #8]
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085f8:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <xPortStartScheduler+0x134>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	4a1d      	ldr	r2, [pc, #116]	; (8008674 <xPortStartScheduler+0x134>)
 8008600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008602:	4b1c      	ldr	r3, [pc, #112]	; (8008674 <xPortStartScheduler+0x134>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800860a:	4a1a      	ldr	r2, [pc, #104]	; (8008674 <xPortStartScheduler+0x134>)
 800860c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	b2da      	uxtb	r2, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008616:	4b18      	ldr	r3, [pc, #96]	; (8008678 <xPortStartScheduler+0x138>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a17      	ldr	r2, [pc, #92]	; (8008678 <xPortStartScheduler+0x138>)
 800861c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <xPortStartScheduler+0x138>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a14      	ldr	r2, [pc, #80]	; (8008678 <xPortStartScheduler+0x138>)
 8008628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800862c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800862e:	f000 f8dd 	bl	80087ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008632:	4b12      	ldr	r3, [pc, #72]	; (800867c <xPortStartScheduler+0x13c>)
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008638:	f000 f8fc 	bl	8008834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800863c:	4b10      	ldr	r3, [pc, #64]	; (8008680 <xPortStartScheduler+0x140>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a0f      	ldr	r2, [pc, #60]	; (8008680 <xPortStartScheduler+0x140>)
 8008642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008648:	f7ff ff66 	bl	8008518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800864c:	f7ff f848 	bl	80076e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008650:	f7ff ff1e 	bl	8008490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	e000ed00 	.word	0xe000ed00
 8008664:	410fc271 	.word	0x410fc271
 8008668:	410fc270 	.word	0x410fc270
 800866c:	e000e400 	.word	0xe000e400
 8008670:	2000ae68 	.word	0x2000ae68
 8008674:	2000ae6c 	.word	0x2000ae6c
 8008678:	e000ed20 	.word	0xe000ed20
 800867c:	2000002c 	.word	0x2000002c
 8008680:	e000ef34 	.word	0xe000ef34

08008684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	607b      	str	r3, [r7, #4]
}
 800869c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800869e:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <vPortEnterCritical+0x58>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	4a0d      	ldr	r2, [pc, #52]	; (80086dc <vPortEnterCritical+0x58>)
 80086a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086a8:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <vPortEnterCritical+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d10f      	bne.n	80086d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <vPortEnterCritical+0x5c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	603b      	str	r3, [r7, #0]
}
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <vPortEnterCritical+0x4a>
	}
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	2000002c 	.word	0x2000002c
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086ea:	4b12      	ldr	r3, [pc, #72]	; (8008734 <vPortExitCritical+0x50>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <vPortExitCritical+0x24>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	607b      	str	r3, [r7, #4]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <vPortExitCritical+0x50>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3b01      	subs	r3, #1
 800870e:	4a09      	ldr	r2, [pc, #36]	; (8008734 <vPortExitCritical+0x50>)
 8008710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008712:	4b08      	ldr	r3, [pc, #32]	; (8008734 <vPortExitCritical+0x50>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <vPortExitCritical+0x42>
 800871a:	2300      	movs	r3, #0
 800871c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	f383 8811 	msr	BASEPRI, r3
}
 8008724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	2000002c 	.word	0x2000002c
	...

08008740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008740:	f3ef 8009 	mrs	r0, PSP
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <pxCurrentTCBConst>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f01e 0f10 	tst.w	lr, #16
 8008750:	bf08      	it	eq
 8008752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875a:	6010      	str	r0, [r2, #0]
 800875c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008764:	f380 8811 	msr	BASEPRI, r0
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f7fe ffb6 	bl	80076e0 <vTaskSwitchContext>
 8008774:	f04f 0000 	mov.w	r0, #0
 8008778:	f380 8811 	msr	BASEPRI, r0
 800877c:	bc09      	pop	{r0, r3}
 800877e:	6819      	ldr	r1, [r3, #0]
 8008780:	6808      	ldr	r0, [r1, #0]
 8008782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008786:	f01e 0f10 	tst.w	lr, #16
 800878a:	bf08      	it	eq
 800878c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008790:	f380 8809 	msr	PSP, r0
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	f3af 8000 	nop.w

080087a0 <pxCurrentTCBConst>:
 80087a0:	2000a83c 	.word	0x2000a83c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop

080087a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	607b      	str	r3, [r7, #4]
}
 80087c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087c2:	f7fe fed3 	bl	800756c <xTaskIncrementTick>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087cc:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <xPortSysTickHandler+0x40>)
 80087ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	2300      	movs	r3, #0
 80087d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f383 8811 	msr	BASEPRI, r3
}
 80087de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <vPortSetupTimerInterrupt+0x34>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <vPortSetupTimerInterrupt+0x38>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <vPortSetupTimerInterrupt+0x3c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a0a      	ldr	r2, [pc, #40]	; (800882c <vPortSetupTimerInterrupt+0x40>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	099b      	lsrs	r3, r3, #6
 8008808:	4a09      	ldr	r2, [pc, #36]	; (8008830 <vPortSetupTimerInterrupt+0x44>)
 800880a:	3b01      	subs	r3, #1
 800880c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800880e:	4b04      	ldr	r3, [pc, #16]	; (8008820 <vPortSetupTimerInterrupt+0x34>)
 8008810:	2207      	movs	r2, #7
 8008812:	601a      	str	r2, [r3, #0]
}
 8008814:	bf00      	nop
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	e000e010 	.word	0xe000e010
 8008824:	e000e018 	.word	0xe000e018
 8008828:	20000020 	.word	0x20000020
 800882c:	10624dd3 	.word	0x10624dd3
 8008830:	e000e014 	.word	0xe000e014

08008834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008844 <vPortEnableVFP+0x10>
 8008838:	6801      	ldr	r1, [r0, #0]
 800883a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800883e:	6001      	str	r1, [r0, #0]
 8008840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008842:	bf00      	nop
 8008844:	e000ed88 	.word	0xe000ed88

08008848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800884e:	f3ef 8305 	mrs	r3, IPSR
 8008852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b0f      	cmp	r3, #15
 8008858:	d914      	bls.n	8008884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800885a:	4a17      	ldr	r2, [pc, #92]	; (80088b8 <vPortValidateInterruptPriority+0x70>)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008864:	4b15      	ldr	r3, [pc, #84]	; (80088bc <vPortValidateInterruptPriority+0x74>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	7afa      	ldrb	r2, [r7, #11]
 800886a:	429a      	cmp	r2, r3
 800886c:	d20a      	bcs.n	8008884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008884:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <vPortValidateInterruptPriority+0x78>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800888c:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <vPortValidateInterruptPriority+0x7c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d90a      	bls.n	80088aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	603b      	str	r3, [r7, #0]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <vPortValidateInterruptPriority+0x60>
	}
 80088aa:	bf00      	nop
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	e000e3f0 	.word	0xe000e3f0
 80088bc:	2000ae68 	.word	0x2000ae68
 80088c0:	e000ed0c 	.word	0xe000ed0c
 80088c4:	2000ae6c 	.word	0x2000ae6c

080088c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	; 0x28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088d4:	f7fe fd8e 	bl	80073f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088d8:	4b5b      	ldr	r3, [pc, #364]	; (8008a48 <pvPortMalloc+0x180>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088e0:	f000 f920 	bl	8008b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088e4:	4b59      	ldr	r3, [pc, #356]	; (8008a4c <pvPortMalloc+0x184>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f040 8093 	bne.w	8008a18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01d      	beq.n	8008934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088f8:	2208      	movs	r2, #8
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	2b00      	cmp	r3, #0
 8008908:	d014      	beq.n	8008934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f023 0307 	bic.w	r3, r3, #7
 8008910:	3308      	adds	r3, #8
 8008912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <pvPortMalloc+0x6c>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	617b      	str	r3, [r7, #20]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d06e      	beq.n	8008a18 <pvPortMalloc+0x150>
 800893a:	4b45      	ldr	r3, [pc, #276]	; (8008a50 <pvPortMalloc+0x188>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d869      	bhi.n	8008a18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008944:	4b43      	ldr	r3, [pc, #268]	; (8008a54 <pvPortMalloc+0x18c>)
 8008946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008948:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <pvPortMalloc+0x18c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800894e:	e004      	b.n	800895a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d903      	bls.n	800896c <pvPortMalloc+0xa4>
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f1      	bne.n	8008950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800896c:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <pvPortMalloc+0x180>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	429a      	cmp	r2, r3
 8008974:	d050      	beq.n	8008a18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2208      	movs	r2, #8
 800897c:	4413      	add	r3, r2
 800897e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	2308      	movs	r3, #8
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	429a      	cmp	r2, r3
 8008996:	d91f      	bls.n	80089d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <pvPortMalloc+0xf8>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	613b      	str	r3, [r7, #16]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	1ad2      	subs	r2, r2, r3
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089d2:	69b8      	ldr	r0, [r7, #24]
 80089d4:	f000 f908 	bl	8008be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089d8:	4b1d      	ldr	r3, [pc, #116]	; (8008a50 <pvPortMalloc+0x188>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	4a1b      	ldr	r2, [pc, #108]	; (8008a50 <pvPortMalloc+0x188>)
 80089e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089e6:	4b1a      	ldr	r3, [pc, #104]	; (8008a50 <pvPortMalloc+0x188>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <pvPortMalloc+0x190>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d203      	bcs.n	80089fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089f2:	4b17      	ldr	r3, [pc, #92]	; (8008a50 <pvPortMalloc+0x188>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <pvPortMalloc+0x190>)
 80089f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <pvPortMalloc+0x184>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <pvPortMalloc+0x194>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3301      	adds	r3, #1
 8008a14:	4a11      	ldr	r2, [pc, #68]	; (8008a5c <pvPortMalloc+0x194>)
 8008a16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a18:	f7fe fcfa 	bl	8007410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <pvPortMalloc+0x174>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	60fb      	str	r3, [r7, #12]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <pvPortMalloc+0x172>
	return pvReturn;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3728      	adds	r7, #40	; 0x28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	2000d1a0 	.word	0x2000d1a0
 8008a4c:	2000d1b4 	.word	0x2000d1b4
 8008a50:	2000d1a4 	.word	0x2000d1a4
 8008a54:	2000d198 	.word	0x2000d198
 8008a58:	2000d1a8 	.word	0x2000d1a8
 8008a5c:	2000d1ac 	.word	0x2000d1ac

08008a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d04d      	beq.n	8008b0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a72:	2308      	movs	r3, #8
 8008a74:	425b      	negs	r3, r3
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4413      	add	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <vPortFree+0xb8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <vPortFree+0x44>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60fb      	str	r3, [r7, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <vPortFree+0x62>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60bb      	str	r3, [r7, #8]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <vPortFree+0xb8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4013      	ands	r3, r2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01e      	beq.n	8008b0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d11a      	bne.n	8008b0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <vPortFree+0xb8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ae8:	f7fe fc84 	bl	80073f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <vPortFree+0xbc>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <vPortFree+0xbc>)
 8008af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008afa:	6938      	ldr	r0, [r7, #16]
 8008afc:	f000 f874 	bl	8008be8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b00:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <vPortFree+0xc0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	4a06      	ldr	r2, [pc, #24]	; (8008b20 <vPortFree+0xc0>)
 8008b08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b0a:	f7fe fc81 	bl	8007410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b0e:	bf00      	nop
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	2000d1b4 	.word	0x2000d1b4
 8008b1c:	2000d1a4 	.word	0x2000d1a4
 8008b20:	2000d1b0 	.word	0x2000d1b0

08008b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b2a:	f242 3328 	movw	r3, #9000	; 0x2328
 8008b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b30:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <prvHeapInit+0xac>)
 8008b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00c      	beq.n	8008b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3307      	adds	r3, #7
 8008b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0307 	bic.w	r3, r3, #7
 8008b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	4a1f      	ldr	r2, [pc, #124]	; (8008bd0 <prvHeapInit+0xac>)
 8008b54:	4413      	add	r3, r2
 8008b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b5c:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <prvHeapInit+0xb0>)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <prvHeapInit+0xb0>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b70:	2208      	movs	r2, #8
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1a9b      	subs	r3, r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a15      	ldr	r2, [pc, #84]	; (8008bd8 <prvHeapInit+0xb4>)
 8008b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b86:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <prvHeapInit+0xb4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <prvHeapInit+0xb4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	1ad2      	subs	r2, r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ba4:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvHeapInit+0xb4>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <prvHeapInit+0xb8>)
 8008bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <prvHeapInit+0xbc>)
 8008bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bbc:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <prvHeapInit+0xc0>)
 8008bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	2000ae70 	.word	0x2000ae70
 8008bd4:	2000d198 	.word	0x2000d198
 8008bd8:	2000d1a0 	.word	0x2000d1a0
 8008bdc:	2000d1a8 	.word	0x2000d1a8
 8008be0:	2000d1a4 	.word	0x2000d1a4
 8008be4:	2000d1b4 	.word	0x2000d1b4

08008be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bf0:	4b28      	ldr	r3, [pc, #160]	; (8008c94 <prvInsertBlockIntoFreeList+0xac>)
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e002      	b.n	8008bfc <prvInsertBlockIntoFreeList+0x14>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d8f7      	bhi.n	8008bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	4413      	add	r3, r2
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d108      	bne.n	8008c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	441a      	add	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	441a      	add	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d118      	bne.n	8008c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <prvInsertBlockIntoFreeList+0xb0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d00d      	beq.n	8008c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	441a      	add	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e008      	b.n	8008c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <prvInsertBlockIntoFreeList+0xb0>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e003      	b.n	8008c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d002      	beq.n	8008c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c86:	bf00      	nop
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2000d198 	.word	0x2000d198
 8008c98:	2000d1a0 	.word	0x2000d1a0

08008c9c <__errno>:
 8008c9c:	4b01      	ldr	r3, [pc, #4]	; (8008ca4 <__errno+0x8>)
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20000030 	.word	0x20000030

08008ca8 <__libc_init_array>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	4d0d      	ldr	r5, [pc, #52]	; (8008ce0 <__libc_init_array+0x38>)
 8008cac:	4c0d      	ldr	r4, [pc, #52]	; (8008ce4 <__libc_init_array+0x3c>)
 8008cae:	1b64      	subs	r4, r4, r5
 8008cb0:	10a4      	asrs	r4, r4, #2
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	42a6      	cmp	r6, r4
 8008cb6:	d109      	bne.n	8008ccc <__libc_init_array+0x24>
 8008cb8:	4d0b      	ldr	r5, [pc, #44]	; (8008ce8 <__libc_init_array+0x40>)
 8008cba:	4c0c      	ldr	r4, [pc, #48]	; (8008cec <__libc_init_array+0x44>)
 8008cbc:	f000 fcd2 	bl	8009664 <_init>
 8008cc0:	1b64      	subs	r4, r4, r5
 8008cc2:	10a4      	asrs	r4, r4, #2
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	42a6      	cmp	r6, r4
 8008cc8:	d105      	bne.n	8008cd6 <__libc_init_array+0x2e>
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd0:	4798      	blx	r3
 8008cd2:	3601      	adds	r6, #1
 8008cd4:	e7ee      	b.n	8008cb4 <__libc_init_array+0xc>
 8008cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cda:	4798      	blx	r3
 8008cdc:	3601      	adds	r6, #1
 8008cde:	e7f2      	b.n	8008cc6 <__libc_init_array+0x1e>
 8008ce0:	0800c104 	.word	0x0800c104
 8008ce4:	0800c104 	.word	0x0800c104
 8008ce8:	0800c104 	.word	0x0800c104
 8008cec:	0800c108 	.word	0x0800c108

08008cf0 <__retarget_lock_acquire_recursive>:
 8008cf0:	4770      	bx	lr

08008cf2 <__retarget_lock_release_recursive>:
 8008cf2:	4770      	bx	lr

08008cf4 <memcpy>:
 8008cf4:	440a      	add	r2, r1
 8008cf6:	4291      	cmp	r1, r2
 8008cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cfc:	d100      	bne.n	8008d00 <memcpy+0xc>
 8008cfe:	4770      	bx	lr
 8008d00:	b510      	push	{r4, lr}
 8008d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	d1f9      	bne.n	8008d02 <memcpy+0xe>
 8008d0e:	bd10      	pop	{r4, pc}

08008d10 <memset>:
 8008d10:	4402      	add	r2, r0
 8008d12:	4603      	mov	r3, r0
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d100      	bne.n	8008d1a <memset+0xa>
 8008d18:	4770      	bx	lr
 8008d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1e:	e7f9      	b.n	8008d14 <memset+0x4>

08008d20 <_malloc_r>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	1ccd      	adds	r5, r1, #3
 8008d24:	f025 0503 	bic.w	r5, r5, #3
 8008d28:	3508      	adds	r5, #8
 8008d2a:	2d0c      	cmp	r5, #12
 8008d2c:	bf38      	it	cc
 8008d2e:	250c      	movcc	r5, #12
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	4606      	mov	r6, r0
 8008d34:	db01      	blt.n	8008d3a <_malloc_r+0x1a>
 8008d36:	42a9      	cmp	r1, r5
 8008d38:	d903      	bls.n	8008d42 <_malloc_r+0x22>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	6033      	str	r3, [r6, #0]
 8008d3e:	2000      	movs	r0, #0
 8008d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d42:	f000 f8fb 	bl	8008f3c <__malloc_lock>
 8008d46:	4921      	ldr	r1, [pc, #132]	; (8008dcc <_malloc_r+0xac>)
 8008d48:	680a      	ldr	r2, [r1, #0]
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	b99c      	cbnz	r4, 8008d76 <_malloc_r+0x56>
 8008d4e:	4f20      	ldr	r7, [pc, #128]	; (8008dd0 <_malloc_r+0xb0>)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	b923      	cbnz	r3, 8008d5e <_malloc_r+0x3e>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4630      	mov	r0, r6
 8008d58:	f000 f8a6 	bl	8008ea8 <_sbrk_r>
 8008d5c:	6038      	str	r0, [r7, #0]
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f8a1 	bl	8008ea8 <_sbrk_r>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d123      	bne.n	8008db2 <_malloc_r+0x92>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f8ea 	bl	8008f48 <__malloc_unlock>
 8008d74:	e7e3      	b.n	8008d3e <_malloc_r+0x1e>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	1b5b      	subs	r3, r3, r5
 8008d7a:	d417      	bmi.n	8008dac <_malloc_r+0x8c>
 8008d7c:	2b0b      	cmp	r3, #11
 8008d7e:	d903      	bls.n	8008d88 <_malloc_r+0x68>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	441c      	add	r4, r3
 8008d84:	6025      	str	r5, [r4, #0]
 8008d86:	e004      	b.n	8008d92 <_malloc_r+0x72>
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	42a2      	cmp	r2, r4
 8008d8c:	bf0c      	ite	eq
 8008d8e:	600b      	streq	r3, [r1, #0]
 8008d90:	6053      	strne	r3, [r2, #4]
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 f8d8 	bl	8008f48 <__malloc_unlock>
 8008d98:	f104 000b 	add.w	r0, r4, #11
 8008d9c:	1d23      	adds	r3, r4, #4
 8008d9e:	f020 0007 	bic.w	r0, r0, #7
 8008da2:	1ac2      	subs	r2, r0, r3
 8008da4:	d0cc      	beq.n	8008d40 <_malloc_r+0x20>
 8008da6:	1a1b      	subs	r3, r3, r0
 8008da8:	50a3      	str	r3, [r4, r2]
 8008daa:	e7c9      	b.n	8008d40 <_malloc_r+0x20>
 8008dac:	4622      	mov	r2, r4
 8008dae:	6864      	ldr	r4, [r4, #4]
 8008db0:	e7cc      	b.n	8008d4c <_malloc_r+0x2c>
 8008db2:	1cc4      	adds	r4, r0, #3
 8008db4:	f024 0403 	bic.w	r4, r4, #3
 8008db8:	42a0      	cmp	r0, r4
 8008dba:	d0e3      	beq.n	8008d84 <_malloc_r+0x64>
 8008dbc:	1a21      	subs	r1, r4, r0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f872 	bl	8008ea8 <_sbrk_r>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d1dd      	bne.n	8008d84 <_malloc_r+0x64>
 8008dc8:	e7cf      	b.n	8008d6a <_malloc_r+0x4a>
 8008dca:	bf00      	nop
 8008dcc:	2000d1b8 	.word	0x2000d1b8
 8008dd0:	2000d1bc 	.word	0x2000d1bc

08008dd4 <cleanup_glue>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	6809      	ldr	r1, [r1, #0]
 8008dda:	4605      	mov	r5, r0
 8008ddc:	b109      	cbz	r1, 8008de2 <cleanup_glue+0xe>
 8008dde:	f7ff fff9 	bl	8008dd4 <cleanup_glue>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dea:	f000 b8b3 	b.w	8008f54 <_free_r>
	...

08008df0 <_reclaim_reent>:
 8008df0:	4b2c      	ldr	r3, [pc, #176]	; (8008ea4 <_reclaim_reent+0xb4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4283      	cmp	r3, r0
 8008df6:	b570      	push	{r4, r5, r6, lr}
 8008df8:	4604      	mov	r4, r0
 8008dfa:	d051      	beq.n	8008ea0 <_reclaim_reent+0xb0>
 8008dfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008dfe:	b143      	cbz	r3, 8008e12 <_reclaim_reent+0x22>
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d14a      	bne.n	8008e9c <_reclaim_reent+0xac>
 8008e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e08:	6819      	ldr	r1, [r3, #0]
 8008e0a:	b111      	cbz	r1, 8008e12 <_reclaim_reent+0x22>
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 f8a1 	bl	8008f54 <_free_r>
 8008e12:	6961      	ldr	r1, [r4, #20]
 8008e14:	b111      	cbz	r1, 8008e1c <_reclaim_reent+0x2c>
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 f89c 	bl	8008f54 <_free_r>
 8008e1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e1e:	b111      	cbz	r1, 8008e26 <_reclaim_reent+0x36>
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 f897 	bl	8008f54 <_free_r>
 8008e26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e28:	b111      	cbz	r1, 8008e30 <_reclaim_reent+0x40>
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 f892 	bl	8008f54 <_free_r>
 8008e30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008e32:	b111      	cbz	r1, 8008e3a <_reclaim_reent+0x4a>
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 f88d 	bl	8008f54 <_free_r>
 8008e3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008e3c:	b111      	cbz	r1, 8008e44 <_reclaim_reent+0x54>
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 f888 	bl	8008f54 <_free_r>
 8008e44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e46:	b111      	cbz	r1, 8008e4e <_reclaim_reent+0x5e>
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 f883 	bl	8008f54 <_free_r>
 8008e4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e50:	b111      	cbz	r1, 8008e58 <_reclaim_reent+0x68>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f87e 	bl	8008f54 <_free_r>
 8008e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e5a:	b111      	cbz	r1, 8008e62 <_reclaim_reent+0x72>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 f879 	bl	8008f54 <_free_r>
 8008e62:	69a3      	ldr	r3, [r4, #24]
 8008e64:	b1e3      	cbz	r3, 8008ea0 <_reclaim_reent+0xb0>
 8008e66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4798      	blx	r3
 8008e6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e6e:	b1b9      	cbz	r1, 8008ea0 <_reclaim_reent+0xb0>
 8008e70:	4620      	mov	r0, r4
 8008e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e76:	f7ff bfad 	b.w	8008dd4 <cleanup_glue>
 8008e7a:	5949      	ldr	r1, [r1, r5]
 8008e7c:	b941      	cbnz	r1, 8008e90 <_reclaim_reent+0xa0>
 8008e7e:	3504      	adds	r5, #4
 8008e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e82:	2d80      	cmp	r5, #128	; 0x80
 8008e84:	68d9      	ldr	r1, [r3, #12]
 8008e86:	d1f8      	bne.n	8008e7a <_reclaim_reent+0x8a>
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 f863 	bl	8008f54 <_free_r>
 8008e8e:	e7ba      	b.n	8008e06 <_reclaim_reent+0x16>
 8008e90:	680e      	ldr	r6, [r1, #0]
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 f85e 	bl	8008f54 <_free_r>
 8008e98:	4631      	mov	r1, r6
 8008e9a:	e7ef      	b.n	8008e7c <_reclaim_reent+0x8c>
 8008e9c:	2500      	movs	r5, #0
 8008e9e:	e7ef      	b.n	8008e80 <_reclaim_reent+0x90>
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000030 	.word	0x20000030

08008ea8 <_sbrk_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d06      	ldr	r5, [pc, #24]	; (8008ec4 <_sbrk_r+0x1c>)
 8008eac:	2300      	movs	r3, #0
 8008eae:	4604      	mov	r4, r0
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	f7f8 ffca 	bl	8001e4c <_sbrk>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_sbrk_r+0x1a>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_sbrk_r+0x1a>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	2000d3c0 	.word	0x2000d3c0

08008ec8 <_vsniprintf_r>:
 8008ec8:	b530      	push	{r4, r5, lr}
 8008eca:	1e14      	subs	r4, r2, #0
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b09b      	sub	sp, #108	; 0x6c
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	da05      	bge.n	8008ee0 <_vsniprintf_r+0x18>
 8008ed4:	238b      	movs	r3, #139	; 0x8b
 8008ed6:	602b      	str	r3, [r5, #0]
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	b01b      	add	sp, #108	; 0x6c
 8008ede:	bd30      	pop	{r4, r5, pc}
 8008ee0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ee4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ee8:	bf14      	ite	ne
 8008eea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008eee:	4623      	moveq	r3, r4
 8008ef0:	9302      	str	r3, [sp, #8]
 8008ef2:	9305      	str	r3, [sp, #20]
 8008ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ef8:	9100      	str	r1, [sp, #0]
 8008efa:	9104      	str	r1, [sp, #16]
 8008efc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008f00:	4602      	mov	r2, r0
 8008f02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f04:	4669      	mov	r1, sp
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 f8d0 	bl	80090ac <_svfiprintf_r>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	bfbc      	itt	lt
 8008f10:	238b      	movlt	r3, #139	; 0x8b
 8008f12:	602b      	strlt	r3, [r5, #0]
 8008f14:	2c00      	cmp	r4, #0
 8008f16:	d0e1      	beq.n	8008edc <_vsniprintf_r+0x14>
 8008f18:	9b00      	ldr	r3, [sp, #0]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	e7dd      	b.n	8008edc <_vsniprintf_r+0x14>

08008f20 <vsniprintf>:
 8008f20:	b507      	push	{r0, r1, r2, lr}
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	460a      	mov	r2, r1
 8008f28:	4601      	mov	r1, r0
 8008f2a:	4803      	ldr	r0, [pc, #12]	; (8008f38 <vsniprintf+0x18>)
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f7ff ffcb 	bl	8008ec8 <_vsniprintf_r>
 8008f32:	b003      	add	sp, #12
 8008f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f38:	20000030 	.word	0x20000030

08008f3c <__malloc_lock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__malloc_lock+0x8>)
 8008f3e:	f7ff bed7 	b.w	8008cf0 <__retarget_lock_acquire_recursive>
 8008f42:	bf00      	nop
 8008f44:	2000d3b8 	.word	0x2000d3b8

08008f48 <__malloc_unlock>:
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <__malloc_unlock+0x8>)
 8008f4a:	f7ff bed2 	b.w	8008cf2 <__retarget_lock_release_recursive>
 8008f4e:	bf00      	nop
 8008f50:	2000d3b8 	.word	0x2000d3b8

08008f54 <_free_r>:
 8008f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d048      	beq.n	8008fec <_free_r+0x98>
 8008f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f5e:	9001      	str	r0, [sp, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f1a1 0404 	sub.w	r4, r1, #4
 8008f66:	bfb8      	it	lt
 8008f68:	18e4      	addlt	r4, r4, r3
 8008f6a:	f7ff ffe7 	bl	8008f3c <__malloc_lock>
 8008f6e:	4a20      	ldr	r2, [pc, #128]	; (8008ff0 <_free_r+0x9c>)
 8008f70:	9801      	ldr	r0, [sp, #4]
 8008f72:	6813      	ldr	r3, [r2, #0]
 8008f74:	4615      	mov	r5, r2
 8008f76:	b933      	cbnz	r3, 8008f86 <_free_r+0x32>
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	6014      	str	r4, [r2, #0]
 8008f7c:	b003      	add	sp, #12
 8008f7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f82:	f7ff bfe1 	b.w	8008f48 <__malloc_unlock>
 8008f86:	42a3      	cmp	r3, r4
 8008f88:	d90b      	bls.n	8008fa2 <_free_r+0x4e>
 8008f8a:	6821      	ldr	r1, [r4, #0]
 8008f8c:	1862      	adds	r2, r4, r1
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	bf04      	itt	eq
 8008f92:	681a      	ldreq	r2, [r3, #0]
 8008f94:	685b      	ldreq	r3, [r3, #4]
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	bf04      	itt	eq
 8008f9a:	1852      	addeq	r2, r2, r1
 8008f9c:	6022      	streq	r2, [r4, #0]
 8008f9e:	602c      	str	r4, [r5, #0]
 8008fa0:	e7ec      	b.n	8008f7c <_free_r+0x28>
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	b10b      	cbz	r3, 8008fac <_free_r+0x58>
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	d9fa      	bls.n	8008fa2 <_free_r+0x4e>
 8008fac:	6811      	ldr	r1, [r2, #0]
 8008fae:	1855      	adds	r5, r2, r1
 8008fb0:	42a5      	cmp	r5, r4
 8008fb2:	d10b      	bne.n	8008fcc <_free_r+0x78>
 8008fb4:	6824      	ldr	r4, [r4, #0]
 8008fb6:	4421      	add	r1, r4
 8008fb8:	1854      	adds	r4, r2, r1
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	6011      	str	r1, [r2, #0]
 8008fbe:	d1dd      	bne.n	8008f7c <_free_r+0x28>
 8008fc0:	681c      	ldr	r4, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	6053      	str	r3, [r2, #4]
 8008fc6:	4421      	add	r1, r4
 8008fc8:	6011      	str	r1, [r2, #0]
 8008fca:	e7d7      	b.n	8008f7c <_free_r+0x28>
 8008fcc:	d902      	bls.n	8008fd4 <_free_r+0x80>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	e7d3      	b.n	8008f7c <_free_r+0x28>
 8008fd4:	6825      	ldr	r5, [r4, #0]
 8008fd6:	1961      	adds	r1, r4, r5
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf04      	itt	eq
 8008fdc:	6819      	ldreq	r1, [r3, #0]
 8008fde:	685b      	ldreq	r3, [r3, #4]
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	bf04      	itt	eq
 8008fe4:	1949      	addeq	r1, r1, r5
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	6054      	str	r4, [r2, #4]
 8008fea:	e7c7      	b.n	8008f7c <_free_r+0x28>
 8008fec:	b003      	add	sp, #12
 8008fee:	bd30      	pop	{r4, r5, pc}
 8008ff0:	2000d1b8 	.word	0x2000d1b8

08008ff4 <__ssputs_r>:
 8008ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff8:	688e      	ldr	r6, [r1, #8]
 8008ffa:	429e      	cmp	r6, r3
 8008ffc:	4682      	mov	sl, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	4690      	mov	r8, r2
 8009002:	461f      	mov	r7, r3
 8009004:	d838      	bhi.n	8009078 <__ssputs_r+0x84>
 8009006:	898a      	ldrh	r2, [r1, #12]
 8009008:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800900c:	d032      	beq.n	8009074 <__ssputs_r+0x80>
 800900e:	6825      	ldr	r5, [r4, #0]
 8009010:	6909      	ldr	r1, [r1, #16]
 8009012:	eba5 0901 	sub.w	r9, r5, r1
 8009016:	6965      	ldr	r5, [r4, #20]
 8009018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800901c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009020:	3301      	adds	r3, #1
 8009022:	444b      	add	r3, r9
 8009024:	106d      	asrs	r5, r5, #1
 8009026:	429d      	cmp	r5, r3
 8009028:	bf38      	it	cc
 800902a:	461d      	movcc	r5, r3
 800902c:	0553      	lsls	r3, r2, #21
 800902e:	d531      	bpl.n	8009094 <__ssputs_r+0xa0>
 8009030:	4629      	mov	r1, r5
 8009032:	f7ff fe75 	bl	8008d20 <_malloc_r>
 8009036:	4606      	mov	r6, r0
 8009038:	b950      	cbnz	r0, 8009050 <__ssputs_r+0x5c>
 800903a:	230c      	movs	r3, #12
 800903c:	f8ca 3000 	str.w	r3, [sl]
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	f04f 30ff 	mov.w	r0, #4294967295
 800904c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009050:	6921      	ldr	r1, [r4, #16]
 8009052:	464a      	mov	r2, r9
 8009054:	f7ff fe4e 	bl	8008cf4 <memcpy>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800905e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	6126      	str	r6, [r4, #16]
 8009066:	6165      	str	r5, [r4, #20]
 8009068:	444e      	add	r6, r9
 800906a:	eba5 0509 	sub.w	r5, r5, r9
 800906e:	6026      	str	r6, [r4, #0]
 8009070:	60a5      	str	r5, [r4, #8]
 8009072:	463e      	mov	r6, r7
 8009074:	42be      	cmp	r6, r7
 8009076:	d900      	bls.n	800907a <__ssputs_r+0x86>
 8009078:	463e      	mov	r6, r7
 800907a:	4632      	mov	r2, r6
 800907c:	6820      	ldr	r0, [r4, #0]
 800907e:	4641      	mov	r1, r8
 8009080:	f000 faa8 	bl	80095d4 <memmove>
 8009084:	68a3      	ldr	r3, [r4, #8]
 8009086:	6822      	ldr	r2, [r4, #0]
 8009088:	1b9b      	subs	r3, r3, r6
 800908a:	4432      	add	r2, r6
 800908c:	60a3      	str	r3, [r4, #8]
 800908e:	6022      	str	r2, [r4, #0]
 8009090:	2000      	movs	r0, #0
 8009092:	e7db      	b.n	800904c <__ssputs_r+0x58>
 8009094:	462a      	mov	r2, r5
 8009096:	f000 fab7 	bl	8009608 <_realloc_r>
 800909a:	4606      	mov	r6, r0
 800909c:	2800      	cmp	r0, #0
 800909e:	d1e1      	bne.n	8009064 <__ssputs_r+0x70>
 80090a0:	6921      	ldr	r1, [r4, #16]
 80090a2:	4650      	mov	r0, sl
 80090a4:	f7ff ff56 	bl	8008f54 <_free_r>
 80090a8:	e7c7      	b.n	800903a <__ssputs_r+0x46>
	...

080090ac <_svfiprintf_r>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	4698      	mov	r8, r3
 80090b2:	898b      	ldrh	r3, [r1, #12]
 80090b4:	061b      	lsls	r3, r3, #24
 80090b6:	b09d      	sub	sp, #116	; 0x74
 80090b8:	4607      	mov	r7, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	4614      	mov	r4, r2
 80090be:	d50e      	bpl.n	80090de <_svfiprintf_r+0x32>
 80090c0:	690b      	ldr	r3, [r1, #16]
 80090c2:	b963      	cbnz	r3, 80090de <_svfiprintf_r+0x32>
 80090c4:	2140      	movs	r1, #64	; 0x40
 80090c6:	f7ff fe2b 	bl	8008d20 <_malloc_r>
 80090ca:	6028      	str	r0, [r5, #0]
 80090cc:	6128      	str	r0, [r5, #16]
 80090ce:	b920      	cbnz	r0, 80090da <_svfiprintf_r+0x2e>
 80090d0:	230c      	movs	r3, #12
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e0d1      	b.n	800927e <_svfiprintf_r+0x1d2>
 80090da:	2340      	movs	r3, #64	; 0x40
 80090dc:	616b      	str	r3, [r5, #20]
 80090de:	2300      	movs	r3, #0
 80090e0:	9309      	str	r3, [sp, #36]	; 0x24
 80090e2:	2320      	movs	r3, #32
 80090e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ec:	2330      	movs	r3, #48	; 0x30
 80090ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009298 <_svfiprintf_r+0x1ec>
 80090f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090f6:	f04f 0901 	mov.w	r9, #1
 80090fa:	4623      	mov	r3, r4
 80090fc:	469a      	mov	sl, r3
 80090fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009102:	b10a      	cbz	r2, 8009108 <_svfiprintf_r+0x5c>
 8009104:	2a25      	cmp	r2, #37	; 0x25
 8009106:	d1f9      	bne.n	80090fc <_svfiprintf_r+0x50>
 8009108:	ebba 0b04 	subs.w	fp, sl, r4
 800910c:	d00b      	beq.n	8009126 <_svfiprintf_r+0x7a>
 800910e:	465b      	mov	r3, fp
 8009110:	4622      	mov	r2, r4
 8009112:	4629      	mov	r1, r5
 8009114:	4638      	mov	r0, r7
 8009116:	f7ff ff6d 	bl	8008ff4 <__ssputs_r>
 800911a:	3001      	adds	r0, #1
 800911c:	f000 80aa 	beq.w	8009274 <_svfiprintf_r+0x1c8>
 8009120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009122:	445a      	add	r2, fp
 8009124:	9209      	str	r2, [sp, #36]	; 0x24
 8009126:	f89a 3000 	ldrb.w	r3, [sl]
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 80a2 	beq.w	8009274 <_svfiprintf_r+0x1c8>
 8009130:	2300      	movs	r3, #0
 8009132:	f04f 32ff 	mov.w	r2, #4294967295
 8009136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800913a:	f10a 0a01 	add.w	sl, sl, #1
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	9307      	str	r3, [sp, #28]
 8009142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009146:	931a      	str	r3, [sp, #104]	; 0x68
 8009148:	4654      	mov	r4, sl
 800914a:	2205      	movs	r2, #5
 800914c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009150:	4851      	ldr	r0, [pc, #324]	; (8009298 <_svfiprintf_r+0x1ec>)
 8009152:	f7f7 f845 	bl	80001e0 <memchr>
 8009156:	9a04      	ldr	r2, [sp, #16]
 8009158:	b9d8      	cbnz	r0, 8009192 <_svfiprintf_r+0xe6>
 800915a:	06d0      	lsls	r0, r2, #27
 800915c:	bf44      	itt	mi
 800915e:	2320      	movmi	r3, #32
 8009160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009164:	0711      	lsls	r1, r2, #28
 8009166:	bf44      	itt	mi
 8009168:	232b      	movmi	r3, #43	; 0x2b
 800916a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916e:	f89a 3000 	ldrb.w	r3, [sl]
 8009172:	2b2a      	cmp	r3, #42	; 0x2a
 8009174:	d015      	beq.n	80091a2 <_svfiprintf_r+0xf6>
 8009176:	9a07      	ldr	r2, [sp, #28]
 8009178:	4654      	mov	r4, sl
 800917a:	2000      	movs	r0, #0
 800917c:	f04f 0c0a 	mov.w	ip, #10
 8009180:	4621      	mov	r1, r4
 8009182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009186:	3b30      	subs	r3, #48	; 0x30
 8009188:	2b09      	cmp	r3, #9
 800918a:	d94e      	bls.n	800922a <_svfiprintf_r+0x17e>
 800918c:	b1b0      	cbz	r0, 80091bc <_svfiprintf_r+0x110>
 800918e:	9207      	str	r2, [sp, #28]
 8009190:	e014      	b.n	80091bc <_svfiprintf_r+0x110>
 8009192:	eba0 0308 	sub.w	r3, r0, r8
 8009196:	fa09 f303 	lsl.w	r3, r9, r3
 800919a:	4313      	orrs	r3, r2
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	46a2      	mov	sl, r4
 80091a0:	e7d2      	b.n	8009148 <_svfiprintf_r+0x9c>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	1d19      	adds	r1, r3, #4
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	9103      	str	r1, [sp, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bfbb      	ittet	lt
 80091ae:	425b      	neglt	r3, r3
 80091b0:	f042 0202 	orrlt.w	r2, r2, #2
 80091b4:	9307      	strge	r3, [sp, #28]
 80091b6:	9307      	strlt	r3, [sp, #28]
 80091b8:	bfb8      	it	lt
 80091ba:	9204      	strlt	r2, [sp, #16]
 80091bc:	7823      	ldrb	r3, [r4, #0]
 80091be:	2b2e      	cmp	r3, #46	; 0x2e
 80091c0:	d10c      	bne.n	80091dc <_svfiprintf_r+0x130>
 80091c2:	7863      	ldrb	r3, [r4, #1]
 80091c4:	2b2a      	cmp	r3, #42	; 0x2a
 80091c6:	d135      	bne.n	8009234 <_svfiprintf_r+0x188>
 80091c8:	9b03      	ldr	r3, [sp, #12]
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	9203      	str	r2, [sp, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	bfb8      	it	lt
 80091d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80091d8:	3402      	adds	r4, #2
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092a8 <_svfiprintf_r+0x1fc>
 80091e0:	7821      	ldrb	r1, [r4, #0]
 80091e2:	2203      	movs	r2, #3
 80091e4:	4650      	mov	r0, sl
 80091e6:	f7f6 fffb 	bl	80001e0 <memchr>
 80091ea:	b140      	cbz	r0, 80091fe <_svfiprintf_r+0x152>
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	eba0 000a 	sub.w	r0, r0, sl
 80091f2:	fa03 f000 	lsl.w	r0, r3, r0
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	4303      	orrs	r3, r0
 80091fa:	3401      	adds	r4, #1
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009202:	4826      	ldr	r0, [pc, #152]	; (800929c <_svfiprintf_r+0x1f0>)
 8009204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009208:	2206      	movs	r2, #6
 800920a:	f7f6 ffe9 	bl	80001e0 <memchr>
 800920e:	2800      	cmp	r0, #0
 8009210:	d038      	beq.n	8009284 <_svfiprintf_r+0x1d8>
 8009212:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <_svfiprintf_r+0x1f4>)
 8009214:	bb1b      	cbnz	r3, 800925e <_svfiprintf_r+0x1b2>
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	3307      	adds	r3, #7
 800921a:	f023 0307 	bic.w	r3, r3, #7
 800921e:	3308      	adds	r3, #8
 8009220:	9303      	str	r3, [sp, #12]
 8009222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009224:	4433      	add	r3, r6
 8009226:	9309      	str	r3, [sp, #36]	; 0x24
 8009228:	e767      	b.n	80090fa <_svfiprintf_r+0x4e>
 800922a:	fb0c 3202 	mla	r2, ip, r2, r3
 800922e:	460c      	mov	r4, r1
 8009230:	2001      	movs	r0, #1
 8009232:	e7a5      	b.n	8009180 <_svfiprintf_r+0xd4>
 8009234:	2300      	movs	r3, #0
 8009236:	3401      	adds	r4, #1
 8009238:	9305      	str	r3, [sp, #20]
 800923a:	4619      	mov	r1, r3
 800923c:	f04f 0c0a 	mov.w	ip, #10
 8009240:	4620      	mov	r0, r4
 8009242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009246:	3a30      	subs	r2, #48	; 0x30
 8009248:	2a09      	cmp	r2, #9
 800924a:	d903      	bls.n	8009254 <_svfiprintf_r+0x1a8>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0c5      	beq.n	80091dc <_svfiprintf_r+0x130>
 8009250:	9105      	str	r1, [sp, #20]
 8009252:	e7c3      	b.n	80091dc <_svfiprintf_r+0x130>
 8009254:	fb0c 2101 	mla	r1, ip, r1, r2
 8009258:	4604      	mov	r4, r0
 800925a:	2301      	movs	r3, #1
 800925c:	e7f0      	b.n	8009240 <_svfiprintf_r+0x194>
 800925e:	ab03      	add	r3, sp, #12
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	462a      	mov	r2, r5
 8009264:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <_svfiprintf_r+0x1f8>)
 8009266:	a904      	add	r1, sp, #16
 8009268:	4638      	mov	r0, r7
 800926a:	f3af 8000 	nop.w
 800926e:	1c42      	adds	r2, r0, #1
 8009270:	4606      	mov	r6, r0
 8009272:	d1d6      	bne.n	8009222 <_svfiprintf_r+0x176>
 8009274:	89ab      	ldrh	r3, [r5, #12]
 8009276:	065b      	lsls	r3, r3, #25
 8009278:	f53f af2c 	bmi.w	80090d4 <_svfiprintf_r+0x28>
 800927c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927e:	b01d      	add	sp, #116	; 0x74
 8009280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009284:	ab03      	add	r3, sp, #12
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	462a      	mov	r2, r5
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <_svfiprintf_r+0x1f8>)
 800928c:	a904      	add	r1, sp, #16
 800928e:	4638      	mov	r0, r7
 8009290:	f000 f87a 	bl	8009388 <_printf_i>
 8009294:	e7eb      	b.n	800926e <_svfiprintf_r+0x1c2>
 8009296:	bf00      	nop
 8009298:	0800c0d0 	.word	0x0800c0d0
 800929c:	0800c0da 	.word	0x0800c0da
 80092a0:	00000000 	.word	0x00000000
 80092a4:	08008ff5 	.word	0x08008ff5
 80092a8:	0800c0d6 	.word	0x0800c0d6

080092ac <_printf_common>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	4616      	mov	r6, r2
 80092b2:	4699      	mov	r9, r3
 80092b4:	688a      	ldr	r2, [r1, #8]
 80092b6:	690b      	ldr	r3, [r1, #16]
 80092b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092bc:	4293      	cmp	r3, r2
 80092be:	bfb8      	it	lt
 80092c0:	4613      	movlt	r3, r2
 80092c2:	6033      	str	r3, [r6, #0]
 80092c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092c8:	4607      	mov	r7, r0
 80092ca:	460c      	mov	r4, r1
 80092cc:	b10a      	cbz	r2, 80092d2 <_printf_common+0x26>
 80092ce:	3301      	adds	r3, #1
 80092d0:	6033      	str	r3, [r6, #0]
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	0699      	lsls	r1, r3, #26
 80092d6:	bf42      	ittt	mi
 80092d8:	6833      	ldrmi	r3, [r6, #0]
 80092da:	3302      	addmi	r3, #2
 80092dc:	6033      	strmi	r3, [r6, #0]
 80092de:	6825      	ldr	r5, [r4, #0]
 80092e0:	f015 0506 	ands.w	r5, r5, #6
 80092e4:	d106      	bne.n	80092f4 <_printf_common+0x48>
 80092e6:	f104 0a19 	add.w	sl, r4, #25
 80092ea:	68e3      	ldr	r3, [r4, #12]
 80092ec:	6832      	ldr	r2, [r6, #0]
 80092ee:	1a9b      	subs	r3, r3, r2
 80092f0:	42ab      	cmp	r3, r5
 80092f2:	dc26      	bgt.n	8009342 <_printf_common+0x96>
 80092f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092f8:	1e13      	subs	r3, r2, #0
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	bf18      	it	ne
 80092fe:	2301      	movne	r3, #1
 8009300:	0692      	lsls	r2, r2, #26
 8009302:	d42b      	bmi.n	800935c <_printf_common+0xb0>
 8009304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009308:	4649      	mov	r1, r9
 800930a:	4638      	mov	r0, r7
 800930c:	47c0      	blx	r8
 800930e:	3001      	adds	r0, #1
 8009310:	d01e      	beq.n	8009350 <_printf_common+0xa4>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	68e5      	ldr	r5, [r4, #12]
 8009316:	6832      	ldr	r2, [r6, #0]
 8009318:	f003 0306 	and.w	r3, r3, #6
 800931c:	2b04      	cmp	r3, #4
 800931e:	bf08      	it	eq
 8009320:	1aad      	subeq	r5, r5, r2
 8009322:	68a3      	ldr	r3, [r4, #8]
 8009324:	6922      	ldr	r2, [r4, #16]
 8009326:	bf0c      	ite	eq
 8009328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800932c:	2500      	movne	r5, #0
 800932e:	4293      	cmp	r3, r2
 8009330:	bfc4      	itt	gt
 8009332:	1a9b      	subgt	r3, r3, r2
 8009334:	18ed      	addgt	r5, r5, r3
 8009336:	2600      	movs	r6, #0
 8009338:	341a      	adds	r4, #26
 800933a:	42b5      	cmp	r5, r6
 800933c:	d11a      	bne.n	8009374 <_printf_common+0xc8>
 800933e:	2000      	movs	r0, #0
 8009340:	e008      	b.n	8009354 <_printf_common+0xa8>
 8009342:	2301      	movs	r3, #1
 8009344:	4652      	mov	r2, sl
 8009346:	4649      	mov	r1, r9
 8009348:	4638      	mov	r0, r7
 800934a:	47c0      	blx	r8
 800934c:	3001      	adds	r0, #1
 800934e:	d103      	bne.n	8009358 <_printf_common+0xac>
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009358:	3501      	adds	r5, #1
 800935a:	e7c6      	b.n	80092ea <_printf_common+0x3e>
 800935c:	18e1      	adds	r1, r4, r3
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	2030      	movs	r0, #48	; 0x30
 8009362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009366:	4422      	add	r2, r4
 8009368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800936c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009370:	3302      	adds	r3, #2
 8009372:	e7c7      	b.n	8009304 <_printf_common+0x58>
 8009374:	2301      	movs	r3, #1
 8009376:	4622      	mov	r2, r4
 8009378:	4649      	mov	r1, r9
 800937a:	4638      	mov	r0, r7
 800937c:	47c0      	blx	r8
 800937e:	3001      	adds	r0, #1
 8009380:	d0e6      	beq.n	8009350 <_printf_common+0xa4>
 8009382:	3601      	adds	r6, #1
 8009384:	e7d9      	b.n	800933a <_printf_common+0x8e>
	...

08009388 <_printf_i>:
 8009388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800938c:	460c      	mov	r4, r1
 800938e:	4691      	mov	r9, r2
 8009390:	7e27      	ldrb	r7, [r4, #24]
 8009392:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009394:	2f78      	cmp	r7, #120	; 0x78
 8009396:	4680      	mov	r8, r0
 8009398:	469a      	mov	sl, r3
 800939a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800939e:	d807      	bhi.n	80093b0 <_printf_i+0x28>
 80093a0:	2f62      	cmp	r7, #98	; 0x62
 80093a2:	d80a      	bhi.n	80093ba <_printf_i+0x32>
 80093a4:	2f00      	cmp	r7, #0
 80093a6:	f000 80d8 	beq.w	800955a <_printf_i+0x1d2>
 80093aa:	2f58      	cmp	r7, #88	; 0x58
 80093ac:	f000 80a3 	beq.w	80094f6 <_printf_i+0x16e>
 80093b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b8:	e03a      	b.n	8009430 <_printf_i+0xa8>
 80093ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093be:	2b15      	cmp	r3, #21
 80093c0:	d8f6      	bhi.n	80093b0 <_printf_i+0x28>
 80093c2:	a001      	add	r0, pc, #4	; (adr r0, 80093c8 <_printf_i+0x40>)
 80093c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093c8:	08009421 	.word	0x08009421
 80093cc:	08009435 	.word	0x08009435
 80093d0:	080093b1 	.word	0x080093b1
 80093d4:	080093b1 	.word	0x080093b1
 80093d8:	080093b1 	.word	0x080093b1
 80093dc:	080093b1 	.word	0x080093b1
 80093e0:	08009435 	.word	0x08009435
 80093e4:	080093b1 	.word	0x080093b1
 80093e8:	080093b1 	.word	0x080093b1
 80093ec:	080093b1 	.word	0x080093b1
 80093f0:	080093b1 	.word	0x080093b1
 80093f4:	08009541 	.word	0x08009541
 80093f8:	08009465 	.word	0x08009465
 80093fc:	08009523 	.word	0x08009523
 8009400:	080093b1 	.word	0x080093b1
 8009404:	080093b1 	.word	0x080093b1
 8009408:	08009563 	.word	0x08009563
 800940c:	080093b1 	.word	0x080093b1
 8009410:	08009465 	.word	0x08009465
 8009414:	080093b1 	.word	0x080093b1
 8009418:	080093b1 	.word	0x080093b1
 800941c:	0800952b 	.word	0x0800952b
 8009420:	680b      	ldr	r3, [r1, #0]
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	600a      	str	r2, [r1, #0]
 8009428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800942c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009430:	2301      	movs	r3, #1
 8009432:	e0a3      	b.n	800957c <_printf_i+0x1f4>
 8009434:	6825      	ldr	r5, [r4, #0]
 8009436:	6808      	ldr	r0, [r1, #0]
 8009438:	062e      	lsls	r6, r5, #24
 800943a:	f100 0304 	add.w	r3, r0, #4
 800943e:	d50a      	bpl.n	8009456 <_printf_i+0xce>
 8009440:	6805      	ldr	r5, [r0, #0]
 8009442:	600b      	str	r3, [r1, #0]
 8009444:	2d00      	cmp	r5, #0
 8009446:	da03      	bge.n	8009450 <_printf_i+0xc8>
 8009448:	232d      	movs	r3, #45	; 0x2d
 800944a:	426d      	negs	r5, r5
 800944c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009450:	485e      	ldr	r0, [pc, #376]	; (80095cc <_printf_i+0x244>)
 8009452:	230a      	movs	r3, #10
 8009454:	e019      	b.n	800948a <_printf_i+0x102>
 8009456:	f015 0f40 	tst.w	r5, #64	; 0x40
 800945a:	6805      	ldr	r5, [r0, #0]
 800945c:	600b      	str	r3, [r1, #0]
 800945e:	bf18      	it	ne
 8009460:	b22d      	sxthne	r5, r5
 8009462:	e7ef      	b.n	8009444 <_printf_i+0xbc>
 8009464:	680b      	ldr	r3, [r1, #0]
 8009466:	6825      	ldr	r5, [r4, #0]
 8009468:	1d18      	adds	r0, r3, #4
 800946a:	6008      	str	r0, [r1, #0]
 800946c:	0628      	lsls	r0, r5, #24
 800946e:	d501      	bpl.n	8009474 <_printf_i+0xec>
 8009470:	681d      	ldr	r5, [r3, #0]
 8009472:	e002      	b.n	800947a <_printf_i+0xf2>
 8009474:	0669      	lsls	r1, r5, #25
 8009476:	d5fb      	bpl.n	8009470 <_printf_i+0xe8>
 8009478:	881d      	ldrh	r5, [r3, #0]
 800947a:	4854      	ldr	r0, [pc, #336]	; (80095cc <_printf_i+0x244>)
 800947c:	2f6f      	cmp	r7, #111	; 0x6f
 800947e:	bf0c      	ite	eq
 8009480:	2308      	moveq	r3, #8
 8009482:	230a      	movne	r3, #10
 8009484:	2100      	movs	r1, #0
 8009486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800948a:	6866      	ldr	r6, [r4, #4]
 800948c:	60a6      	str	r6, [r4, #8]
 800948e:	2e00      	cmp	r6, #0
 8009490:	bfa2      	ittt	ge
 8009492:	6821      	ldrge	r1, [r4, #0]
 8009494:	f021 0104 	bicge.w	r1, r1, #4
 8009498:	6021      	strge	r1, [r4, #0]
 800949a:	b90d      	cbnz	r5, 80094a0 <_printf_i+0x118>
 800949c:	2e00      	cmp	r6, #0
 800949e:	d04d      	beq.n	800953c <_printf_i+0x1b4>
 80094a0:	4616      	mov	r6, r2
 80094a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80094a6:	fb03 5711 	mls	r7, r3, r1, r5
 80094aa:	5dc7      	ldrb	r7, [r0, r7]
 80094ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094b0:	462f      	mov	r7, r5
 80094b2:	42bb      	cmp	r3, r7
 80094b4:	460d      	mov	r5, r1
 80094b6:	d9f4      	bls.n	80094a2 <_printf_i+0x11a>
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d10b      	bne.n	80094d4 <_printf_i+0x14c>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	07df      	lsls	r7, r3, #31
 80094c0:	d508      	bpl.n	80094d4 <_printf_i+0x14c>
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	6861      	ldr	r1, [r4, #4]
 80094c6:	4299      	cmp	r1, r3
 80094c8:	bfde      	ittt	le
 80094ca:	2330      	movle	r3, #48	; 0x30
 80094cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094d4:	1b92      	subs	r2, r2, r6
 80094d6:	6122      	str	r2, [r4, #16]
 80094d8:	f8cd a000 	str.w	sl, [sp]
 80094dc:	464b      	mov	r3, r9
 80094de:	aa03      	add	r2, sp, #12
 80094e0:	4621      	mov	r1, r4
 80094e2:	4640      	mov	r0, r8
 80094e4:	f7ff fee2 	bl	80092ac <_printf_common>
 80094e8:	3001      	adds	r0, #1
 80094ea:	d14c      	bne.n	8009586 <_printf_i+0x1fe>
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	b004      	add	sp, #16
 80094f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f6:	4835      	ldr	r0, [pc, #212]	; (80095cc <_printf_i+0x244>)
 80094f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	680e      	ldr	r6, [r1, #0]
 8009500:	061f      	lsls	r7, r3, #24
 8009502:	f856 5b04 	ldr.w	r5, [r6], #4
 8009506:	600e      	str	r6, [r1, #0]
 8009508:	d514      	bpl.n	8009534 <_printf_i+0x1ac>
 800950a:	07d9      	lsls	r1, r3, #31
 800950c:	bf44      	itt	mi
 800950e:	f043 0320 	orrmi.w	r3, r3, #32
 8009512:	6023      	strmi	r3, [r4, #0]
 8009514:	b91d      	cbnz	r5, 800951e <_printf_i+0x196>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	f023 0320 	bic.w	r3, r3, #32
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	2310      	movs	r3, #16
 8009520:	e7b0      	b.n	8009484 <_printf_i+0xfc>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	f043 0320 	orr.w	r3, r3, #32
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	2378      	movs	r3, #120	; 0x78
 800952c:	4828      	ldr	r0, [pc, #160]	; (80095d0 <_printf_i+0x248>)
 800952e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009532:	e7e3      	b.n	80094fc <_printf_i+0x174>
 8009534:	065e      	lsls	r6, r3, #25
 8009536:	bf48      	it	mi
 8009538:	b2ad      	uxthmi	r5, r5
 800953a:	e7e6      	b.n	800950a <_printf_i+0x182>
 800953c:	4616      	mov	r6, r2
 800953e:	e7bb      	b.n	80094b8 <_printf_i+0x130>
 8009540:	680b      	ldr	r3, [r1, #0]
 8009542:	6826      	ldr	r6, [r4, #0]
 8009544:	6960      	ldr	r0, [r4, #20]
 8009546:	1d1d      	adds	r5, r3, #4
 8009548:	600d      	str	r5, [r1, #0]
 800954a:	0635      	lsls	r5, r6, #24
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	d501      	bpl.n	8009554 <_printf_i+0x1cc>
 8009550:	6018      	str	r0, [r3, #0]
 8009552:	e002      	b.n	800955a <_printf_i+0x1d2>
 8009554:	0671      	lsls	r1, r6, #25
 8009556:	d5fb      	bpl.n	8009550 <_printf_i+0x1c8>
 8009558:	8018      	strh	r0, [r3, #0]
 800955a:	2300      	movs	r3, #0
 800955c:	6123      	str	r3, [r4, #16]
 800955e:	4616      	mov	r6, r2
 8009560:	e7ba      	b.n	80094d8 <_printf_i+0x150>
 8009562:	680b      	ldr	r3, [r1, #0]
 8009564:	1d1a      	adds	r2, r3, #4
 8009566:	600a      	str	r2, [r1, #0]
 8009568:	681e      	ldr	r6, [r3, #0]
 800956a:	6862      	ldr	r2, [r4, #4]
 800956c:	2100      	movs	r1, #0
 800956e:	4630      	mov	r0, r6
 8009570:	f7f6 fe36 	bl	80001e0 <memchr>
 8009574:	b108      	cbz	r0, 800957a <_printf_i+0x1f2>
 8009576:	1b80      	subs	r0, r0, r6
 8009578:	6060      	str	r0, [r4, #4]
 800957a:	6863      	ldr	r3, [r4, #4]
 800957c:	6123      	str	r3, [r4, #16]
 800957e:	2300      	movs	r3, #0
 8009580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009584:	e7a8      	b.n	80094d8 <_printf_i+0x150>
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	4632      	mov	r2, r6
 800958a:	4649      	mov	r1, r9
 800958c:	4640      	mov	r0, r8
 800958e:	47d0      	blx	sl
 8009590:	3001      	adds	r0, #1
 8009592:	d0ab      	beq.n	80094ec <_printf_i+0x164>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	079b      	lsls	r3, r3, #30
 8009598:	d413      	bmi.n	80095c2 <_printf_i+0x23a>
 800959a:	68e0      	ldr	r0, [r4, #12]
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	4298      	cmp	r0, r3
 80095a0:	bfb8      	it	lt
 80095a2:	4618      	movlt	r0, r3
 80095a4:	e7a4      	b.n	80094f0 <_printf_i+0x168>
 80095a6:	2301      	movs	r3, #1
 80095a8:	4632      	mov	r2, r6
 80095aa:	4649      	mov	r1, r9
 80095ac:	4640      	mov	r0, r8
 80095ae:	47d0      	blx	sl
 80095b0:	3001      	adds	r0, #1
 80095b2:	d09b      	beq.n	80094ec <_printf_i+0x164>
 80095b4:	3501      	adds	r5, #1
 80095b6:	68e3      	ldr	r3, [r4, #12]
 80095b8:	9903      	ldr	r1, [sp, #12]
 80095ba:	1a5b      	subs	r3, r3, r1
 80095bc:	42ab      	cmp	r3, r5
 80095be:	dcf2      	bgt.n	80095a6 <_printf_i+0x21e>
 80095c0:	e7eb      	b.n	800959a <_printf_i+0x212>
 80095c2:	2500      	movs	r5, #0
 80095c4:	f104 0619 	add.w	r6, r4, #25
 80095c8:	e7f5      	b.n	80095b6 <_printf_i+0x22e>
 80095ca:	bf00      	nop
 80095cc:	0800c0e1 	.word	0x0800c0e1
 80095d0:	0800c0f2 	.word	0x0800c0f2

080095d4 <memmove>:
 80095d4:	4288      	cmp	r0, r1
 80095d6:	b510      	push	{r4, lr}
 80095d8:	eb01 0402 	add.w	r4, r1, r2
 80095dc:	d902      	bls.n	80095e4 <memmove+0x10>
 80095de:	4284      	cmp	r4, r0
 80095e0:	4623      	mov	r3, r4
 80095e2:	d807      	bhi.n	80095f4 <memmove+0x20>
 80095e4:	1e43      	subs	r3, r0, #1
 80095e6:	42a1      	cmp	r1, r4
 80095e8:	d008      	beq.n	80095fc <memmove+0x28>
 80095ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095f2:	e7f8      	b.n	80095e6 <memmove+0x12>
 80095f4:	4402      	add	r2, r0
 80095f6:	4601      	mov	r1, r0
 80095f8:	428a      	cmp	r2, r1
 80095fa:	d100      	bne.n	80095fe <memmove+0x2a>
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009606:	e7f7      	b.n	80095f8 <memmove+0x24>

08009608 <_realloc_r>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	4607      	mov	r7, r0
 800960c:	4614      	mov	r4, r2
 800960e:	460e      	mov	r6, r1
 8009610:	b921      	cbnz	r1, 800961c <_realloc_r+0x14>
 8009612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009616:	4611      	mov	r1, r2
 8009618:	f7ff bb82 	b.w	8008d20 <_malloc_r>
 800961c:	b922      	cbnz	r2, 8009628 <_realloc_r+0x20>
 800961e:	f7ff fc99 	bl	8008f54 <_free_r>
 8009622:	4625      	mov	r5, r4
 8009624:	4628      	mov	r0, r5
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009628:	f000 f814 	bl	8009654 <_malloc_usable_size_r>
 800962c:	42a0      	cmp	r0, r4
 800962e:	d20f      	bcs.n	8009650 <_realloc_r+0x48>
 8009630:	4621      	mov	r1, r4
 8009632:	4638      	mov	r0, r7
 8009634:	f7ff fb74 	bl	8008d20 <_malloc_r>
 8009638:	4605      	mov	r5, r0
 800963a:	2800      	cmp	r0, #0
 800963c:	d0f2      	beq.n	8009624 <_realloc_r+0x1c>
 800963e:	4631      	mov	r1, r6
 8009640:	4622      	mov	r2, r4
 8009642:	f7ff fb57 	bl	8008cf4 <memcpy>
 8009646:	4631      	mov	r1, r6
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff fc83 	bl	8008f54 <_free_r>
 800964e:	e7e9      	b.n	8009624 <_realloc_r+0x1c>
 8009650:	4635      	mov	r5, r6
 8009652:	e7e7      	b.n	8009624 <_realloc_r+0x1c>

08009654 <_malloc_usable_size_r>:
 8009654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009658:	1f18      	subs	r0, r3, #4
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfbc      	itt	lt
 800965e:	580b      	ldrlt	r3, [r1, r0]
 8009660:	18c0      	addlt	r0, r0, r3
 8009662:	4770      	bx	lr

08009664 <_init>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr

08009670 <_fini>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr
